
c:/Users/ppita/Documents/Particle/RCTest/target/4.1.0/boron/RCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ed4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6ef0  000b6ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6f14  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e150  000b6f18  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000634  2003e1bc  2003e1bc  0002e1bc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6f84  000b6f84  00026f84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6fac  000b6fac  00026fac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00150521  00000000  00000000  00026fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015e2b  00000000  00000000  001774d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b21c  00000000  00000000  0018d2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a98  00000000  00000000  001c8518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a6e8  00000000  00000000  001cafb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ff7b  00000000  00000000  001d5698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a806  00000000  00000000  00215613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136725  00000000  00000000  0025fe19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000783c  00000000  00000000  00396540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fd01 	bl	b6a34 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fd09 	bl	b6a50 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e150 	.word	0x2003e150
   b4048:	000b6f18 	.word	0x000b6f18
   b404c:	2003e1bc 	.word	0x2003e1bc
   b4050:	2003e1bc 	.word	0x2003e1bc
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f91b 	bl	b6298 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6ecc 	.word	0x000b6ecc
   b407c:	000b6ef0 	.word	0x000b6ef0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b892 	b.w	b41a8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f98b 	bl	b43a0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b8bb 	b.w	b6208 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 beb3 	b.w	b5dfc <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f001 beb9 	b.w	b5e0c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40aa:	4770      	bx	lr

000b40ac <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ac:	7c03      	ldrb	r3, [r0, #16]
   b40ae:	f013 0308 	ands.w	r3, r3, #8
   b40b2:	bf1e      	ittt	ne
   b40b4:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40b6:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40b8:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ba:	2b00      	cmp	r3, #0
  }
   b40bc:	bfac      	ite	ge
   b40be:	4618      	movge	r0, r3
   b40c0:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40c4:	4770      	bx	lr

000b40c6 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40c8:	b510      	push	{r4, lr}
  }
   b40ca:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40cc:	4604      	mov	r4, r0
  }
   b40ce:	f7ff ffe2 	bl	b4096 <_ZdlPvj>
   b40d2:	4620      	mov	r0, r4
   b40d4:	bd10      	pop	{r4, pc}

000b40d6 <_ZN4FileD0Ev>:
   b40d6:	b510      	push	{r4, lr}
   b40d8:	2134      	movs	r1, #52	; 0x34
   b40da:	4604      	mov	r4, r0
   b40dc:	f7ff ffdb 	bl	b4096 <_ZdlPvj>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}

000b40e4 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40e4:	3010      	adds	r0, #16
   b40e6:	f000 bec5 	b.w	b4e74 <_ZN7FatFile4syncEv>

000b40ea <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40ea:	3010      	adds	r0, #16
   b40ec:	f000 bde3 	b.w	b4cb6 <_ZN7FatFile4peekEv>

000b40f0 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b40f0:	3010      	adds	r0, #16
   b40f2:	f000 bf49 	b.w	b4f88 <_ZN7FatFile5writeEPKvj>

000b40f6 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b40f6:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b40f8:	2201      	movs	r2, #1
   b40fa:	f88d 1007 	strb.w	r1, [sp, #7]
   b40fe:	3010      	adds	r0, #16
   b4100:	f10d 0107 	add.w	r1, sp, #7
   b4104:	f000 ff40 	bl	b4f88 <_ZN7FatFile5writeEPKvj>
  }
   b4108:	b003      	add	sp, #12
   b410a:	f85d fb04 	ldr.w	pc, [sp], #4

000b410e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410e:	b40e      	push	{r1, r2, r3}
   b4110:	b503      	push	{r0, r1, lr}
   b4112:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4114:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4116:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b411a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b411c:	f002 f805 	bl	b612a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4120:	b002      	add	sp, #8
   b4122:	f85d eb04 	ldr.w	lr, [sp], #4
   b4126:	b003      	add	sp, #12
   b4128:	4770      	bx	lr
	...

000b412c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b412c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b412e:	4604      	mov	r4, r0
   b4130:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4132:	7922      	ldrb	r2, [r4, #4]
   b4134:	68a3      	ldr	r3, [r4, #8]
   b4136:	b132      	cbz	r2, b4146 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4138:	b9a3      	cbnz	r3, b4164 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b413a:	490b      	ldr	r1, [pc, #44]	; (b4168 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b413c:	b002      	add	sp, #8
   b413e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4142:	f001 bfb7 	b.w	b60b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4146:	4a09      	ldr	r2, [pc, #36]	; (b416c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4148:	7b26      	ldrb	r6, [r4, #12]
   b414a:	4d09      	ldr	r5, [pc, #36]	; (b4170 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b414c:	4909      	ldr	r1, [pc, #36]	; (b4174 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b414e:	7b64      	ldrb	r4, [r4, #13]
   b4150:	2e01      	cmp	r6, #1
   b4152:	bf18      	it	ne
   b4154:	4629      	movne	r1, r5
   b4156:	e9cd 1400 	strd	r1, r4, [sp]
   b415a:	4907      	ldr	r1, [pc, #28]	; (b4178 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b415c:	f7ff ffd7 	bl	b410e <_ZN5Print6printfEPKcz>
  }
   b4160:	b002      	add	sp, #8
   b4162:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4164:	4a05      	ldr	r2, [pc, #20]	; (b417c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4166:	e7ef      	b.n	b4148 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4168:	000b6bbd 	.word	0x000b6bbd
   b416c:	000b6bb4 	.word	0x000b6bb4
   b4170:	000b6bb9 	.word	0x000b6bb9
   b4174:	000b6bb5 	.word	0x000b6bb5
   b4178:	000b6bd3 	.word	0x000b6bd3
   b417c:	000b6bac 	.word	0x000b6bac

000b4180 <_ZN7FatFile4readEv>:
  int read() {
   b4180:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b4182:	2201      	movs	r2, #1
   b4184:	f10d 0107 	add.w	r1, sp, #7
   b4188:	f000 fce7 	bl	b4b5a <_ZN7FatFile4readEPvj>
   b418c:	2801      	cmp	r0, #1
   b418e:	bf0c      	ite	eq
   b4190:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4194:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b4198:	b003      	add	sp, #12
   b419a:	f85d fb04 	ldr.w	pc, [sp], #4

000b419e <_ZN4File4readEv>:
  int read() {
   b419e:	b508      	push	{r3, lr}
    return FatFile::read();
   b41a0:	3010      	adds	r0, #16
   b41a2:	f7ff ffed 	bl	b4180 <_ZN7FatFile4readEv>
  }
   b41a6:	bd08      	pop	{r3, pc}

000b41a8 <setup>:

#define SD_CS_PIN D5
File myFile;
SYSTEM_MODE(MANUAL);

void setup() {
   b41a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b41aa:	486b      	ldr	r0, [pc, #428]	; (b4358 <setup+0x1b0>)
   b41ac:	2300      	movs	r3, #0
   b41ae:	4619      	mov	r1, r3
   b41b0:	b08f      	sub	sp, #60	; 0x3c
   b41b2:	461a      	mov	r2, r3
   b41b4:	6840      	ldr	r0, [r0, #4]
   b41b6:	f001 fdd9 	bl	b5d6c <network_off>

	Cellular.off();
	delay(2500);
   b41ba:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b41be:	f001 fff7 	bl	b61b0 <delay>

  // Open serial communications and wait for port to open:
  Serial.begin(9600);
   b41c2:	f002 f977 	bl	b64b4 <_Z16_fetch_usbserialv>
   b41c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41ca:	f002 f961 	bl	b6490 <_ZN9USBSerial5beginEl>
  while (!Serial) {
   b41ce:	f002 f971 	bl	b64b4 <_Z16_fetch_usbserialv>
   b41d2:	f002 f964 	bl	b649e <_ZN9USBSerialcvbEv>
   b41d6:	2800      	cmp	r0, #0
   b41d8:	d0f9      	beq.n	b41ce <setup+0x26>
    ; // wait for serial port to connect. Needed for native USB port only
  }


  Serial.print("Initializing SD card...");
   b41da:	f002 f96b 	bl	b64b4 <_Z16_fetch_usbserialv>
   b41de:	495f      	ldr	r1, [pc, #380]	; (b435c <setup+0x1b4>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41e0:	4c5f      	ldr	r4, [pc, #380]	; (b4360 <setup+0x1b8>)
   b41e2:	f001 ff67 	bl	b60b4 <_ZN5Print5printEPKc>
class SPISettings : public Printable {
   b41e6:	4b5f      	ldr	r3, [pc, #380]	; (b4364 <setup+0x1bc>)
   b41e8:	9301      	str	r3, [sp, #4]
   b41ea:	2300      	movs	r3, #0
   b41ec:	f88d 3008 	strb.w	r3, [sp, #8]
   b41f0:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b41f4:	4b5c      	ldr	r3, [pc, #368]	; (b4368 <setup+0x1c0>)
   b41f6:	9303      	str	r3, [sp, #12]
   b41f8:	2501      	movs	r5, #1
   b41fa:	ab01      	add	r3, sp, #4
   b41fc:	2205      	movs	r2, #5
   b41fe:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b4202:	4630      	mov	r0, r6
   b4204:	f8ad 5010 	strh.w	r5, [sp, #16]
   b4208:	f001 f9fa 	bl	b5600 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b420c:	2800      	cmp	r0, #0
   b420e:	d04a      	beq.n	b42a6 <setup+0xfe>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4210:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b4212:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b4216:	f000 fe63 	bl	b4ee0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b421a:	4629      	mov	r1, r5
   b421c:	4620      	mov	r0, r4
   b421e:	f001 f899 	bl	b5354 <_ZN9FatVolume4initEh>
   b4222:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b4226:	4601      	mov	r1, r0
   b4228:	2800      	cmp	r0, #0
   b422a:	d037      	beq.n	b429c <setup+0xf4>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b422c:	494c      	ldr	r1, [pc, #304]	; (b4360 <setup+0x1b8>)
   b422e:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b4232:	f000 fc8c 	bl	b4b4e <_ZN7FatFile8openRootEP9FatVolume>
   b4236:	2800      	cmp	r0, #0
   b4238:	d035      	beq.n	b42a6 <setup+0xfe>
    if (!dir->isDir()) {
   b423a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b423e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4242:	d030      	beq.n	b42a6 <setup+0xfe>
    m_cwd = dir;
   b4244:	4b49      	ldr	r3, [pc, #292]	; (b436c <setup+0x1c4>)
  File() {}
   b4246:	4f4a      	ldr	r7, [pc, #296]	; (b4370 <setup+0x1c8>)
   b4248:	601d      	str	r5, [r3, #0]

 if (!SD.begin(SD_CS_PIN,SPI_FULL_SPEED)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
   b424a:	f002 f933 	bl	b64b4 <_Z16_fetch_usbserialv>
   b424e:	4949      	ldr	r1, [pc, #292]	; (b4374 <setup+0x1cc>)
class File : public FatFile, public Stream {
   b4250:	4e49      	ldr	r6, [pc, #292]	; (b4378 <setup+0x1d0>)
   b4252:	f001 ff42 	bl	b60da <_ZN5Print7printlnEPKc>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4256:	2300      	movs	r3, #0
   b4258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b425c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   b4260:	4946      	ldr	r1, [pc, #280]	; (b437c <setup+0x1d4>)
   b4262:	4a47      	ldr	r2, [pc, #284]	; (b4380 <setup+0x1d8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4264:	9305      	str	r3, [sp, #20]
   b4266:	a805      	add	r0, sp, #20
   b4268:	f244 2302 	movw	r3, #16898	; 0x4202
   b426c:	ad05      	add	r5, sp, #20
  File() {}
   b426e:	9701      	str	r7, [sp, #4]
   b4270:	f000 fe3d 	bl	b4eee <_ZN7FatFile4openEPS_PKci>
class File : public FatFile, public Stream {
   b4274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4276:	f106 0410 	add.w	r4, r6, #16
   b427a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b427e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4280:	682b      	ldr	r3, [r5, #0]
   b4282:	6023      	str	r3, [r4, #0]
class Print
   b4284:	9b02      	ldr	r3, [sp, #8]
   b4286:	6073      	str	r3, [r6, #4]
class Stream : public Print
   b4288:	9b03      	ldr	r3, [sp, #12]
   b428a:	60b3      	str	r3, [r6, #8]
   b428c:	9b04      	ldr	r3, [sp, #16]
   b428e:	60f3      	str	r3, [r6, #12]
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("test.txt", FILE_WRITE);

  // if the file opened okay, write to it:
  if (myFile) {
   b4290:	7c33      	ldrb	r3, [r6, #16]
   b4292:	b983      	cbnz	r3, b42b6 <setup+0x10e>
    // close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
   b4294:	f002 f90e 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4298:	493a      	ldr	r1, [pc, #232]	; (b4384 <setup+0x1dc>)
   b429a:	e01c      	b.n	b42d6 <setup+0x12e>
    return (part ? init(part) : init(1) || init(0))
   b429c:	4620      	mov	r0, r4
   b429e:	f001 f859 	bl	b5354 <_ZN9FatVolume4initEh>
   b42a2:	2800      	cmp	r0, #0
   b42a4:	d1c2      	bne.n	b422c <setup+0x84>
    Serial.println("initialization failed!");
   b42a6:	f002 f905 	bl	b64b4 <_Z16_fetch_usbserialv>
   b42aa:	4937      	ldr	r1, [pc, #220]	; (b4388 <setup+0x1e0>)
    myFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
}
   b42ac:	b00f      	add	sp, #60	; 0x3c
   b42ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println("error opening test.txt");
   b42b2:	f001 bf12 	b.w	b60da <_ZN5Print7printlnEPKc>
    Serial.print("Writing to test.txt...");
   b42b6:	f002 f8fd 	bl	b64b4 <_Z16_fetch_usbserialv>
   b42ba:	4934      	ldr	r1, [pc, #208]	; (b438c <setup+0x1e4>)
   b42bc:	f001 fefa 	bl	b60b4 <_ZN5Print5printEPKc>
    myFile.println("testing 1, 2, 3.");
   b42c0:	4933      	ldr	r1, [pc, #204]	; (b4390 <setup+0x1e8>)
   b42c2:	4630      	mov	r0, r6
   b42c4:	f001 ff09 	bl	b60da <_ZN5Print7printlnEPKc>
    myFile.close();
   b42c8:	f1a4 0020 	sub.w	r0, r4, #32
   b42cc:	f000 fe08 	bl	b4ee0 <_ZN7FatFile5closeEv>
    Serial.println("done.");
   b42d0:	f002 f8f0 	bl	b64b4 <_Z16_fetch_usbserialv>
   b42d4:	492f      	ldr	r1, [pc, #188]	; (b4394 <setup+0x1ec>)
   b42d6:	4d30      	ldr	r5, [pc, #192]	; (b4398 <setup+0x1f0>)
    Serial.println("error opening test.txt");
   b42d8:	f001 feff 	bl	b60da <_ZN5Print7printlnEPKc>
    Stream() {_timeout=1000;}
   b42dc:	2300      	movs	r3, #0
   b42de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b42e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    tmpFile.open(vwd(), path, oflag);
   b42e6:	4925      	ldr	r1, [pc, #148]	; (b437c <setup+0x1d4>)
   b42e8:	4a25      	ldr	r2, [pc, #148]	; (b4380 <setup+0x1d8>)
   b42ea:	9305      	str	r3, [sp, #20]
   b42ec:	a805      	add	r0, sp, #20
   b42ee:	ac05      	add	r4, sp, #20
  File() {}
   b42f0:	9701      	str	r7, [sp, #4]
   b42f2:	f000 fdfc 	bl	b4eee <_ZN7FatFile4openEPS_PKci>
class File : public FatFile, public Stream {
   b42f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b42fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b42fe:	6823      	ldr	r3, [r4, #0]
   b4300:	602b      	str	r3, [r5, #0]
   b4302:	9b02      	ldr	r3, [sp, #8]
   b4304:	6073      	str	r3, [r6, #4]
class Stream : public Print
   b4306:	9b03      	ldr	r3, [sp, #12]
   b4308:	60b3      	str	r3, [r6, #8]
   b430a:	9b04      	ldr	r3, [sp, #16]
   b430c:	60f3      	str	r3, [r6, #12]
  if (myFile) {
   b430e:	7c33      	ldrb	r3, [r6, #16]
   b4310:	b1eb      	cbz	r3, b434e <setup+0x1a6>
    Serial.println("test.txt:");
   b4312:	f002 f8cf 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4316:	4921      	ldr	r1, [pc, #132]	; (b439c <setup+0x1f4>)
   b4318:	f001 fedf 	bl	b60da <_ZN5Print7printlnEPKc>
    while (myFile.available()) {
   b431c:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
    return FatFile::read();
   b4320:	3d20      	subs	r5, #32
   b4322:	4638      	mov	r0, r7
   b4324:	f7ff fec2 	bl	b40ac <_ZN4File9availableEv>
   b4328:	b158      	cbz	r0, b4342 <setup+0x19a>
      Serial.write(myFile.read());
   b432a:	f002 f8c3 	bl	b64b4 <_Z16_fetch_usbserialv>
   b432e:	6803      	ldr	r3, [r0, #0]
   b4330:	4604      	mov	r4, r0
   b4332:	4628      	mov	r0, r5
   b4334:	689e      	ldr	r6, [r3, #8]
   b4336:	f7ff ff23 	bl	b4180 <_ZN7FatFile4readEv>
   b433a:	b2c1      	uxtb	r1, r0
   b433c:	4620      	mov	r0, r4
   b433e:	47b0      	blx	r6
    while (myFile.available()) {
   b4340:	e7ef      	b.n	b4322 <setup+0x17a>
    myFile.close();
   b4342:	4815      	ldr	r0, [pc, #84]	; (b4398 <setup+0x1f0>)
}
   b4344:	b00f      	add	sp, #60	; 0x3c
   b4346:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    myFile.close();
   b434a:	f000 bdc9 	b.w	b4ee0 <_ZN7FatFile5closeEv>
    Serial.println("error opening test.txt");
   b434e:	f002 f8b1 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4352:	490c      	ldr	r1, [pc, #48]	; (b4384 <setup+0x1dc>)
   b4354:	e7aa      	b.n	b42ac <setup+0x104>
   b4356:	bf00      	nop
   b4358:	2003e6f0 	.word	0x2003e6f0
   b435c:	000b6bf0 	.word	0x000b6bf0
   b4360:	2003e1c8 	.word	0x2003e1c8
   b4364:	000b6c88 	.word	0x000b6c88
   b4368:	02faf080 	.word	0x02faf080
   b436c:	2003e690 	.word	0x2003e690
   b4370:	000b6c9c 	.word	0x000b6c9c
   b4374:	000b6c08 	.word	0x000b6c08
   b4378:	2003e658 	.word	0x2003e658
   b437c:	2003e604 	.word	0x2003e604
   b4380:	000b6c6a 	.word	0x000b6c6a
   b4384:	000b6c5c 	.word	0x000b6c5c
   b4388:	000b6c1d 	.word	0x000b6c1d
   b438c:	000b6c34 	.word	0x000b6c34
   b4390:	000b6c4b 	.word	0x000b6c4b
   b4394:	000b6c17 	.word	0x000b6c17
   b4398:	2003e668 	.word	0x2003e668
   b439c:	000b6c73 	.word	0x000b6c73

000b43a0 <loop>:

void loop() {
  // nothing happens after setup
   b43a0:	4770      	bx	lr
	...

000b43a4 <_GLOBAL__sub_I_SD>:
   b43a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SdFat() {
   b43a6:	4c1f      	ldr	r4, [pc, #124]	; (b4424 <_GLOBAL__sub_I_SD+0x80>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b43a8:	4d1f      	ldr	r5, [pc, #124]	; (b4428 <_GLOBAL__sub_I_SD+0x84>)
   b43aa:	2264      	movs	r2, #100	; 0x64
   b43ac:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b43b0:	4a1e      	ldr	r2, [pc, #120]	; (b442c <_GLOBAL__sub_I_SD+0x88>)
   b43b2:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b43b6:	2300      	movs	r3, #0
   b43b8:	2201      	movs	r2, #1
   b43ba:	6063      	str	r3, [r4, #4]
   b43bc:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b43c0:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b43c4:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b43c8:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b43cc:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b43d0:	7829      	ldrb	r1, [r5, #0]
   b43d2:	f3bf 8f5b 	dmb	ish
   b43d6:	4011      	ands	r1, r2
   b43d8:	d10b      	bne.n	b43f2 <_GLOBAL__sub_I_SD+0x4e>
   b43da:	4628      	mov	r0, r5
   b43dc:	9101      	str	r1, [sp, #4]
   b43de:	f7ff fe5c 	bl	b409a <__cxa_guard_acquire>
   b43e2:	9901      	ldr	r1, [sp, #4]
   b43e4:	b128      	cbz	r0, b43f2 <_GLOBAL__sub_I_SD+0x4e>
   b43e6:	4812      	ldr	r0, [pc, #72]	; (b4430 <_GLOBAL__sub_I_SD+0x8c>)
   b43e8:	f001 fd74 	bl	b5ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b43ec:	4628      	mov	r0, r5
   b43ee:	f7ff fe59 	bl	b40a4 <__cxa_guard_release>
    Print() : write_error(0) {}
   b43f2:	4a10      	ldr	r2, [pc, #64]	; (b4434 <_GLOBAL__sub_I_SD+0x90>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b43f4:	4b0e      	ldr	r3, [pc, #56]	; (b4430 <_GLOBAL__sub_I_SD+0x8c>)
   b43f6:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
    Stream() {_timeout=1000;}
   b43fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b43fe:	2300      	movs	r3, #0
   b4400:	e9c2 3101 	strd	r3, r1, [r2, #4]
  File() {}
   b4404:	490c      	ldr	r1, [pc, #48]	; (b4438 <_GLOBAL__sub_I_SD+0x94>)
   b4406:	6113      	str	r3, [r2, #16]
   b4408:	6011      	str	r1, [r2, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b440a:	4a0c      	ldr	r2, [pc, #48]	; (b443c <_GLOBAL__sub_I_SD+0x98>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b440c:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
   b440e:	e9c2 3300 	strd	r3, r3, [r2]
    SleepResult() {}
   b4412:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b4416:	6093      	str	r3, [r2, #8]
   b4418:	b003      	add	sp, #12
   b441a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b441e:	f001 bc59 	b.w	b5cd4 <set_system_mode>
   b4422:	bf00      	nop
   b4424:	2003e1c8 	.word	0x2003e1c8
   b4428:	2003e1bc 	.word	0x2003e1bc
   b442c:	000b6c88 	.word	0x000b6c88
   b4430:	2003e1c0 	.word	0x2003e1c0
   b4434:	2003e658 	.word	0x2003e658
   b4438:	000b6c9c 	.word	0x000b6c9c
   b443c:	2003e64c 	.word	0x2003e64c

000b4440 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b4440:	2904      	cmp	r1, #4
   b4442:	d804      	bhi.n	b444e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b4444:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b4448:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b444c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b444e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b4450:	bf9b      	ittet	ls
   b4452:	f101 31ff 	addls.w	r1, r1, #4294967295
   b4456:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b445a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b445c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b445e:	bf84      	itt	hi
   b4460:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b4464:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b4466:	4770      	bx	lr

000b4468 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4468:	b510      	push	{r4, lr}
   b446a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b446c:	3024      	adds	r0, #36	; 0x24
   b446e:	f000 fe63 	bl	b5138 <_ZN8FatCache4syncEv>
   b4472:	b128      	cbz	r0, b4480 <_ZN9FatVolume9cacheSyncEv+0x18>
   b4474:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b447c:	f000 be5c 	b.w	b5138 <_ZN8FatCache4syncEv>
  }
   b4480:	bd10      	pop	{r4, pc}

000b4482 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b4482:	1e41      	subs	r1, r0, #1
   b4484:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b4488:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b448a:	0842      	lsrs	r2, r0, #1
   b448c:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b4490:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b4494:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b4498:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b449a:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b449c:	d1f5      	bne.n	b448a <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b449e:	4770      	bx	lr

000b44a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b44a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44a4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b44a6:	f810 3b01 	ldrb.w	r3, [r0], #1
   b44aa:	2b20      	cmp	r3, #32
   b44ac:	d0fa      	beq.n	b44a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b44ae:	4d6a      	ldr	r5, [pc, #424]	; (b4658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b44b0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b44b2:	2400      	movs	r4, #0
    c = path[len];
   b44b4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b44b6:	b1c3      	cbz	r3, b44ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b44b8:	2b2f      	cmp	r3, #47	; 0x2f
   b44ba:	d016      	beq.n	b44ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b44bc:	2b5c      	cmp	r3, #92	; 0x5c
   b44be:	d102      	bne.n	b44c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b44c0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b44c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b44c6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b44ca:	b2c0      	uxtb	r0, r0
   b44cc:	281d      	cmp	r0, #29
   b44ce:	d803      	bhi.n	b44d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b44d0:	fa25 f000 	lsr.w	r0, r5, r0
   b44d4:	07c0      	lsls	r0, r0, #31
   b44d6:	d4f3      	bmi.n	b44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b44d8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b44dc:	283c      	cmp	r0, #60	; 0x3c
   b44de:	d0ef      	beq.n	b44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b44e0:	3b20      	subs	r3, #32
   b44e2:	2b5e      	cmp	r3, #94	; 0x5e
   b44e4:	d8ec      	bhi.n	b44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b44e6:	3401      	adds	r4, #1
    c = path[len];
   b44e8:	e7e4      	b.n	b44b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b44ea:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b44ec:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b44ee:	4607      	mov	r7, r0
   b44f0:	f810 5b01 	ldrb.w	r5, [r0], #1
   b44f4:	2d20      	cmp	r5, #32
   b44f6:	d0fa      	beq.n	b44ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b44f8:	2d2f      	cmp	r5, #47	; 0x2f
   b44fa:	d0f8      	beq.n	b44ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b44fc:	6017      	str	r7, [r2, #0]
  while (len) {
   b44fe:	b14c      	cbz	r4, b4514 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b4500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b4504:	2a2e      	cmp	r2, #46	; 0x2e
   b4506:	d001      	beq.n	b450c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b4508:	2a20      	cmp	r2, #32
   b450a:	d101      	bne.n	b4510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b450c:	3c01      	subs	r4, #1
  while (len) {
   b450e:	e7f6      	b.n	b44fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b4510:	2cff      	cmp	r4, #255	; 0xff
   b4512:	dcd5      	bgt.n	b44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b4514:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b4518:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b451c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b451e:	f8c1 300d 	str.w	r3, [r1, #13]
   b4522:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b4524:	f04f 0800 	mov.w	r8, #0
   b4528:	f816 3008 	ldrb.w	r3, [r6, r8]
   b452c:	2b2e      	cmp	r3, #46	; 0x2e
   b452e:	d001      	beq.n	b4534 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b4530:	2b20      	cmp	r3, #32
   b4532:	d102      	bne.n	b453a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b4534:	f108 0801 	add.w	r8, r8, #1
   b4538:	e7f6      	b.n	b4528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b453a:	fab8 f088 	clz	r0, r8
   b453e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4540:	1e65      	subs	r5, r4, #1
   b4542:	1c6b      	adds	r3, r5, #1
   b4544:	d002      	beq.n	b454c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b4546:	5d73      	ldrb	r3, [r6, r5]
   b4548:	2b2e      	cmp	r3, #46	; 0x2e
   b454a:	d114      	bne.n	b4576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b454c:	f04f 0900 	mov.w	r9, #0
   b4550:	2707      	movs	r7, #7
   b4552:	464a      	mov	r2, r9
   b4554:	46ca      	mov	sl, r9
   b4556:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b455a:	45a0      	cmp	r8, r4
   b455c:	da68      	bge.n	b4630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b455e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b4562:	2b20      	cmp	r3, #32
   b4564:	d003      	beq.n	b456e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b4566:	2b2e      	cmp	r3, #46	; 0x2e
   b4568:	d107      	bne.n	b457a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b456a:	45a8      	cmp	r8, r5
   b456c:	d012      	beq.n	b4594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b456e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b4570:	f108 0801 	add.w	r8, r8, #1
   b4574:	e7f1      	b.n	b455a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b4576:	3d01      	subs	r5, #1
   b4578:	e7e3      	b.n	b4542 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b457a:	2b22      	cmp	r3, #34	; 0x22
   b457c:	d008      	beq.n	b4590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b457e:	2b7c      	cmp	r3, #124	; 0x7c
   b4580:	d006      	beq.n	b4590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b4582:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b4586:	f1bc 0f05 	cmp.w	ip, #5
   b458a:	d80a      	bhi.n	b45a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b458c:	2b2d      	cmp	r3, #45	; 0x2d
   b458e:	d012      	beq.n	b45b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b4590:	45a8      	cmp	r8, r5
   b4592:	d15b      	bne.n	b464c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b4594:	2f0a      	cmp	r7, #10
   b4596:	d04a      	beq.n	b462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b4598:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b459a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b459c:	f04f 0e10 	mov.w	lr, #16
   b45a0:	e7e6      	b.n	b4570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b45a2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b45a6:	f1bc 0f05 	cmp.w	ip, #5
   b45aa:	d9f1      	bls.n	b4590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b45ac:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b45b0:	f1bc 0f02 	cmp.w	ip, #2
   b45b4:	d9ec      	bls.n	b4590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b45b6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b45ba:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b45be:	d8e7      	bhi.n	b4590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b45c0:	45a8      	cmp	r8, r5
   b45c2:	d0e7      	beq.n	b4594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b45c4:	42ba      	cmp	r2, r7
   b45c6:	d830      	bhi.n	b462a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b45c8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b45cc:	f1bc 0f19 	cmp.w	ip, #25
   b45d0:	d81a      	bhi.n	b4608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b45d2:	3b20      	subs	r3, #32
        lc |= bit;
   b45d4:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b45d8:	b2db      	uxtb	r3, r3
        lc |= bit;
   b45da:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b45de:	f102 0c01 	add.w	ip, r2, #1
   b45e2:	fa5f fc8c 	uxtb.w	ip, ip
   b45e6:	440a      	add	r2, r1
      if (i < 7) {
   b45e8:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b45ec:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b45ee:	d801      	bhi.n	b45f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b45f0:	f881 c00c 	strb.w	ip, [r1, #12]
   b45f4:	4662      	mov	r2, ip
   b45f6:	e7bb      	b.n	b4570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b45f8:	45a8      	cmp	r8, r5
   b45fa:	dc18      	bgt.n	b462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b45fc:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b45fe:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b4600:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b4602:	f04f 0e10 	mov.w	lr, #16
   b4606:	e7b2      	b.n	b456e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b4608:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b460c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b4610:	bf98      	it	ls
   b4612:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b4616:	e7e2      	b.n	b45de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b4618:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b461a:	2001      	movs	r0, #1
   b461c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b461e:	4419      	add	r1, r3
   b4620:	237e      	movs	r3, #126	; 0x7e
   b4622:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b4624:	2331      	movs	r3, #49	; 0x31
   b4626:	738b      	strb	r3, [r1, #14]
   b4628:	e74b      	b.n	b44c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b462a:	2f0a      	cmp	r7, #10
   b462c:	d1e4      	bne.n	b45f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b462e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b4630:	7b4b      	ldrb	r3, [r1, #13]
   b4632:	2b20      	cmp	r3, #32
   b4634:	f43f af44 	beq.w	b44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b4638:	2800      	cmp	r0, #0
   b463a:	d0ed      	beq.n	b4618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b463c:	ea1a 0f09 	tst.w	sl, r9
   b4640:	bf18      	it	ne
   b4642:	f04f 0902 	movne.w	r9, #2
   b4646:	f881 9000 	strb.w	r9, [r1]
   b464a:	e73a      	b.n	b44c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b464c:	42ba      	cmp	r2, r7
   b464e:	d8ec      	bhi.n	b462a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b4650:	2000      	movs	r0, #0
      c = '_';
   b4652:	235f      	movs	r3, #95	; 0x5f
   b4654:	e7c3      	b.n	b45de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b4656:	bf00      	nop
   b4658:	31000101 	.word	0x31000101

000b465c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b4660:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b4664:	4606      	mov	r6, r0
   b4666:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b4668:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b466a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b466c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b4670:	6861      	ldr	r1, [r4, #4]
   b4672:	68a2      	ldr	r2, [r4, #8]
   b4674:	186b      	adds	r3, r5, r1
   b4676:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b4678:	4411      	add	r1, r2
   b467a:	4291      	cmp	r1, r2
   b467c:	d006      	beq.n	b468c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b467e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4682:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b4686:	4043      	eors	r3, r0
   b4688:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b468a:	e7f6      	b.n	b467a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b468c:	f1b9 0f03 	cmp.w	r9, #3
   b4690:	bf28      	it	cs
   b4692:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b4696:	f109 0204 	add.w	r2, r9, #4
   b469a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b469c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b46a0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b46a2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b46a4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b46a6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b46a8:	bf94      	ite	ls
   b46aa:	3130      	addls	r1, #48	; 0x30
   b46ac:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b46ae:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b46b0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b46b2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b46b6:	d1f1      	bne.n	b469c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b46b8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b46bc:	2100      	movs	r1, #0
   b46be:	735f      	strb	r7, [r3, #13]
   b46c0:	4630      	mov	r0, r6
   b46c2:	f000 fb2a 	bl	b4d1a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b46c6:	2101      	movs	r1, #1
   b46c8:	4630      	mov	r0, r6
   b46ca:	f000 fb07 	bl	b4cdc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b46ce:	4601      	mov	r1, r0
   b46d0:	b928      	cbnz	r0, b46de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b46d2:	7870      	ldrb	r0, [r6, #1]
   b46d4:	fab0 f080 	clz	r0, r0
   b46d8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b46da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b46de:	7803      	ldrb	r3, [r0, #0]
   b46e0:	b16b      	cbz	r3, b46fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b46e2:	7ac3      	ldrb	r3, [r0, #11]
   b46e4:	071b      	lsls	r3, r3, #28
   b46e6:	d4ee      	bmi.n	b46c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b46e8:	220b      	movs	r2, #11
   b46ea:	4640      	mov	r0, r8
   b46ec:	f002 f992 	bl	b6a14 <memcmp>
   b46f0:	2800      	cmp	r0, #0
   b46f2:	d1e8      	bne.n	b46c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b46f4:	3501      	adds	r5, #1
   b46f6:	b2ad      	uxth	r5, r5
   b46f8:	2d64      	cmp	r5, #100	; 0x64
   b46fa:	d1b9      	bne.n	b4670 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b46fc:	e7ed      	b.n	b46da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b46fe:	2001      	movs	r0, #1
   b4700:	e7eb      	b.n	b46da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b4704 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b4704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4708:	ed2d 8b02 	vpush	{d8}
   b470c:	b08b      	sub	sp, #44	; 0x2c
   b470e:	460d      	mov	r5, r1
   b4710:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b4712:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b4714:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b4716:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b471a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b471c:	d105      	bne.n	b472a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b471e:	2000      	movs	r0, #0
}
   b4720:	b00b      	add	sp, #44	; 0x2c
   b4722:	ecbd 8b02 	vpop	{d8}
   b4726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b472a:	9b07      	ldr	r3, [sp, #28]
   b472c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b472e:	2b00      	cmp	r3, #0
   b4730:	d1f5      	bne.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b4732:	6853      	ldr	r3, [r2, #4]
   b4734:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b4736:	7813      	ldrb	r3, [r2, #0]
   b4738:	079c      	lsls	r4, r3, #30
   b473a:	bf1f      	itttt	ne
   b473c:	9b05      	ldrne	r3, [sp, #20]
   b473e:	330c      	addne	r3, #12
   b4740:	220d      	movne	r2, #13
   b4742:	fbb3 f3f2 	udivne	r3, r3, r2
   b4746:	bf1a      	itte	ne
   b4748:	3301      	addne	r3, #1
   b474a:	b2db      	uxtbne	r3, r3
   b474c:	2301      	moveq	r3, #1
    seekSet(0);
   b474e:	2100      	movs	r1, #0
   b4750:	4628      	mov	r0, r5
   b4752:	9303      	str	r3, [sp, #12]
   b4754:	f000 fae1 	bl	b4d1a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b4758:	f107 030d 	add.w	r3, r7, #13
  }
   b475c:	f04f 0b00 	mov.w	fp, #0
   b4760:	ee08 3a10 	vmov	s16, r3
   b4764:	46da      	mov	sl, fp
   b4766:	465c      	mov	r4, fp
   b4768:	465e      	mov	r6, fp
   b476a:	f8cd b010 	str.w	fp, [sp, #16]
   b476e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b4770:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b4772:	2101      	movs	r1, #1
   b4774:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b4776:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b477a:	f000 faaf 	bl	b4cdc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b477e:	4603      	mov	r3, r0
   b4780:	2800      	cmp	r0, #0
   b4782:	d171      	bne.n	b4868 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b4784:	786b      	ldrb	r3, [r5, #1]
   b4786:	2b00      	cmp	r3, #0
   b4788:	d1c9      	bne.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b478a:	9b06      	ldr	r3, [sp, #24]
   b478c:	059a      	lsls	r2, r3, #22
   b478e:	d5c6      	bpl.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b4790:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b4794:	3b01      	subs	r3, #1
   b4796:	2b01      	cmp	r3, #1
   b4798:	d8c1      	bhi.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b479a:	9b04      	ldr	r3, [sp, #16]
   b479c:	2c00      	cmp	r4, #0
   b479e:	bf08      	it	eq
   b47a0:	4643      	moveq	r3, r8
   b47a2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b47a4:	9b03      	ldr	r3, [sp, #12]
   b47a6:	429c      	cmp	r4, r3
   b47a8:	f0c0 80f1 	bcc.w	b498e <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b47ac:	f1b9 0f00 	cmp.w	r9, #0
   b47b0:	f040 810a 	bne.w	b49c8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b47b4:	9b04      	ldr	r3, [sp, #16]
   b47b6:	4628      	mov	r0, r5
   b47b8:	0159      	lsls	r1, r3, #5
   b47ba:	f000 faae 	bl	b4d1a <_ZN7FatFile7seekSetEm>
   b47be:	2800      	cmp	r0, #0
   b47c0:	d0ad      	beq.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b47c2:	9b03      	ldr	r3, [sp, #12]
   b47c4:	f103 39ff 	add.w	r9, r3, #4294967295
   b47c8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b47cc:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b47ce:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b47d2:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b47d6:	2e00      	cmp	r6, #0
   b47d8:	f000 810d 	beq.w	b49f6 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b47dc:	2100      	movs	r1, #0
   b47de:	4628      	mov	r0, r5
   b47e0:	f000 fa7c 	bl	b4cdc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b47e4:	4604      	mov	r4, r0
   b47e6:	2800      	cmp	r0, #0
   b47e8:	d099      	beq.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b47ea:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b47ec:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b47f0:	454e      	cmp	r6, r9
   b47f2:	f043 0301 	orr.w	r3, r3, #1
   b47f6:	bf0c      	ite	eq
   b47f8:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b47fc:	46b3      	movne	fp, r6
   b47fe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b4802:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b4806:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b480a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b480e:	f107 000d 	add.w	r0, r7, #13
   b4812:	f7ff fe36 	bl	b4482 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b4816:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b481a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b481c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b4820:	f00b 031f 	and.w	r3, fp, #31
   b4824:	220d      	movs	r2, #13
   b4826:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b4828:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b482c:	4353      	muls	r3, r2
   b482e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b4830:	9905      	ldr	r1, [sp, #20]
   b4832:	4299      	cmp	r1, r3
   b4834:	f240 80d0 	bls.w	b49d8 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b4838:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b483c:	2a04      	cmp	r2, #4
   b483e:	fa5f fe82 	uxtb.w	lr, r2
   b4842:	f102 0001 	add.w	r0, r2, #1
   b4846:	f200 80cd 	bhi.w	b49e4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b484a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b484e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b4852:	280d      	cmp	r0, #13
   b4854:	f103 0301 	add.w	r3, r3, #1
   b4858:	4602      	mov	r2, r0
   b485a:	d1e9      	bne.n	b4830 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b485c:	3e01      	subs	r6, #1
   b485e:	b2f6      	uxtb	r6, r6
   b4860:	e7b9      	b.n	b47d6 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b4862:	f04f 0901 	mov.w	r9, #1
   b4866:	e783      	b.n	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b4868:	7802      	ldrb	r2, [r0, #0]
   b486a:	2ae5      	cmp	r2, #229	; 0xe5
   b486c:	d000      	beq.n	b4870 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b486e:	b97a      	cbnz	r2, b4890 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b4870:	9904      	ldr	r1, [sp, #16]
   b4872:	2c00      	cmp	r4, #0
   b4874:	bf08      	it	eq
   b4876:	4641      	moveq	r1, r8
   b4878:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b487a:	9903      	ldr	r1, [sp, #12]
   b487c:	428c      	cmp	r4, r1
        freeFound++;
   b487e:	bf3c      	itt	cc
   b4880:	3401      	addcc	r4, #1
   b4882:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b4884:	2a00      	cmp	r2, #0
   b4886:	d080      	beq.n	b478a <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b4888:	2ae5      	cmp	r2, #229	; 0xe5
   b488a:	d105      	bne.n	b4898 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b488c:	2600      	movs	r6, #0
   b488e:	e76f      	b.n	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b4890:	9903      	ldr	r1, [sp, #12]
   b4892:	428c      	cmp	r4, r1
   b4894:	bf38      	it	cc
   b4896:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b4898:	2a2e      	cmp	r2, #46	; 0x2e
   b489a:	d0f7      	beq.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b489c:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b489e:	290f      	cmp	r1, #15
   b48a0:	d14a      	bne.n	b4938 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b48a2:	bb16      	cbnz	r6, b48ea <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b48a4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b48a8:	f43f af62 	beq.w	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b48ac:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b48b0:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b48b4:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b48b6:	220d      	movs	r2, #13
   b48b8:	f10a 38ff 	add.w	r8, sl, #4294967295
   b48bc:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b48c0:	9a05      	ldr	r2, [sp, #20]
   b48c2:	4542      	cmp	r2, r8
   b48c4:	d9e2      	bls.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b48c6:	eba2 0208 	sub.w	r2, r2, r8
   b48ca:	9208      	str	r2, [sp, #32]
   b48cc:	2200      	movs	r2, #0
   b48ce:	eb02 0108 	add.w	r1, r2, r8
   b48d2:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b48d4:	4618      	mov	r0, r3
   b48d6:	b2d1      	uxtb	r1, r2
   b48d8:	f7ff fdb2 	bl	b4440 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b48dc:	9908      	ldr	r1, [sp, #32]
   b48de:	428a      	cmp	r2, r1
   b48e0:	d10d      	bne.n	b48fe <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b48e2:	2800      	cmp	r0, #0
   b48e4:	bf18      	it	ne
   b48e6:	2600      	movne	r6, #0
   b48e8:	e742      	b.n	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b48ea:	f10a 3aff 	add.w	sl, sl, #4294967295
   b48ee:	fa5f fa8a 	uxtb.w	sl, sl
   b48f2:	4552      	cmp	r2, sl
   b48f4:	d1ca      	bne.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b48f6:	7b5a      	ldrb	r2, [r3, #13]
   b48f8:	455a      	cmp	r2, fp
   b48fa:	d0dc      	beq.n	b48b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b48fc:	e7c6      	b.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b48fe:	28ff      	cmp	r0, #255	; 0xff
   b4900:	d8c4      	bhi.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b4902:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b4906:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b490a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b490c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b490e:	bf9c      	itt	ls
   b4910:	f10e 0020 	addls.w	r0, lr, #32
   b4914:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b4918:	4608      	mov	r0, r1
   b491a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b491c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b491e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b4922:	f1bc 0f19 	cmp.w	ip, #25
   b4926:	bf9c      	itt	ls
   b4928:	3120      	addls	r1, #32
   b492a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b492c:	4571      	cmp	r1, lr
   b492e:	d1ad      	bne.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b4930:	3201      	adds	r2, #1
   b4932:	2a0d      	cmp	r2, #13
   b4934:	d1cb      	bne.n	b48ce <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b4936:	e71b      	b.n	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4938:	0708      	lsls	r0, r1, #28
   b493a:	d4a7      	bmi.n	b488c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b493c:	b15e      	cbz	r6, b4956 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b493e:	f1ba 0f01 	cmp.w	sl, #1
   b4942:	f47f aeec 	bne.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b4946:	4618      	mov	r0, r3
   b4948:	f7ff fd9b 	bl	b4482 <_ZN7FatFile11lfnChecksumEPh>
   b494c:	4558      	cmp	r0, fp
   b494e:	f47f aee6 	bne.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b4952:	46b1      	mov	r9, r6
   b4954:	e00e      	b.n	b4974 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b4956:	ee18 1a10 	vmov	r1, s16
   b495a:	220b      	movs	r2, #11
   b495c:	4618      	mov	r0, r3
   b495e:	f002 f859 	bl	b6a14 <memcmp>
   b4962:	2800      	cmp	r0, #0
   b4964:	f47f af04 	bne.w	b4770 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b4968:	f897 9000 	ldrb.w	r9, [r7]
   b496c:	f019 0901 	ands.w	r9, r9, #1
   b4970:	f47f af77 	bne.w	b4862 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b4974:	9b06      	ldr	r3, [sp, #24]
   b4976:	0519      	lsls	r1, r3, #20
   b4978:	f53f aed1 	bmi.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b497c:	9b06      	ldr	r3, [sp, #24]
   b497e:	9807      	ldr	r0, [sp, #28]
   b4980:	f8cd 9000 	str.w	r9, [sp]
   b4984:	4642      	mov	r2, r8
   b4986:	4629      	mov	r1, r5
   b4988:	f000 fa0a 	bl	b4da0 <_ZN7FatFile15openCachedEntryEPS_tih>
   b498c:	e6c8      	b.n	b4720 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b498e:	2100      	movs	r1, #0
   b4990:	4628      	mov	r0, r5
   b4992:	f000 f9a3 	bl	b4cdc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b4996:	b9a0      	cbnz	r0, b49c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b4998:	786b      	ldrb	r3, [r5, #1]
   b499a:	2b00      	cmp	r3, #0
   b499c:	f47f aebf 	bne.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b49a0:	4628      	mov	r0, r5
   b49a2:	f000 f887 	bl	b4ab4 <_ZN7FatFile13addDirClusterEv>
   b49a6:	2800      	cmp	r0, #0
   b49a8:	f43f aeb9 	beq.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b49ac:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b49ae:	791b      	ldrb	r3, [r3, #4]
   b49b0:	2b01      	cmp	r3, #1
   b49b2:	f63f aefb 	bhi.w	b47ac <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b49b6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b49b8:	3410      	adds	r4, #16
   b49ba:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b49bc:	42a3      	cmp	r3, r4
   b49be:	d8ef      	bhi.n	b49a0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b49c0:	e6f4      	b.n	b47ac <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b49c2:	3401      	adds	r4, #1
   b49c4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b49c6:	e6ed      	b.n	b47a4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b49c8:	4639      	mov	r1, r7
   b49ca:	4628      	mov	r0, r5
   b49cc:	f7ff fe46 	bl	b465c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b49d0:	2800      	cmp	r0, #0
   b49d2:	f47f aeef 	bne.w	b47b4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b49d6:	e6a2      	b.n	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b49d8:	bf14      	ite	ne
   b49da:	f04f 31ff 	movne.w	r1, #4294967295
   b49de:	2100      	moveq	r1, #0
   b49e0:	b289      	uxth	r1, r1
   b49e2:	e72b      	b.n	b483c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b49e4:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b49e8:	bf94      	ite	ls
   b49ea:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b49ee:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b49f2:	8091      	strh	r1, [r2, #4]
   b49f4:	e72d      	b.n	b4852 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b49f6:	4631      	mov	r1, r6
   b49f8:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b49fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b49fe:	f000 f96d 	bl	b4cdc <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b4a02:	4604      	mov	r4, r0
   b4a04:	2800      	cmp	r0, #0
   b4a06:	f43f ae8a 	beq.w	b471e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b4a0a:	2220      	movs	r2, #32
   b4a0c:	4631      	mov	r1, r6
   b4a0e:	f002 f81f 	bl	b6a50 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b4a12:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b4a16:	6023      	str	r3, [r4, #0]
   b4a18:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b4a1c:	6063      	str	r3, [r4, #4]
   b4a1e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b4a22:	8123      	strh	r3, [r4, #8]
   b4a24:	7dfb      	ldrb	r3, [r7, #23]
   b4a26:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b4a28:	783b      	ldrb	r3, [r7, #0]
   b4a2a:	f003 0318 	and.w	r3, r3, #24
   b4a2e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b4a30:	4b0f      	ldr	r3, [pc, #60]	; (b4a70 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b4a32:	681b      	ldr	r3, [r3, #0]
   b4a34:	b19b      	cbz	r3, b4a5e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b4a36:	f104 010e 	add.w	r1, r4, #14
   b4a3a:	f104 0010 	add.w	r0, r4, #16
   b4a3e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b4a40:	8a23      	ldrh	r3, [r4, #16]
   b4a42:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b4a44:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b4a46:	89e3      	ldrh	r3, [r4, #14]
   b4a48:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b4a4a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b4a4c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b4a50:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b4a54:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b4a58:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b4a5c:	e78e      	b.n	b497c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b4a5e:	2321      	movs	r3, #33	; 0x21
   b4a60:	7423      	strb	r3, [r4, #16]
   b4a62:	2328      	movs	r3, #40	; 0x28
   b4a64:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b4a66:	2308      	movs	r3, #8
   b4a68:	73a6      	strb	r6, [r4, #14]
   b4a6a:	73e3      	strb	r3, [r4, #15]
   b4a6c:	e7e8      	b.n	b4a40 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b4a6e:	bf00      	nop
   b4a70:	2003e68c 	.word	0x2003e68c

000b4a74 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4a74:	b538      	push	{r3, r4, r5, lr}
   b4a76:	4604      	mov	r4, r0
   b4a78:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b4a7a:	2224      	movs	r2, #36	; 0x24
   b4a7c:	2100      	movs	r1, #0
   b4a7e:	f001 ffe7 	bl	b6a50 <memset>

  m_vol = vol;
   b4a82:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b4a84:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b4a86:	2b10      	cmp	r3, #16
   b4a88:	d003      	beq.n	b4a92 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b4a8a:	2b20      	cmp	r3, #32
   b4a8c:	d006      	beq.n	b4a9c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4a8e:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4a90:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4a92:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4a94:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b4a96:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b4a98:	70a0      	strb	r0, [r4, #2]
  return true;
   b4a9a:	e7f9      	b.n	b4a90 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4a9c:	2340      	movs	r3, #64	; 0x40
   b4a9e:	e7f9      	b.n	b4a94 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4aa0 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b4aa0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4aa2:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b4aa4:	f043 0304 	orr.w	r3, r3, #4
   b4aa8:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4aaa:	f100 0210 	add.w	r2, r0, #16
   b4aae:	6880      	ldr	r0, [r0, #8]
   b4ab0:	f000 bbf8 	b.w	b52a4 <_ZN9FatVolume15allocateClusterEmPm>

000b4ab4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b4ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b4ab8:	7801      	ldrb	r1, [r0, #0]
   b4aba:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b4abe:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b4ac0:	d003      	beq.n	b4aca <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b4ac2:	2600      	movs	r6, #0
}
   b4ac4:	4630      	mov	r0, r6
   b4ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b4aca:	6942      	ldr	r2, [r0, #20]
   b4acc:	4b17      	ldr	r3, [pc, #92]	; (b4b2c <_ZN7FatFile13addDirClusterEv+0x78>)
   b4ace:	429a      	cmp	r2, r3
   b4ad0:	d2f7      	bcs.n	b4ac2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b4ad2:	f7ff ffe5 	bl	b4aa0 <_ZN7FatFile10addClusterEv>
   b4ad6:	4606      	mov	r6, r0
   b4ad8:	2800      	cmp	r0, #0
   b4ada:	d0f2      	beq.n	b4ac2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b4adc:	6921      	ldr	r1, [r4, #16]
   b4ade:	68a0      	ldr	r0, [r4, #8]
   b4ae0:	f000 fb75 	bl	b51ce <_ZNK9FatVolume17clusterFirstBlockEm>
   b4ae4:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b4ae6:	68a0      	ldr	r0, [r4, #8]
   b4ae8:	2205      	movs	r2, #5
   b4aea:	4639      	mov	r1, r7
   b4aec:	3024      	adds	r0, #36	; 0x24
   b4aee:	f000 fb4b 	bl	b5188 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4af2:	4680      	mov	r8, r0
   b4af4:	2800      	cmp	r0, #0
   b4af6:	d0e4      	beq.n	b4ac2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4af8:	4629      	mov	r1, r5
   b4afa:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4afe:	f001 ffa7 	bl	b6a50 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4b02:	2501      	movs	r5, #1
   b4b04:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b4b06:	791a      	ldrb	r2, [r3, #4]
   b4b08:	42aa      	cmp	r2, r5
   b4b0a:	d909      	bls.n	b4b20 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b4b0c:	6818      	ldr	r0, [r3, #0]
   b4b0e:	4642      	mov	r2, r8
   b4b10:	19e9      	adds	r1, r5, r7
   b4b12:	f000 fea6 	bl	b5862 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4b16:	2800      	cmp	r0, #0
   b4b18:	d0d3      	beq.n	b4ac2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4b1a:	3501      	adds	r5, #1
   b4b1c:	b2ed      	uxtb	r5, r5
   b4b1e:	e7f1      	b.n	b4b04 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b4b20:	6963      	ldr	r3, [r4, #20]
   b4b22:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b4b26:	6163      	str	r3, [r4, #20]
  return true;
   b4b28:	e7cc      	b.n	b4ac4 <_ZN7FatFile13addDirClusterEv+0x10>
   b4b2a:	bf00      	nop
   b4b2c:	001ffe00 	.word	0x001ffe00

000b4b30 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b4b30:	b510      	push	{r4, lr}
   b4b32:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b4b34:	6880      	ldr	r0, [r0, #8]
   b4b36:	460a      	mov	r2, r1
   b4b38:	3024      	adds	r0, #36	; 0x24
   b4b3a:	69a1      	ldr	r1, [r4, #24]
   b4b3c:	f000 fb24 	bl	b5188 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4b40:	b120      	cbz	r0, b4b4c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b4b42:	88a3      	ldrh	r3, [r4, #4]
   b4b44:	f003 030f 	and.w	r3, r3, #15
   b4b48:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b4b4c:	bd10      	pop	{r4, pc}

000b4b4e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b4b4e:	7803      	ldrb	r3, [r0, #0]
   b4b50:	b90b      	cbnz	r3, b4b56 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b4b52:	f7ff bf8f 	b.w	b4a74 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b4b56:	2000      	movs	r0, #0
   b4b58:	4770      	bx	lr

000b4b5a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b4b5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b4b5e:	7803      	ldrb	r3, [r0, #0]
   b4b60:	4604      	mov	r4, r0
   b4b62:	4688      	mov	r8, r1
   b4b64:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b4b66:	2b00      	cmp	r3, #0
   b4b68:	d05d      	beq.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
   b4b6a:	7882      	ldrb	r2, [r0, #2]
   b4b6c:	07d1      	lsls	r1, r2, #31
   b4b6e:	d55a      	bpl.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b4b70:	071a      	lsls	r2, r3, #28
   b4b72:	d52d      	bpl.n	b4bd0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b4b74:	69c3      	ldr	r3, [r0, #28]
   b4b76:	6942      	ldr	r2, [r0, #20]
   b4b78:	1a9b      	subs	r3, r3, r2
   b4b7a:	429d      	cmp	r5, r3
   b4b7c:	bf28      	it	cs
   b4b7e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b4b80:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b4b82:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4b86:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b4b8a:	2e00      	cmp	r6, #0
   b4b8c:	f000 808f 	beq.w	b4cae <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b4b90:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b4b92:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4b94:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b4b96:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b4b98:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4b9c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b4ba0:	d51f      	bpl.n	b4be2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4ba2:	6a00      	ldr	r0, [r0, #32]
   b4ba4:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b4ba6:	68a0      	ldr	r0, [r4, #8]
   b4ba8:	f1ba 0f00 	cmp.w	sl, #0
   b4bac:	d142      	bne.n	b4c34 <_ZN7FatFile4readEPvj+0xda>
   b4bae:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4bb2:	d33f      	bcc.n	b4c34 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b4bb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4bb6:	4299      	cmp	r1, r3
   b4bb8:	d03c      	beq.n	b4c34 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b4bba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4bbe:	d252      	bcs.n	b4c66 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b4bc0:	6800      	ldr	r0, [r0, #0]
   b4bc2:	4642      	mov	r2, r8
   b4bc4:	f000 fdc4 	bl	b5750 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b4bc8:	b368      	cbz	r0, b4c26 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b4bca:	f44f 7700 	mov.w	r7, #512	; 0x200
   b4bce:	e044      	b.n	b4c5a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b4bd0:	069b      	lsls	r3, r3, #26
   b4bd2:	d5d5      	bpl.n	b4b80 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b4bd4:	6883      	ldr	r3, [r0, #8]
   b4bd6:	891a      	ldrh	r2, [r3, #8]
   b4bd8:	6943      	ldr	r3, [r0, #20]
   b4bda:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b4bde:	b29b      	uxth	r3, r3
   b4be0:	e7cb      	b.n	b4b7a <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b4be2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b4be6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b4bea:	f1ba 0f00 	cmp.w	sl, #0
   b4bee:	d108      	bne.n	b4c02 <_ZN7FatFile4readEPvj+0xa8>
   b4bf0:	f1b9 0f00 	cmp.w	r9, #0
   b4bf4:	d105      	bne.n	b4c02 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4bf6:	b95b      	cbnz	r3, b4c10 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4bf8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b4bfa:	bf4c      	ite	mi
   b4bfc:	6a03      	ldrmi	r3, [r0, #32]
   b4bfe:	6a23      	ldrpl	r3, [r4, #32]
   b4c00:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4c02:	6921      	ldr	r1, [r4, #16]
   b4c04:	68a0      	ldr	r0, [r4, #8]
   b4c06:	f000 fae2 	bl	b51ce <_ZNK9FatVolume17clusterFirstBlockEm>
   b4c0a:	eb09 0100 	add.w	r1, r9, r0
   b4c0e:	e7ca      	b.n	b4ba6 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4c10:	6921      	ldr	r1, [r4, #16]
   b4c12:	465a      	mov	r2, fp
   b4c14:	f000 fae1 	bl	b51da <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4c18:	2800      	cmp	r0, #0
   b4c1a:	db04      	blt.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b4c1c:	d1f1      	bne.n	b4c02 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b4c1e:	7823      	ldrb	r3, [r4, #0]
   b4c20:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4c24:	d143      	bne.n	b4cae <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b4c26:	7863      	ldrb	r3, [r4, #1]
   b4c28:	f043 0302 	orr.w	r3, r3, #2
   b4c2c:	7063      	strb	r3, [r4, #1]
  return -1;
   b4c2e:	f04f 30ff 	mov.w	r0, #4294967295
   b4c32:	e03d      	b.n	b4cb0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b4c34:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b4c38:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b4c3a:	f04f 0200 	mov.w	r2, #0
   b4c3e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b4c42:	bf28      	it	cs
   b4c44:	4637      	movcs	r7, r6
   b4c46:	f000 fa9f 	bl	b5188 <_ZN8FatCache4readEmh>
      if (!pc) {
   b4c4a:	2800      	cmp	r0, #0
   b4c4c:	d0eb      	beq.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b4c4e:	eb00 010a 	add.w	r1, r0, sl
   b4c52:	463a      	mov	r2, r7
   b4c54:	4640      	mov	r0, r8
   b4c56:	f001 feed 	bl	b6a34 <memcpy>
    m_curPosition += n;
   b4c5a:	6963      	ldr	r3, [r4, #20]
   b4c5c:	443b      	add	r3, r7
    dst += n;
   b4c5e:	44b8      	add	r8, r7
    m_curPosition += n;
   b4c60:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b4c62:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b4c64:	e791      	b.n	b4b8a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b4c66:	7822      	ldrb	r2, [r4, #0]
   b4c68:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b4c6a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b4c6e:	d406      	bmi.n	b4c7e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b4c70:	7902      	ldrb	r2, [r0, #4]
   b4c72:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b4c76:	b2d2      	uxtb	r2, r2
   b4c78:	4592      	cmp	sl, r2
   b4c7a:	bf28      	it	cs
   b4c7c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4c7e:	4299      	cmp	r1, r3
      n = 512*nb;
   b4c80:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4c84:	d208      	bcs.n	b4c98 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4c86:	68a0      	ldr	r0, [r4, #8]
   b4c88:	4653      	mov	r3, sl
   b4c8a:	6800      	ldr	r0, [r0, #0]
   b4c8c:	4642      	mov	r2, r8
   b4c8e:	f000 fda7 	bl	b57e0 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b4c92:	2800      	cmp	r0, #0
   b4c94:	d1e1      	bne.n	b4c5a <_ZN7FatFile4readEPvj+0x100>
   b4c96:	e7c6      	b.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4c98:	4453      	add	r3, sl
   b4c9a:	428b      	cmp	r3, r1
   b4c9c:	d9f3      	bls.n	b4c86 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b4c9e:	3024      	adds	r0, #36	; 0x24
   b4ca0:	9101      	str	r1, [sp, #4]
   b4ca2:	f000 fa49 	bl	b5138 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b4ca6:	9901      	ldr	r1, [sp, #4]
   b4ca8:	2800      	cmp	r0, #0
   b4caa:	d1ec      	bne.n	b4c86 <_ZN7FatFile4readEPvj+0x12c>
   b4cac:	e7bb      	b.n	b4c26 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b4cae:	1ba8      	subs	r0, r5, r6
}
   b4cb0:	b003      	add	sp, #12
   b4cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4cb6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b4cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b4cb8:	2201      	movs	r2, #1
   b4cba:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b4cbe:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b4cc2:	4604      	mov	r4, r0
   b4cc4:	f7ff ff49 	bl	b4b5a <_ZN7FatFile4readEPvj>
   b4cc8:	2801      	cmp	r0, #1
   b4cca:	bf0a      	itet	eq
   b4ccc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4cd0:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b4cd4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b4cd8:	b002      	add	sp, #8
   b4cda:	bd70      	pop	{r4, r5, r6, pc}

000b4cdc <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4cde:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b4ce0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4ce4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4ce6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b4cea:	d000      	beq.n	b4cee <_ZN7FatFile12readDirCacheEb+0x12>
   b4cec:	b999      	cbnz	r1, b4d16 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b4cee:	2201      	movs	r2, #1
   b4cf0:	f10d 0107 	add.w	r1, sp, #7
   b4cf4:	4620      	mov	r0, r4
   b4cf6:	f7ff ff30 	bl	b4b5a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b4cfa:	b240      	sxtb	r0, r0
   b4cfc:	2801      	cmp	r0, #1
   b4cfe:	d002      	beq.n	b4d06 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b4d00:	2000      	movs	r0, #0
}
   b4d02:	b003      	add	sp, #12
   b4d04:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b4d06:	6963      	ldr	r3, [r4, #20]
   b4d08:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b4d0a:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b4d0c:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b4d0e:	3030      	adds	r0, #48	; 0x30
   b4d10:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b4d14:	e7f5      	b.n	b4d02 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b4d16:	3320      	adds	r3, #32
   b4d18:	e7f7      	b.n	b4d0a <_ZN7FatFile12readDirCacheEb+0x2e>

000b4d1a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b4d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b4d1e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b4d20:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b4d22:	4604      	mov	r4, r0
   b4d24:	460d      	mov	r5, r1
  if (!isOpen()) {
   b4d26:	b162      	cbz	r2, b4d42 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b4d28:	6940      	ldr	r0, [r0, #20]
   b4d2a:	4288      	cmp	r0, r1
   b4d2c:	d002      	beq.n	b4d34 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b4d2e:	b919      	cbnz	r1, b4d38 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b4d30:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b4d32:	6165      	str	r5, [r4, #20]
    return true;
   b4d34:	2001      	movs	r0, #1
   b4d36:	e006      	b.n	b4d46 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b4d38:	0716      	lsls	r6, r2, #28
   b4d3a:	d506      	bpl.n	b4d4a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b4d3c:	69e3      	ldr	r3, [r4, #28]
   b4d3e:	428b      	cmp	r3, r1
   b4d40:	d20b      	bcs.n	b4d5a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b4d42:	6127      	str	r7, [r4, #16]
  return false;
   b4d44:	2000      	movs	r0, #0
}
   b4d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b4d4a:	0691      	lsls	r1, r2, #26
   b4d4c:	d505      	bpl.n	b4d5a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b4d4e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b4d50:	891b      	ldrh	r3, [r3, #8]
   b4d52:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b4d56:	d9ec      	bls.n	b4d32 <_ZN7FatFile7seekSetEm+0x18>
   b4d58:	e7f3      	b.n	b4d42 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4d5a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b4d5e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b4d62:	1e43      	subs	r3, r0, #1
   b4d64:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4d68:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4d6a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4d6c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b4d6e:	42b3      	cmp	r3, r6
   b4d70:	d800      	bhi.n	b4d74 <_ZN7FatFile7seekSetEm+0x5a>
   b4d72:	b998      	cbnz	r0, b4d9c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4d74:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b4d76:	bf4c      	ite	mi
   b4d78:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b4d7c:	6a23      	ldrpl	r3, [r4, #32]
   b4d7e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4d80:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b4d84:	2e00      	cmp	r6, #0
   b4d86:	d0d4      	beq.n	b4d32 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4d88:	6921      	ldr	r1, [r4, #16]
   b4d8a:	68a0      	ldr	r0, [r4, #8]
   b4d8c:	4642      	mov	r2, r8
   b4d8e:	f000 fa24 	bl	b51da <_ZN9FatVolume6fatGetEmPm>
   b4d92:	2800      	cmp	r0, #0
   b4d94:	f106 36ff 	add.w	r6, r6, #4294967295
   b4d98:	dcf4      	bgt.n	b4d84 <_ZN7FatFile7seekSetEm+0x6a>
   b4d9a:	e7d2      	b.n	b4d42 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b4d9c:	1af6      	subs	r6, r6, r3
   b4d9e:	e7ef      	b.n	b4d80 <_ZN7FatFile7seekSetEm+0x66>

000b4da0 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4da2:	460f      	mov	r7, r1
   b4da4:	4604      	mov	r4, r0
   b4da6:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b4da8:	2100      	movs	r1, #0
   b4daa:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b4dac:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b4dae:	f001 fe4f 	bl	b6a50 <memset>
  m_vol = dirFile->m_vol;
   b4db2:	68b8      	ldr	r0, [r7, #8]
   b4db4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b4db6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b4db8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b4dbc:	6a3b      	ldr	r3, [r7, #32]
   b4dbe:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b4dc0:	016a      	lsls	r2, r5, #5
   b4dc2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b4dc6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4dca:	071f      	lsls	r7, r3, #28
   b4dcc:	d444      	bmi.n	b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b4dce:	f003 0317 	and.w	r3, r3, #23
   b4dd2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b4dd4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b4dd8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b4ddc:	bf04      	itt	eq
   b4dde:	f043 0308 	orreq.w	r3, r3, #8
   b4de2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b4de4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b4de8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b4dea:	f006 0303 	and.w	r3, r6, #3
   b4dee:	2b01      	cmp	r3, #1
   b4df0:	d02c      	beq.n	b4e4c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b4df2:	2b02      	cmp	r3, #2
   b4df4:	d028      	beq.n	b4e48 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b4df6:	bb7b      	cbnz	r3, b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b4df8:	0571      	lsls	r1, r6, #21
   b4dfa:	d42d      	bmi.n	b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b4dfc:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b4dfe:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b4e00:	78a1      	ldrb	r1, [r4, #2]
   b4e02:	078b      	lsls	r3, r1, #30
   b4e04:	d504      	bpl.n	b4e10 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b4e06:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b4e08:	06df      	lsls	r7, r3, #27
   b4e0a:	d425      	bmi.n	b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b4e0c:	07dd      	lsls	r5, r3, #31
   b4e0e:	d423      	bmi.n	b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b4e10:	11b3      	asrs	r3, r6, #6
   b4e12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b4e16:	f006 0508 	and.w	r5, r6, #8
   b4e1a:	432b      	orrs	r3, r5
   b4e1c:	430b      	orrs	r3, r1
   b4e1e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b4e20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b4e22:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4e24:	1883      	adds	r3, r0, r2
   b4e26:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b4e2a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4e2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b4e32:	0572      	lsls	r2, r6, #21
   b4e34:	d513      	bpl.n	b4e5e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4e36:	b959      	cbnz	r1, b4e50 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b4e38:	78a3      	ldrb	r3, [r4, #2]
   b4e3a:	f043 0304 	orr.w	r3, r3, #4
   b4e3e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4e40:	0473      	lsls	r3, r6, #17
   b4e42:	d410      	bmi.n	b4e66 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b4e44:	2001      	movs	r0, #1
}
   b4e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b4e48:	2303      	movs	r3, #3
   b4e4a:	e7d8      	b.n	b4dfe <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b4e4c:	2302      	movs	r3, #2
   b4e4e:	e7d6      	b.n	b4dfe <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4e50:	f000 fa63 	bl	b531a <_ZN9FatVolume9freeChainEm>
   b4e54:	2800      	cmp	r0, #0
   b4e56:	d1ef      	bne.n	b4e38 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b4e58:	2000      	movs	r0, #0
   b4e5a:	7020      	strb	r0, [r4, #0]
  return false;
   b4e5c:	e7f3      	b.n	b4e46 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b4e5e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b4e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e62:	61e3      	str	r3, [r4, #28]
   b4e64:	e7ec      	b.n	b4e40 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4e66:	69e1      	ldr	r1, [r4, #28]
   b4e68:	4620      	mov	r0, r4
   b4e6a:	f7ff ff56 	bl	b4d1a <_ZN7FatFile7seekSetEm>
   b4e6e:	2800      	cmp	r0, #0
   b4e70:	d1e8      	bne.n	b4e44 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b4e72:	e7f1      	b.n	b4e58 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b4e74 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b4e74:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b4e76:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b4e78:	4604      	mov	r4, r0
  if (!isOpen()) {
   b4e7a:	b90b      	cbnz	r3, b4e80 <_ZN7FatFile4syncEv+0xc>
    return true;
   b4e7c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b4e7e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b4e80:	7883      	ldrb	r3, [r0, #2]
   b4e82:	075a      	lsls	r2, r3, #29
   b4e84:	d523      	bpl.n	b4ece <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b4e86:	2101      	movs	r1, #1
   b4e88:	f7ff fe52 	bl	b4b30 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4e8c:	4605      	mov	r5, r0
   b4e8e:	b928      	cbnz	r0, b4e9c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b4e90:	7863      	ldrb	r3, [r4, #1]
   b4e92:	f043 0301 	orr.w	r3, r3, #1
   b4e96:	7063      	strb	r3, [r4, #1]
  return false;
   b4e98:	2000      	movs	r0, #0
   b4e9a:	e7f0      	b.n	b4e7e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4e9c:	7803      	ldrb	r3, [r0, #0]
   b4e9e:	2be5      	cmp	r3, #229	; 0xe5
   b4ea0:	d0f6      	beq.n	b4e90 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b4ea2:	7823      	ldrb	r3, [r4, #0]
   b4ea4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b4ea6:	bf44      	itt	mi
   b4ea8:	69e3      	ldrmi	r3, [r4, #28]
   b4eaa:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b4eac:	6a23      	ldr	r3, [r4, #32]
   b4eae:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b4eb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4eb2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b4eb4:	4b09      	ldr	r3, [pc, #36]	; (b4edc <_ZN7FatFile4syncEv+0x68>)
   b4eb6:	681b      	ldr	r3, [r3, #0]
   b4eb8:	b12b      	cbz	r3, b4ec6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b4eba:	f100 0116 	add.w	r1, r0, #22
   b4ebe:	3018      	adds	r0, #24
   b4ec0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b4ec2:	8b2b      	ldrh	r3, [r5, #24]
   b4ec4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b4ec6:	78a3      	ldrb	r3, [r4, #2]
   b4ec8:	f023 0304 	bic.w	r3, r3, #4
   b4ecc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b4ece:	68a0      	ldr	r0, [r4, #8]
   b4ed0:	f7ff faca 	bl	b4468 <_ZN9FatVolume9cacheSyncEv>
   b4ed4:	2800      	cmp	r0, #0
   b4ed6:	d0db      	beq.n	b4e90 <_ZN7FatFile4syncEv+0x1c>
   b4ed8:	e7d0      	b.n	b4e7c <_ZN7FatFile4syncEv+0x8>
   b4eda:	bf00      	nop
   b4edc:	2003e68c 	.word	0x2003e68c

000b4ee0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b4ee0:	b510      	push	{r4, lr}
   b4ee2:	4604      	mov	r4, r0
  bool rtn = sync();
   b4ee4:	f7ff ffc6 	bl	b4e74 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b4ee8:	2300      	movs	r3, #0
   b4eea:	7023      	strb	r3, [r4, #0]
}
   b4eec:	bd10      	pop	{r4, pc}

000b4eee <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4eee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ef0:	b093      	sub	sp, #76	; 0x4c
   b4ef2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4ef4:	2300      	movs	r3, #0
   b4ef6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b4ef8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4efa:	9201      	str	r2, [sp, #4]
   b4efc:	4606      	mov	r6, r0
   b4efe:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b4f00:	b113      	cbz	r3, b4f08 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b4f02:	2000      	movs	r0, #0
}
   b4f04:	b013      	add	sp, #76	; 0x4c
   b4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b4f08:	780b      	ldrb	r3, [r1, #0]
   b4f0a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4f0e:	d0f8      	beq.n	b4f02 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b4f10:	7813      	ldrb	r3, [r2, #0]
   b4f12:	2b2f      	cmp	r3, #47	; 0x2f
   b4f14:	d112      	bne.n	b4f3c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b4f16:	9a01      	ldr	r2, [sp, #4]
   b4f18:	7813      	ldrb	r3, [r2, #0]
   b4f1a:	2b2f      	cmp	r3, #47	; 0x2f
   b4f1c:	d102      	bne.n	b4f24 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b4f1e:	3201      	adds	r2, #1
   b4f20:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b4f22:	e7f8      	b.n	b4f16 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b4f24:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b4f26:	b91b      	cbnz	r3, b4f30 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b4f28:	4630      	mov	r0, r6
   b4f2a:	f7ff fe10 	bl	b4b4e <_ZN7FatFile8openRootEP9FatVolume>
   b4f2e:	e7e9      	b.n	b4f04 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b4f30:	a809      	add	r0, sp, #36	; 0x24
   b4f32:	f7ff fd9f 	bl	b4a74 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b4f36:	2800      	cmp	r0, #0
   b4f38:	d0e3      	beq.n	b4f02 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b4f3a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b4f3c:	9801      	ldr	r0, [sp, #4]
   b4f3e:	aa01      	add	r2, sp, #4
   b4f40:	a903      	add	r1, sp, #12
   b4f42:	f7ff faad 	bl	b44a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b4f46:	2800      	cmp	r0, #0
   b4f48:	d0db      	beq.n	b4f02 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b4f4a:	9b01      	ldr	r3, [sp, #4]
   b4f4c:	781b      	ldrb	r3, [r3, #0]
   b4f4e:	b19b      	cbz	r3, b4f78 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b4f50:	2300      	movs	r3, #0
   b4f52:	aa03      	add	r2, sp, #12
   b4f54:	4621      	mov	r1, r4
   b4f56:	4630      	mov	r0, r6
   b4f58:	f7ff fbd4 	bl	b4704 <_ZN7FatFile4openEPS_P7fname_ti>
   b4f5c:	2800      	cmp	r0, #0
   b4f5e:	d0d0      	beq.n	b4f02 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b4f60:	4635      	mov	r5, r6
   b4f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f64:	ac09      	add	r4, sp, #36	; 0x24
   b4f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f6c:	682b      	ldr	r3, [r5, #0]
   b4f6e:	6023      	str	r3, [r4, #0]
    close();
   b4f70:	4630      	mov	r0, r6
   b4f72:	f7ff ffb5 	bl	b4ee0 <_ZN7FatFile5closeEv>
  while (1) {
   b4f76:	e7e0      	b.n	b4f3a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b4f78:	463b      	mov	r3, r7
   b4f7a:	aa03      	add	r2, sp, #12
   b4f7c:	4621      	mov	r1, r4
   b4f7e:	4630      	mov	r0, r6
   b4f80:	f7ff fbc0 	bl	b4704 <_ZN7FatFile4openEPS_P7fname_ti>
   b4f84:	e7be      	b.n	b4f04 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b4f88 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b4f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4f8c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b4f8e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4f90:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b4f92:	4604      	mov	r4, r0
   b4f94:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4f96:	d55b      	bpl.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
   b4f98:	7883      	ldrb	r3, [r0, #2]
   b4f9a:	079a      	lsls	r2, r3, #30
   b4f9c:	d558      	bpl.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b4f9e:	071b      	lsls	r3, r3, #28
   b4fa0:	d451      	bmi.n	b5046 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b4fa2:	6963      	ldr	r3, [r4, #20]
   b4fa4:	43db      	mvns	r3, r3
   b4fa6:	42bb      	cmp	r3, r7
   b4fa8:	d352      	bcc.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
   b4faa:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4fac:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4fb0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b4fb2:	f1b8 0f00 	cmp.w	r8, #0
   b4fb6:	f000 8091 	beq.w	b50dc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4fba:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b4fbc:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b4fbe:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b4fc2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b4fc6:	d10e      	bne.n	b4fe6 <_ZN7FatFile5writeEPKvj+0x5e>
   b4fc8:	b96d      	cbnz	r5, b4fe6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b4fca:	6921      	ldr	r1, [r4, #16]
   b4fcc:	2900      	cmp	r1, #0
   b4fce:	d046      	beq.n	b505e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4fd0:	4652      	mov	r2, sl
   b4fd2:	f000 f902 	bl	b51da <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	db3a      	blt.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b4fda:	d104      	bne.n	b4fe6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b4fdc:	4620      	mov	r0, r4
   b4fde:	f7ff fd5f 	bl	b4aa0 <_ZN7FatFile10addClusterEv>
   b4fe2:	2800      	cmp	r0, #0
   b4fe4:	d034      	beq.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4fe6:	6921      	ldr	r1, [r4, #16]
   b4fe8:	68a0      	ldr	r0, [r4, #8]
   b4fea:	f000 f8f0 	bl	b51ce <_ZNK9FatVolume17clusterFirstBlockEm>
   b4fee:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b4ff0:	68a0      	ldr	r0, [r4, #8]
   b4ff2:	b915      	cbnz	r5, b4ffa <_ZN7FatFile5writeEPKvj+0x72>
   b4ff4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b4ff8:	d23f      	bcs.n	b507a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b4ffa:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b4ffe:	4546      	cmp	r6, r8
   b5000:	bf28      	it	cs
   b5002:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5004:	2d00      	cmp	r5, #0
   b5006:	d136      	bne.n	b5076 <_ZN7FatFile5writeEPKvj+0xee>
   b5008:	6962      	ldr	r2, [r4, #20]
   b500a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b500c:	429a      	cmp	r2, r3
   b500e:	bf34      	ite	cc
   b5010:	2201      	movcc	r2, #1
   b5012:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5014:	3024      	adds	r0, #36	; 0x24
   b5016:	f000 f8b7 	bl	b5188 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b501a:	b1c8      	cbz	r0, b5050 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b501c:	4428      	add	r0, r5
   b501e:	4632      	mov	r2, r6
   b5020:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5022:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5024:	f001 fd06 	bl	b6a34 <memcpy>
      if (512 == (n + blockOffset)) {
   b5028:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b502c:	d104      	bne.n	b5038 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b502e:	68a0      	ldr	r0, [r4, #8]
   b5030:	3024      	adds	r0, #36	; 0x24
   b5032:	f000 f881 	bl	b5138 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5036:	b158      	cbz	r0, b5050 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5038:	6963      	ldr	r3, [r4, #20]
   b503a:	4433      	add	r3, r6
   b503c:	6163      	str	r3, [r4, #20]
    src += n;
   b503e:	44b1      	add	r9, r6
    nToWrite -= n;
   b5040:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5044:	e7b4      	b.n	b4fb0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5046:	69c1      	ldr	r1, [r0, #28]
   b5048:	f7ff fe67 	bl	b4d1a <_ZN7FatFile7seekSetEm>
   b504c:	2800      	cmp	r0, #0
   b504e:	d1a8      	bne.n	b4fa2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5050:	7863      	ldrb	r3, [r4, #1]
   b5052:	f043 0301 	orr.w	r3, r3, #1
   b5056:	7063      	strb	r3, [r4, #1]
  return -1;
   b5058:	f04f 30ff 	mov.w	r0, #4294967295
   b505c:	e050      	b.n	b5100 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b505e:	6a23      	ldr	r3, [r4, #32]
   b5060:	b93b      	cbnz	r3, b5072 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5062:	4620      	mov	r0, r4
   b5064:	f7ff fd1c 	bl	b4aa0 <_ZN7FatFile10addClusterEv>
   b5068:	2800      	cmp	r0, #0
   b506a:	d0f1      	beq.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b506c:	6923      	ldr	r3, [r4, #16]
   b506e:	6223      	str	r3, [r4, #32]
   b5070:	e7b9      	b.n	b4fe6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5072:	6123      	str	r3, [r4, #16]
   b5074:	e7b7      	b.n	b4fe6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5076:	2201      	movs	r2, #1
   b5078:	e7cc      	b.n	b5014 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b507a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b507e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5080:	d31b      	bcc.n	b50ba <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5082:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5086:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b508a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b508c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5090:	4573      	cmp	r3, lr
   b5092:	bf28      	it	cs
   b5094:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5096:	4291      	cmp	r1, r2
      n = 512*nb;
   b5098:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b509c:	d307      	bcc.n	b50ae <_ZN7FatFile5writeEPKvj+0x126>
   b509e:	441a      	add	r2, r3
   b50a0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b50a2:	bf82      	ittt	hi
   b50a4:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b50a8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b50ac:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b50ae:	68a5      	ldr	r5, [r4, #8]
   b50b0:	464a      	mov	r2, r9
   b50b2:	6828      	ldr	r0, [r5, #0]
   b50b4:	f000 fc4b 	bl	b594e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b50b8:	e7bd      	b.n	b5036 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b50ba:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b50bc:	bf02      	ittt	eq
   b50be:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b50c2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b50c6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b50c8:	68a3      	ldr	r3, [r4, #8]
   b50ca:	464a      	mov	r2, r9
   b50cc:	6818      	ldr	r0, [r3, #0]
   b50ce:	f000 fbc8 	bl	b5862 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b50d2:	2800      	cmp	r0, #0
   b50d4:	d0bc      	beq.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b50d6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b50da:	e7ad      	b.n	b5038 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b50dc:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b50de:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b50e0:	42b2      	cmp	r2, r6
   b50e2:	d204      	bcs.n	b50ee <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b50e4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b50e6:	f043 0304 	orr.w	r3, r3, #4
   b50ea:	70a3      	strb	r3, [r4, #2]
   b50ec:	e003      	b.n	b50f6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b50ee:	4a08      	ldr	r2, [pc, #32]	; (b5110 <_ZN7FatFile5writeEPKvj+0x188>)
   b50f0:	6812      	ldr	r2, [r2, #0]
   b50f2:	2a00      	cmp	r2, #0
   b50f4:	d1f7      	bne.n	b50e6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b50f6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b50fa:	2b00      	cmp	r3, #0
   b50fc:	db02      	blt.n	b5104 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b50fe:	4638      	mov	r0, r7
}
   b5100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5104:	4620      	mov	r0, r4
   b5106:	f7ff feb5 	bl	b4e74 <_ZN7FatFile4syncEv>
   b510a:	2800      	cmp	r0, #0
   b510c:	d1f7      	bne.n	b50fe <_ZN7FatFile5writeEPKvj+0x176>
   b510e:	e79f      	b.n	b5050 <_ZN7FatFile5writeEPKvj+0xc8>
   b5110:	2003e68c 	.word	0x2003e68c

000b5114 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5114:	b513      	push	{r0, r1, r4, lr}
   b5116:	4604      	mov	r4, r0
    }
   b5118:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b511a:	b159      	cbz	r1, b5134 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b511c:	9101      	str	r1, [sp, #4]
   b511e:	f001 fccd 	bl	b6abc <strlen>
   b5122:	6823      	ldr	r3, [r4, #0]
   b5124:	9901      	ldr	r1, [sp, #4]
   b5126:	68db      	ldr	r3, [r3, #12]
   b5128:	4602      	mov	r2, r0
   b512a:	4620      	mov	r0, r4
    }
   b512c:	b002      	add	sp, #8
   b512e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5132:	4718      	bx	r3
    }
   b5134:	b002      	add	sp, #8
   b5136:	bd10      	pop	{r4, pc}

000b5138 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5138:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b513a:	7803      	ldrb	r3, [r0, #0]
   b513c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b513e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b5140:	d520      	bpl.n	b5184 <_ZN8FatCache4syncEv+0x4c>
   b5142:	6843      	ldr	r3, [r0, #4]
   b5144:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5146:	f100 020c 	add.w	r2, r0, #12
   b514a:	6818      	ldr	r0, [r3, #0]
   b514c:	9201      	str	r2, [sp, #4]
   b514e:	f000 fb88 	bl	b5862 <_ZN9SdSpiCard10writeBlockEmPKh>
   b5152:	9a01      	ldr	r2, [sp, #4]
   b5154:	4605      	mov	r5, r0
   b5156:	b918      	cbnz	r0, b5160 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5158:	2500      	movs	r5, #0
}
   b515a:	4628      	mov	r0, r5
   b515c:	b003      	add	sp, #12
   b515e:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b5160:	7823      	ldrb	r3, [r4, #0]
   b5162:	079b      	lsls	r3, r3, #30
   b5164:	d404      	bmi.n	b5170 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5166:	7823      	ldrb	r3, [r4, #0]
   b5168:	f023 0301 	bic.w	r3, r3, #1
   b516c:	7023      	strb	r3, [r4, #0]
   b516e:	e7f4      	b.n	b515a <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5170:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5174:	6919      	ldr	r1, [r3, #16]
   b5176:	4401      	add	r1, r0
   b5178:	6818      	ldr	r0, [r3, #0]
   b517a:	f000 fb72 	bl	b5862 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b517e:	2800      	cmp	r0, #0
   b5180:	d1f1      	bne.n	b5166 <_ZN8FatCache4syncEv+0x2e>
   b5182:	e7e9      	b.n	b5158 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5184:	2501      	movs	r5, #1
   b5186:	e7e8      	b.n	b515a <_ZN8FatCache4syncEv+0x22>

000b5188 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5188:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b518a:	6883      	ldr	r3, [r0, #8]
   b518c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b518e:	4604      	mov	r4, r0
   b5190:	460e      	mov	r6, r1
   b5192:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5194:	d009      	beq.n	b51aa <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5196:	f7ff ffcf 	bl	b5138 <_ZN8FatCache4syncEv>
   b519a:	b908      	cbnz	r0, b51a0 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b519c:	2000      	movs	r0, #0
}
   b519e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b51a0:	076b      	lsls	r3, r5, #29
   b51a2:	d50a      	bpl.n	b51ba <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b51a4:	2300      	movs	r3, #0
   b51a6:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b51a8:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b51aa:	7822      	ldrb	r2, [r4, #0]
   b51ac:	f005 0503 	and.w	r5, r5, #3
   b51b0:	4620      	mov	r0, r4
   b51b2:	4315      	orrs	r5, r2
   b51b4:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b51b8:	e7f1      	b.n	b519e <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b51ba:	6863      	ldr	r3, [r4, #4]
   b51bc:	f104 020c 	add.w	r2, r4, #12
   b51c0:	6818      	ldr	r0, [r3, #0]
   b51c2:	4631      	mov	r1, r6
   b51c4:	f000 fac4 	bl	b5750 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b51c8:	2800      	cmp	r0, #0
   b51ca:	d1eb      	bne.n	b51a4 <_ZN8FatCache4readEmh+0x1c>
   b51cc:	e7e6      	b.n	b519c <_ZN8FatCache4readEmh+0x14>

000b51ce <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b51ce:	7983      	ldrb	r3, [r0, #6]
   b51d0:	6940      	ldr	r0, [r0, #20]
   b51d2:	3902      	subs	r1, #2
   b51d4:	4099      	lsls	r1, r3
}
   b51d6:	4408      	add	r0, r1
   b51d8:	4770      	bx	lr

000b51da <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b51da:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b51dc:	b570      	push	{r4, r5, r6, lr}
   b51de:	4605      	mov	r5, r0
   b51e0:	460c      	mov	r4, r1
   b51e2:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b51e4:	d802      	bhi.n	b51ec <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b51e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   b51ea:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b51ec:	69c3      	ldr	r3, [r0, #28]
   b51ee:	428b      	cmp	r3, r1
   b51f0:	d3f9      	bcc.n	b51e6 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b51f2:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b51f4:	2b20      	cmp	r3, #32
   b51f6:	d116      	bne.n	b5226 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b51f8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b51fa:	2202      	movs	r2, #2
   b51fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5200:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5204:	f7ff ffc0 	bl	b5188 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5208:	2800      	cmp	r0, #0
   b520a:	d0ec      	beq.n	b51e6 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b520c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5210:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5214:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5218:	69ea      	ldr	r2, [r5, #28]
   b521a:	429a      	cmp	r2, r3
  *value = next;
   b521c:	bf26      	itte	cs
   b521e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b5220:	2001      	movcs	r0, #1
    return 0;
   b5222:	2000      	movcc	r0, #0
   b5224:	e7e1      	b.n	b51ea <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5226:	2b10      	cmp	r3, #16
   b5228:	d1dd      	bne.n	b51e6 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b522a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b522e:	6981      	ldr	r1, [r0, #24]
   b5230:	2202      	movs	r2, #2
   b5232:	4419      	add	r1, r3
   b5234:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5238:	f7ff ffa6 	bl	b5188 <_ZN8FatCache4readEmh>
    if (!pc) {
   b523c:	2800      	cmp	r0, #0
   b523e:	d0d2      	beq.n	b51e6 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b5240:	b2e4      	uxtb	r4, r4
   b5242:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5246:	e7e7      	b.n	b5218 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5248 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5248:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b524a:	b538      	push	{r3, r4, r5, lr}
   b524c:	460c      	mov	r4, r1
   b524e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5250:	d801      	bhi.n	b5256 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b5252:	2000      	movs	r0, #0
}
   b5254:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5256:	69c3      	ldr	r3, [r0, #28]
   b5258:	428b      	cmp	r3, r1
   b525a:	d3fa      	bcc.n	b5252 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b525c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b525e:	2b20      	cmp	r3, #32
   b5260:	d10f      	bne.n	b5282 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b5262:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5264:	2203      	movs	r2, #3
   b5266:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b526a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b526e:	f7ff ff8b 	bl	b5188 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5272:	2800      	cmp	r0, #0
   b5274:	d0ed      	beq.n	b5252 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5276:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b527a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b527e:	2001      	movs	r0, #1
   b5280:	e7e8      	b.n	b5254 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b5282:	2b10      	cmp	r3, #16
   b5284:	d1e5      	bne.n	b5252 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5286:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b528a:	6981      	ldr	r1, [r0, #24]
   b528c:	2203      	movs	r2, #3
   b528e:	4419      	add	r1, r3
   b5290:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5294:	f7ff ff78 	bl	b5188 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5298:	2800      	cmp	r0, #0
   b529a:	d0da      	beq.n	b5252 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b529c:	b2e4      	uxtb	r4, r4
   b529e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b52a2:	e7ec      	b.n	b527e <_ZN9FatVolume6fatPutEmm+0x36>

000b52a4 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b52a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b52a8:	68c4      	ldr	r4, [r0, #12]
   b52aa:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b52ac:	4605      	mov	r5, r0
   b52ae:	460e      	mov	r6, r1
   b52b0:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b52b2:	d301      	bcc.n	b52b8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b52b4:	2701      	movs	r7, #1
   b52b6:	e001      	b.n	b52bc <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b52b8:	460c      	mov	r4, r1
    setStart = false;
   b52ba:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b52bc:	69eb      	ldr	r3, [r5, #28]
    find++;
   b52be:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b52c0:	42a3      	cmp	r3, r4
   b52c2:	d202      	bcs.n	b52ca <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b52c4:	b9c7      	cbnz	r7, b52f8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b52c6:	68ec      	ldr	r4, [r5, #12]
   b52c8:	e7f4      	b.n	b52b4 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b52ca:	42a6      	cmp	r6, r4
   b52cc:	d014      	beq.n	b52f8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b52ce:	aa01      	add	r2, sp, #4
   b52d0:	4621      	mov	r1, r4
   b52d2:	4628      	mov	r0, r5
   b52d4:	f7ff ff81 	bl	b51da <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b52d8:	2800      	cmp	r0, #0
   b52da:	db0d      	blt.n	b52f8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b52dc:	d0ee      	beq.n	b52bc <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b52de:	9b01      	ldr	r3, [sp, #4]
   b52e0:	2b00      	cmp	r3, #0
   b52e2:	d1eb      	bne.n	b52bc <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b52e4:	b107      	cbz	r7, b52e8 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b52e6:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b52e8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b52ec:	4621      	mov	r1, r4
   b52ee:	4628      	mov	r0, r5
   b52f0:	f7ff ffaa 	bl	b5248 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b52f4:	4607      	mov	r7, r0
   b52f6:	b920      	cbnz	r0, b5302 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b52f8:	2700      	movs	r7, #0
}
   b52fa:	4638      	mov	r0, r7
   b52fc:	b002      	add	sp, #8
   b52fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b5302:	b916      	cbnz	r6, b530a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5304:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5308:	e7f7      	b.n	b52fa <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b530a:	4622      	mov	r2, r4
   b530c:	4631      	mov	r1, r6
   b530e:	4628      	mov	r0, r5
   b5310:	f7ff ff9a 	bl	b5248 <_ZN9FatVolume6fatPutEmm>
   b5314:	2800      	cmp	r0, #0
   b5316:	d1f5      	bne.n	b5304 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5318:	e7ee      	b.n	b52f8 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b531a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b531a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b531c:	4605      	mov	r5, r0
   b531e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b5320:	aa01      	add	r2, sp, #4
   b5322:	4621      	mov	r1, r4
   b5324:	4628      	mov	r0, r5
   b5326:	f7ff ff58 	bl	b51da <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b532a:	1e06      	subs	r6, r0, #0
   b532c:	db10      	blt.n	b5350 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b532e:	2200      	movs	r2, #0
   b5330:	4621      	mov	r1, r4
   b5332:	4628      	mov	r0, r5
   b5334:	f7ff ff88 	bl	b5248 <_ZN9FatVolume6fatPutEmm>
   b5338:	b150      	cbz	r0, b5350 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b533a:	68eb      	ldr	r3, [r5, #12]
   b533c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b533e:	bf24      	itt	cs
   b5340:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b5344:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5346:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5348:	2e00      	cmp	r6, #0
   b534a:	d1e9      	bne.n	b5320 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b534c:	b002      	add	sp, #8
   b534e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5350:	2000      	movs	r0, #0
   b5352:	e7fb      	b.n	b534c <_ZN9FatVolume9freeChainEm+0x32>

000b5354 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5354:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5356:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5358:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b535a:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b535c:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b5360:	4604      	mov	r4, r0
  m_fatType = 0;
   b5362:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5364:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5368:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b536a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b536e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b5370:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5374:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5378:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b537c:	460d      	mov	r5, r1
   b537e:	b1b9      	cbz	r1, b53b0 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b5380:	2904      	cmp	r1, #4
   b5382:	d901      	bls.n	b5388 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5384:	2000      	movs	r0, #0
}
   b5386:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5388:	4611      	mov	r1, r2
   b538a:	4630      	mov	r0, r6
   b538c:	f7ff fefc 	bl	b5188 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5390:	2800      	cmp	r0, #0
   b5392:	d0f7      	beq.n	b5384 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b5394:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5398:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b539c:	065b      	lsls	r3, r3, #25
   b539e:	d1f1      	bne.n	b5384 <_ZN9FatVolume4initEh+0x30>
   b53a0:	f105 011b 	add.w	r1, r5, #27
   b53a4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b53a8:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b53ac:	2d00      	cmp	r5, #0
   b53ae:	d0e9      	beq.n	b5384 <_ZN9FatVolume4initEh+0x30>
   b53b0:	2200      	movs	r2, #0
   b53b2:	4629      	mov	r1, r5
   b53b4:	4630      	mov	r0, r6
   b53b6:	f7ff fee7 	bl	b5188 <_ZN8FatCache4readEmh>
  if (!pc) {
   b53ba:	2800      	cmp	r0, #0
   b53bc:	d0e2      	beq.n	b5384 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b53be:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b53c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b53c6:	d1dd      	bne.n	b5384 <_ZN9FatVolume4initEh+0x30>
   b53c8:	7c03      	ldrb	r3, [r0, #16]
   b53ca:	2b02      	cmp	r3, #2
   b53cc:	d1da      	bne.n	b5384 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b53ce:	89c3      	ldrh	r3, [r0, #14]
   b53d0:	2b00      	cmp	r3, #0
   b53d2:	d0d7      	beq.n	b5384 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b53d4:	7b41      	ldrb	r1, [r0, #13]
   b53d6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b53d8:	1e4b      	subs	r3, r1, #1
   b53da:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b53dc:	2300      	movs	r3, #0
   b53de:	71a3      	strb	r3, [r4, #6]
   b53e0:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b53e2:	2301      	movs	r3, #1
   b53e4:	4299      	cmp	r1, r3
   b53e6:	d007      	beq.n	b53f8 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b53e8:	3e01      	subs	r6, #1
   b53ea:	d0cb      	beq.n	b5384 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b53ec:	79a2      	ldrb	r2, [r4, #6]
   b53ee:	005b      	lsls	r3, r3, #1
   b53f0:	3201      	adds	r2, #1
   b53f2:	b2db      	uxtb	r3, r3
   b53f4:	71a2      	strb	r2, [r4, #6]
   b53f6:	e7f5      	b.n	b53e4 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b53f8:	8ac1      	ldrh	r1, [r0, #22]
   b53fa:	b901      	cbnz	r1, b53fe <_ZN9FatVolume4initEh+0xaa>
   b53fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b53fe:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b5400:	89c3      	ldrh	r3, [r0, #14]
   b5402:	442b      	add	r3, r5
   b5404:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5406:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b540a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b540c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b5410:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b5412:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5416:	0149      	lsls	r1, r1, #5
   b5418:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b541c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b5420:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b5422:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5426:	b902      	cbnz	r2, b542a <_ZN9FatVolume4initEh+0xd6>
   b5428:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b542a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b542c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b542e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b5430:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b5432:	1c4b      	adds	r3, r1, #1
   b5434:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b5436:	f640 73f4 	movw	r3, #4084	; 0xff4
   b543a:	4299      	cmp	r1, r3
   b543c:	d802      	bhi.n	b5444 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b543e:	230c      	movs	r3, #12
   b5440:	71e3      	strb	r3, [r4, #7]
   b5442:	e79f      	b.n	b5384 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b5444:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b5448:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b544a:	bf85      	ittet	hi
   b544c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b544e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b5450:	2310      	movls	r3, #16
    m_fatType = 32;
   b5452:	2320      	movhi	r3, #32
   b5454:	71e3      	strb	r3, [r4, #7]
  return true;
   b5456:	2001      	movs	r0, #1
   b5458:	e795      	b.n	b5386 <_ZN9FatVolume4initEh+0x32>

000b545a <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b545a:	f000 bacb 	b.w	b59f4 <_ZN14SdSpiAltDriver4sendEh>

000b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b545e:	f000 baae 	b.w	b59be <_ZN14SdSpiAltDriver7receiveEv>
	...

000b5464 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5464:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5466:	4e0e      	ldr	r6, [pc, #56]	; (b54a0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5468:	460d      	mov	r5, r1
   b546a:	4614      	mov	r4, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b546c:	f000 fb0a 	bl	b5a84 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5470:	6833      	ldr	r3, [r6, #0]
   b5472:	1ac0      	subs	r0, r0, r3
   b5474:	4b0b      	ldr	r3, [pc, #44]	; (b54a4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b5476:	4298      	cmp	r0, r3
   b5478:	d908      	bls.n	b548c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b547a:	f000 fb0b 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b547e:	4b0a      	ldr	r3, [pc, #40]	; (b54a8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b5480:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b5482:	f000 fcab 	bl	b5ddc <spark_process>
   b5486:	f000 fafd 	bl	b5a84 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b548a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b548c:	f000 fb02 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b5490:	b280      	uxth	r0, r0
   b5492:	1b40      	subs	r0, r0, r5
}
   b5494:	42a0      	cmp	r0, r4
   b5496:	bfd4      	ite	le
   b5498:	2000      	movle	r0, #0
   b549a:	2001      	movgt	r0, #1
   b549c:	bd70      	pop	{r4, r5, r6, pc}
   b549e:	bf00      	nop
   b54a0:	2003e694 	.word	0x2003e694
   b54a4:	000186a0 	.word	0x000186a0
   b54a8:	2003e740 	.word	0x2003e740

000b54ac <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b54ac:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b54ae:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b54b0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b54b2:	b94d      	cbnz	r5, b54c8 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b54b4:	6840      	ldr	r0, [r0, #4]
   b54b6:	f000 fa6b 	bl	b5990 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b54ba:	6863      	ldr	r3, [r4, #4]
   b54bc:	4629      	mov	r1, r5
   b54be:	7d18      	ldrb	r0, [r3, #20]
   b54c0:	f001 fa07 	bl	b68d2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b54c4:	2301      	movs	r3, #1
   b54c6:	7223      	strb	r3, [r4, #8]
  }
}
   b54c8:	bd38      	pop	{r3, r4, r5, pc}

000b54ca <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b54ca:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b54cc:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b54ce:	4604      	mov	r4, r0
  if (m_spiActive) {
   b54d0:	b16b      	cbz	r3, b54ee <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b54d2:	6843      	ldr	r3, [r0, #4]
   b54d4:	2101      	movs	r1, #1
   b54d6:	7d18      	ldrb	r0, [r3, #20]
   b54d8:	f001 f9fb 	bl	b68d2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b54dc:	6860      	ldr	r0, [r4, #4]
   b54de:	21ff      	movs	r1, #255	; 0xff
   b54e0:	f7ff ffbb 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b54e4:	6860      	ldr	r0, [r4, #4]
   b54e6:	f000 fa67 	bl	b59b8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b54ea:	2300      	movs	r3, #0
   b54ec:	7223      	strb	r3, [r4, #8]
  }
}
   b54ee:	bd10      	pop	{r4, pc}

000b54f0 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b54f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54f2:	4604      	mov	r4, r0
   b54f4:	460d      	mov	r5, r1
   b54f6:	4616      	mov	r6, r2
   b54f8:	f000 facc 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b54fc:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b54fe:	6860      	ldr	r0, [r4, #4]
   b5500:	f7ff ffad 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5504:	28ff      	cmp	r0, #255	; 0xff
   b5506:	7260      	strb	r0, [r4, #9]
   b5508:	d10e      	bne.n	b5528 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b550a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b550e:	4639      	mov	r1, r7
   b5510:	4620      	mov	r0, r4
   b5512:	f7ff ffa7 	bl	b5464 <_ZN9SdSpiCard10isTimedOutEtt>
   b5516:	2800      	cmp	r0, #0
   b5518:	d0f1      	beq.n	b54fe <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b551a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b551c:	4620      	mov	r0, r4
   b551e:	7023      	strb	r3, [r4, #0]
   b5520:	f7ff ffd3 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5524:	2000      	movs	r0, #0
}
   b5526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b5528:	28fe      	cmp	r0, #254	; 0xfe
   b552a:	d001      	beq.n	b5530 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b552c:	2350      	movs	r3, #80	; 0x50
   b552e:	e7f5      	b.n	b551c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b5530:	6860      	ldr	r0, [r4, #4]
   b5532:	4632      	mov	r2, r6
   b5534:	4629      	mov	r1, r5
   b5536:	f000 fa47 	bl	b59c8 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b553a:	7260      	strb	r0, [r4, #9]
   b553c:	b108      	cbz	r0, b5542 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b553e:	2360      	movs	r3, #96	; 0x60
   b5540:	e7ec      	b.n	b551c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b5542:	6860      	ldr	r0, [r4, #4]
   b5544:	f7ff ff8b 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b5548:	6860      	ldr	r0, [r4, #4]
   b554a:	f7ff ff88 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b554e:	2001      	movs	r0, #1
   b5550:	e7e9      	b.n	b5526 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b5552 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b5552:	b570      	push	{r4, r5, r6, lr}
   b5554:	4604      	mov	r4, r0
   b5556:	460e      	mov	r6, r1
   b5558:	f000 fa9c 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
   b555c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b555e:	4632      	mov	r2, r6
   b5560:	4629      	mov	r1, r5
   b5562:	4620      	mov	r0, r4
   b5564:	f7ff ff7e 	bl	b5464 <_ZN9SdSpiCard10isTimedOutEtt>
   b5568:	b930      	cbnz	r0, b5578 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b556a:	6860      	ldr	r0, [r4, #4]
   b556c:	f7ff ff77 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5570:	28ff      	cmp	r0, #255	; 0xff
   b5572:	d1f4      	bne.n	b555e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b5574:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b5576:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5578:	2000      	movs	r0, #0
   b557a:	e7fc      	b.n	b5576 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b557c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b557c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b557e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5580:	9201      	str	r2, [sp, #4]
   b5582:	4604      	mov	r4, r0
   b5584:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b5586:	b90b      	cbnz	r3, b558c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b5588:	f7ff ff90 	bl	b54ac <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b558c:	b125      	cbz	r5, b5598 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b558e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b5592:	4620      	mov	r0, r4
   b5594:	f7ff ffdd 	bl	b5552 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b5598:	6860      	ldr	r0, [r4, #4]
   b559a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b559e:	f7ff ff5c 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b55a2:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b55a4:	af01      	add	r7, sp, #4
   b55a6:	5db9      	ldrb	r1, [r7, r6]
   b55a8:	6860      	ldr	r0, [r4, #4]
   b55aa:	f7ff ff56 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b55ae:	3e01      	subs	r6, #1
   b55b0:	d2f9      	bcs.n	b55a6 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b55b2:	2d00      	cmp	r5, #0
   b55b4:	6860      	ldr	r0, [r4, #4]
   b55b6:	bf0c      	ite	eq
   b55b8:	2195      	moveq	r1, #149	; 0x95
   b55ba:	2187      	movne	r1, #135	; 0x87
   b55bc:	f7ff ff4d 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b55c0:	6860      	ldr	r0, [r4, #4]
   b55c2:	f7ff ff4c 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b55c6:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b55c8:	6860      	ldr	r0, [r4, #4]
   b55ca:	f7ff ff48 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b55ce:	0603      	lsls	r3, r0, #24
   b55d0:	7260      	strb	r0, [r4, #9]
   b55d2:	d503      	bpl.n	b55dc <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b55d4:	3d01      	subs	r5, #1
   b55d6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b55da:	d1f5      	bne.n	b55c8 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b55dc:	b003      	add	sp, #12
   b55de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55e0 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b55e0:	b570      	push	{r4, r5, r6, lr}
   b55e2:	4604      	mov	r4, r0
   b55e4:	460d      	mov	r5, r1
   b55e6:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b55e8:	2137      	movs	r1, #55	; 0x37
   b55ea:	2200      	movs	r2, #0
   b55ec:	f7ff ffc6 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b55f0:	4632      	mov	r2, r6
   b55f2:	4629      	mov	r1, r5
   b55f4:	4620      	mov	r0, r4
  }
   b55f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b55fa:	f7ff bfbf 	b.w	b557c <_ZN9SdSpiCard11cardCommandEhm>
	...

000b5600 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b5604:	2500      	movs	r5, #0
   b5606:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b5608:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b560a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b560c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b560e:	4604      	mov	r4, r0
   b5610:	4690      	mov	r8, r2
   b5612:	461e      	mov	r6, r3
   b5614:	f000 fa3e 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b5618:	4641      	mov	r1, r8
   b561a:	4607      	mov	r7, r0
   b561c:	6860      	ldr	r0, [r4, #4]
   b561e:	f000 f9bb 	bl	b5998 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b5622:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b5624:	4a49      	ldr	r2, [pc, #292]	; (b574c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b5626:	721d      	strb	r5, [r3, #8]
   b5628:	2501      	movs	r5, #1
   b562a:	60da      	str	r2, [r3, #12]
   b562c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b562e:	4620      	mov	r0, r4
   b5630:	f7ff ff3c 	bl	b54ac <_ZN9SdSpiCard8spiStartEv>
   b5634:	6863      	ldr	r3, [r4, #4]
   b5636:	4629      	mov	r1, r5
   b5638:	7d18      	ldrb	r0, [r3, #20]
   b563a:	f001 f94a 	bl	b68d2 <digitalWrite>
   b563e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b5640:	6860      	ldr	r0, [r4, #4]
   b5642:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b5644:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b5646:	f7ff ff08 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b564a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b564e:	d1f7      	bne.n	b5640 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b5650:	6863      	ldr	r3, [r4, #4]
   b5652:	4629      	mov	r1, r5
   b5654:	7d18      	ldrb	r0, [r3, #20]
   b5656:	f001 f93c 	bl	b68d2 <digitalWrite>
  }
   b565a:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b565c:	2200      	movs	r2, #0
   b565e:	4611      	mov	r1, r2
   b5660:	4620      	mov	r0, r4
   b5662:	f7ff ff8b 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b5666:	2801      	cmp	r0, #1
   b5668:	4680      	mov	r8, r0
   b566a:	d018      	beq.n	b569e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b566c:	3d01      	subs	r5, #1
   b566e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5672:	d107      	bne.n	b5684 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b5674:	2320      	movs	r3, #32
  spiStop();
   b5676:	4620      	mov	r0, r4
   b5678:	7023      	strb	r3, [r4, #0]
   b567a:	f7ff ff26 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b567e:	2000      	movs	r0, #0
}
   b5680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b5684:	6860      	ldr	r0, [r4, #4]
   b5686:	21fd      	movs	r1, #253	; 0xfd
   b5688:	f7ff fee7 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b568c:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b5690:	6860      	ldr	r0, [r4, #4]
   b5692:	f7ff fee4 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b5696:	f1b8 0801 	subs.w	r8, r8, #1
   b569a:	d1f9      	bne.n	b5690 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b569c:	e7de      	b.n	b565c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b569e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b56a2:	2108      	movs	r1, #8
   b56a4:	4620      	mov	r0, r4
   b56a6:	f7ff ff69 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b56aa:	2805      	cmp	r0, #5
   b56ac:	d114      	bne.n	b56d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b56ae:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b56b2:	2500      	movs	r5, #0
   b56b4:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b56b6:	462a      	mov	r2, r5
   b56b8:	2129      	movs	r1, #41	; 0x29
   b56ba:	4620      	mov	r0, r4
   b56bc:	f7ff ff90 	bl	b55e0 <_ZN9SdSpiCard8cardAcmdEhm>
   b56c0:	4602      	mov	r2, r0
   b56c2:	b1d8      	cbz	r0, b56fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b56c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b56c8:	4639      	mov	r1, r7
   b56ca:	4620      	mov	r0, r4
   b56cc:	f7ff feca 	bl	b5464 <_ZN9SdSpiCard10isTimedOutEtt>
   b56d0:	2800      	cmp	r0, #0
   b56d2:	d0f0      	beq.n	b56b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b56d4:	2343      	movs	r3, #67	; 0x43
   b56d6:	e7ce      	b.n	b5676 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b56d8:	2504      	movs	r5, #4
      m_status = spiReceive();
   b56da:	6860      	ldr	r0, [r4, #4]
   b56dc:	f7ff febf 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b56e0:	3d01      	subs	r5, #1
   b56e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b56e6:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b56e8:	d1f7      	bne.n	b56da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b56ea:	28aa      	cmp	r0, #170	; 0xaa
   b56ec:	d104      	bne.n	b56f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b56ee:	2302      	movs	r3, #2
   b56f0:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b56f2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b56f6:	e7dd      	b.n	b56b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b56f8:	2325      	movs	r3, #37	; 0x25
   b56fa:	e7bc      	b.n	b5676 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b56fc:	7aa3      	ldrb	r3, [r4, #10]
   b56fe:	2b02      	cmp	r3, #2
   b5700:	d118      	bne.n	b5734 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b5702:	213a      	movs	r1, #58	; 0x3a
   b5704:	4620      	mov	r0, r4
   b5706:	f7ff ff39 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b570a:	b108      	cbz	r0, b5710 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b570c:	2337      	movs	r3, #55	; 0x37
   b570e:	e7b2      	b.n	b5676 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b5710:	6860      	ldr	r0, [r4, #4]
   b5712:	f7ff fea4 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5716:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b571a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b571c:	bf04      	itt	eq
   b571e:	2303      	moveq	r3, #3
   b5720:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b5722:	6860      	ldr	r0, [r4, #4]
   b5724:	f7ff fe9b 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5728:	6860      	ldr	r0, [r4, #4]
   b572a:	f7ff fe98 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b572e:	6860      	ldr	r0, [r4, #4]
   b5730:	f7ff fe95 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b5734:	4620      	mov	r0, r4
   b5736:	f7ff fec8 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b573a:	6863      	ldr	r3, [r4, #4]
   b573c:	7930      	ldrb	r0, [r6, #4]
   b573e:	68b1      	ldr	r1, [r6, #8]
   b5740:	89b2      	ldrh	r2, [r6, #12]
   b5742:	821a      	strh	r2, [r3, #16]
   b5744:	7218      	strb	r0, [r3, #8]
   b5746:	60d9      	str	r1, [r3, #12]
  return true;
   b5748:	2001      	movs	r0, #1
   b574a:	e799      	b.n	b5680 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b574c:	0003d090 	.word	0x0003d090

000b5750 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5750:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5752:	7a83      	ldrb	r3, [r0, #10]
   b5754:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5756:	bf18      	it	ne
   b5758:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b575a:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b575c:	460a      	mov	r2, r1
   b575e:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5760:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b5762:	f7ff ff0b 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b5766:	b130      	cbz	r0, b5776 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b5768:	2330      	movs	r3, #48	; 0x30
   b576a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b576c:	4620      	mov	r0, r4
   b576e:	f7ff feac 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5772:	2500      	movs	r5, #0
   b5774:	e00b      	b.n	b578e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b5776:	4629      	mov	r1, r5
   b5778:	f44f 7200 	mov.w	r2, #512	; 0x200
   b577c:	4620      	mov	r0, r4
   b577e:	f7ff feb7 	bl	b54f0 <_ZN9SdSpiCard8readDataEPhj>
   b5782:	4605      	mov	r5, r0
   b5784:	2800      	cmp	r0, #0
   b5786:	d0f1      	beq.n	b576c <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b5788:	4620      	mov	r0, r4
   b578a:	f7ff fe9e 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
}
   b578e:	4628      	mov	r0, r5
   b5790:	bd38      	pop	{r3, r4, r5, pc}

000b5792 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5792:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5794:	7a83      	ldrb	r3, [r0, #10]
   b5796:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5798:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b579a:	bf18      	it	ne
   b579c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b579e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b57a0:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b57a2:	f7ff feeb 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b57a6:	b130      	cbz	r0, b57b6 <_ZN9SdSpiCard9readStartEm+0x24>
   b57a8:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b57aa:	4620      	mov	r0, r4
   b57ac:	7023      	strb	r3, [r4, #0]
   b57ae:	f7ff fe8c 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b57b2:	2000      	movs	r0, #0
}
   b57b4:	bd10      	pop	{r4, pc}
  return true;
   b57b6:	2001      	movs	r0, #1
   b57b8:	e7fc      	b.n	b57b4 <_ZN9SdSpiCard9readStartEm+0x22>

000b57ba <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b57ba:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b57bc:	2200      	movs	r2, #0
   b57be:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b57c0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b57c2:	f7ff fedb 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b57c6:	b130      	cbz	r0, b57d6 <_ZN9SdSpiCard8readStopEv+0x1c>
   b57c8:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b57ca:	4620      	mov	r0, r4
   b57cc:	7023      	strb	r3, [r4, #0]
   b57ce:	f7ff fe7c 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b57d2:	2000      	movs	r0, #0
}
   b57d4:	bd10      	pop	{r4, pc}
  spiStop();
   b57d6:	4620      	mov	r0, r4
   b57d8:	f7ff fe77 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return true;
   b57dc:	2001      	movs	r0, #1
   b57de:	e7f9      	b.n	b57d4 <_ZN9SdSpiCard8readStopEv+0x1a>

000b57e0 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b57e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57e2:	4604      	mov	r4, r0
   b57e4:	4616      	mov	r6, r2
   b57e6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b57e8:	f7ff ffd3 	bl	b5792 <_ZN9SdSpiCard9readStartEm>
   b57ec:	b168      	cbz	r0, b580a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b57ee:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b57f0:	b2ab      	uxth	r3, r5
   b57f2:	429f      	cmp	r7, r3
   b57f4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b57f8:	d909      	bls.n	b580e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b57fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   b57fe:	4620      	mov	r0, r4
   b5800:	f7ff fe76 	bl	b54f0 <_ZN9SdSpiCard8readDataEPhj>
   b5804:	3501      	adds	r5, #1
   b5806:	2800      	cmp	r0, #0
   b5808:	d1f2      	bne.n	b57f0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b580a:	2000      	movs	r0, #0
   b580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b580e:	4620      	mov	r0, r4
}
   b5810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b5814:	f7ff bfd1 	b.w	b57ba <_ZN9SdSpiCard8readStopEv>

000b5818 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b5818:	b538      	push	{r3, r4, r5, lr}
   b581a:	4604      	mov	r4, r0
   b581c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b581e:	6840      	ldr	r0, [r0, #4]
   b5820:	f7ff fe1b 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b5824:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5828:	6860      	ldr	r0, [r4, #4]
   b582a:	4629      	mov	r1, r5
   b582c:	f000 f8e6 	bl	b59fc <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b5830:	6860      	ldr	r0, [r4, #4]
   b5832:	21ff      	movs	r1, #255	; 0xff
   b5834:	f7ff fe11 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b5838:	6860      	ldr	r0, [r4, #4]
   b583a:	21ff      	movs	r1, #255	; 0xff
   b583c:	f7ff fe0d 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b5840:	6860      	ldr	r0, [r4, #4]
   b5842:	f7ff fe0c 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5846:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b5848:	f000 001f 	and.w	r0, r0, #31
   b584c:	2805      	cmp	r0, #5
   b584e:	d006      	beq.n	b585e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b5850:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5852:	4620      	mov	r0, r4
   b5854:	7023      	strb	r3, [r4, #0]
   b5856:	f7ff fe38 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b585a:	2000      	movs	r0, #0
}
   b585c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b585e:	2001      	movs	r0, #1
   b5860:	e7fc      	b.n	b585c <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b5862 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5862:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5864:	7a83      	ldrb	r3, [r0, #10]
   b5866:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5868:	bf18      	it	ne
   b586a:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b586c:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b586e:	460a      	mov	r2, r1
   b5870:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5872:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b5874:	f7ff fe82 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b5878:	4606      	mov	r6, r0
   b587a:	b130      	cbz	r0, b588a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b587c:	2332      	movs	r3, #50	; 0x32
   b587e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5880:	4620      	mov	r0, r4
   b5882:	f7ff fe22 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5886:	2500      	movs	r5, #0
   b5888:	e01f      	b.n	b58ca <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b588a:	462a      	mov	r2, r5
   b588c:	21fe      	movs	r1, #254	; 0xfe
   b588e:	4620      	mov	r0, r4
   b5890:	f7ff ffc2 	bl	b5818 <_ZN9SdSpiCard9writeDataEhPKh>
   b5894:	2800      	cmp	r0, #0
   b5896:	d0f3      	beq.n	b5880 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5898:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b589c:	4620      	mov	r0, r4
   b589e:	f7ff fe58 	bl	b5552 <_ZN9SdSpiCard11waitNotBusyEt>
   b58a2:	4605      	mov	r5, r0
   b58a4:	b908      	cbnz	r0, b58aa <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b58a6:	235a      	movs	r3, #90	; 0x5a
   b58a8:	e7e9      	b.n	b587e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b58aa:	4632      	mov	r2, r6
   b58ac:	210d      	movs	r1, #13
   b58ae:	4620      	mov	r0, r4
   b58b0:	f7ff fe64 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b58b4:	b108      	cbz	r0, b58ba <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b58b6:	2329      	movs	r3, #41	; 0x29
   b58b8:	e7e1      	b.n	b587e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b58ba:	6860      	ldr	r0, [r4, #4]
   b58bc:	f7ff fdcf 	bl	b545e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b58c0:	2800      	cmp	r0, #0
   b58c2:	d1f8      	bne.n	b58b6 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b58c4:	4620      	mov	r0, r4
   b58c6:	f7ff fe00 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
}
   b58ca:	4628      	mov	r0, r5
   b58cc:	bd70      	pop	{r4, r5, r6, pc}

000b58ce <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b58ce:	b513      	push	{r0, r1, r4, lr}
   b58d0:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b58d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b58d6:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b58d8:	f7ff fe3b 	bl	b5552 <_ZN9SdSpiCard11waitNotBusyEt>
   b58dc:	9a01      	ldr	r2, [sp, #4]
   b58de:	b930      	cbnz	r0, b58ee <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b58e0:	235b      	movs	r3, #91	; 0x5b
   b58e2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b58e4:	4620      	mov	r0, r4
   b58e6:	f7ff fdf0 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b58ea:	2000      	movs	r0, #0
   b58ec:	e005      	b.n	b58fa <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b58ee:	21fc      	movs	r1, #252	; 0xfc
   b58f0:	4620      	mov	r0, r4
   b58f2:	f7ff ff91 	bl	b5818 <_ZN9SdSpiCard9writeDataEhPKh>
   b58f6:	2800      	cmp	r0, #0
   b58f8:	d0f4      	beq.n	b58e4 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b58fa:	b002      	add	sp, #8
   b58fc:	bd10      	pop	{r4, pc}

000b58fe <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b58fe:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b5900:	7a83      	ldrb	r3, [r0, #10]
   b5902:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5904:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5906:	bf18      	it	ne
   b5908:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b590a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b590c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b590e:	f7ff fe35 	bl	b557c <_ZN9SdSpiCard11cardCommandEhm>
   b5912:	b130      	cbz	r0, b5922 <_ZN9SdSpiCard10writeStartEm+0x24>
   b5914:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5916:	4620      	mov	r0, r4
   b5918:	7023      	strb	r3, [r4, #0]
   b591a:	f7ff fdd6 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   b591e:	2000      	movs	r0, #0
}
   b5920:	bd10      	pop	{r4, pc}
  return true;
   b5922:	2001      	movs	r0, #1
   b5924:	e7fc      	b.n	b5920 <_ZN9SdSpiCard10writeStartEm+0x22>

000b5926 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b5926:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5928:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b592c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b592e:	f7ff fe10 	bl	b5552 <_ZN9SdSpiCard11waitNotBusyEt>
   b5932:	4605      	mov	r5, r0
   b5934:	b930      	cbnz	r0, b5944 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b5936:	2356      	movs	r3, #86	; 0x56
   b5938:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b593a:	4620      	mov	r0, r4
   b593c:	f7ff fdc5 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b5940:	4628      	mov	r0, r5
   b5942:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b5944:	6860      	ldr	r0, [r4, #4]
   b5946:	21fd      	movs	r1, #253	; 0xfd
   b5948:	f7ff fd87 	bl	b545a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b594c:	e7f5      	b.n	b593a <_ZN9SdSpiCard9writeStopEv+0x14>

000b594e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b594e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5950:	4604      	mov	r4, r0
   b5952:	4616      	mov	r6, r2
   b5954:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b5956:	f7ff ffd2 	bl	b58fe <_ZN9SdSpiCard10writeStartEm>
   b595a:	b170      	cbz	r0, b597a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b595c:	2500      	movs	r5, #0
   b595e:	42bd      	cmp	r5, r7
   b5960:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b5964:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b5966:	d004      	beq.n	b5972 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b5968:	f7ff ffb1 	bl	b58ce <_ZN9SdSpiCard9writeDataEPKh>
   b596c:	b128      	cbz	r0, b597a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b596e:	3501      	adds	r5, #1
   b5970:	e7f5      	b.n	b595e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b5972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b5976:	f7ff bfd6 	b.w	b5926 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b597a:	4620      	mov	r0, r4
   b597c:	f7ff fda5 	bl	b54ca <_ZN9SdSpiCard7spiStopEv>
}
   b5980:	2000      	movs	r0, #0
   b5982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5984 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b5984:	4b01      	ldr	r3, [pc, #4]	; (b598c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b5986:	2201      	movs	r2, #1
   b5988:	701a      	strb	r2, [r3, #0]
}
   b598a:	4770      	bx	lr
   b598c:	2003e698 	.word	0x2003e698

000b5990 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b5990:	1d01      	adds	r1, r0, #4
   b5992:	6800      	ldr	r0, [r0, #0]
   b5994:	f000 bad6 	b.w	b5f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5998 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b5998:	b510      	push	{r4, lr}
   b599a:	4604      	mov	r4, r0
  m_csPin = csPin;
   b599c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b599e:	6800      	ldr	r0, [r0, #0]
   b59a0:	f000 faa2 	bl	b5ee8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b59a4:	7d20      	ldrb	r0, [r4, #20]
   b59a6:	2101      	movs	r1, #1
   b59a8:	f000 ff82 	bl	b68b0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b59ac:	7d20      	ldrb	r0, [r4, #20]
   b59ae:	2101      	movs	r1, #1
}
   b59b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b59b4:	f000 bf8d 	b.w	b68d2 <digitalWrite>

000b59b8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b59b8:	6800      	ldr	r0, [r0, #0]
   b59ba:	f000 baa9 	b.w	b5f10 <_ZN8SPIClass14endTransactionEv>

000b59be <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b59be:	6800      	ldr	r0, [r0, #0]
   b59c0:	21ff      	movs	r1, #255	; 0xff
   b59c2:	f000 bb2d 	b.w	b6020 <_ZN8SPIClass8transferEh>
	...

000b59c8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b59c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59ca:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b59cc:	4a07      	ldr	r2, [pc, #28]	; (b59ec <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b59ce:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b59d0:	2500      	movs	r5, #0
   b59d2:	4c07      	ldr	r4, [pc, #28]	; (b59f0 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b59d4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b59d6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b59d8:	460a      	mov	r2, r1
   b59da:	4629      	mov	r1, r5
   b59dc:	f000 fb26 	bl	b602c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b59e0:	7823      	ldrb	r3, [r4, #0]
   b59e2:	2b00      	cmp	r3, #0
   b59e4:	d0fc      	beq.n	b59e0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b59e6:	2000      	movs	r0, #0
   b59e8:	b003      	add	sp, #12
   b59ea:	bd30      	pop	{r4, r5, pc}
   b59ec:	000b5985 	.word	0x000b5985
   b59f0:	2003e698 	.word	0x2003e698

000b59f4 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b59f4:	6800      	ldr	r0, [r0, #0]
   b59f6:	f000 bb13 	b.w	b6020 <_ZN8SPIClass8transferEh>
	...

000b59fc <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b59fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59fe:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5a00:	4a06      	ldr	r2, [pc, #24]	; (b5a1c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b5a02:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5a04:	2500      	movs	r5, #0
   b5a06:	4c06      	ldr	r4, [pc, #24]	; (b5a20 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5a08:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5a0a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5a0c:	462a      	mov	r2, r5
   b5a0e:	f000 fb0d 	bl	b602c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b5a12:	7823      	ldrb	r3, [r4, #0]
   b5a14:	2b00      	cmp	r3, #0
   b5a16:	d0fc      	beq.n	b5a12 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b5a18:	b003      	add	sp, #12
   b5a1a:	bd30      	pop	{r4, r5, pc}
   b5a1c:	000b5985 	.word	0x000b5985
   b5a20:	2003e698 	.word	0x2003e698

000b5a24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5a24:	b508      	push	{r3, lr}
   b5a26:	4b02      	ldr	r3, [pc, #8]	; (b5a30 <netdb_freeaddrinfo+0xc>)
   b5a28:	681b      	ldr	r3, [r3, #0]
   b5a2a:	689b      	ldr	r3, [r3, #8]
   b5a2c:	9301      	str	r3, [sp, #4]
   b5a2e:	bd08      	pop	{r3, pc}
   b5a30:	00030268 	.word	0x00030268

000b5a34 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a34:	b508      	push	{r3, lr}
   b5a36:	4b02      	ldr	r3, [pc, #8]	; (b5a40 <netdb_getaddrinfo+0xc>)
   b5a38:	681b      	ldr	r3, [r3, #0]
   b5a3a:	68db      	ldr	r3, [r3, #12]
   b5a3c:	9301      	str	r3, [sp, #4]
   b5a3e:	bd08      	pop	{r3, pc}
   b5a40:	00030268 	.word	0x00030268

000b5a44 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5a44:	b508      	push	{r3, lr}
   b5a46:	4b02      	ldr	r3, [pc, #8]	; (b5a50 <HAL_Pin_Mode+0xc>)
   b5a48:	681b      	ldr	r3, [r3, #0]
   b5a4a:	689b      	ldr	r3, [r3, #8]
   b5a4c:	9301      	str	r3, [sp, #4]
   b5a4e:	bd08      	pop	{r3, pc}
   b5a50:	0003022c 	.word	0x0003022c

000b5a54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5a54:	b508      	push	{r3, lr}
   b5a56:	4b02      	ldr	r3, [pc, #8]	; (b5a60 <HAL_Get_Pin_Mode+0xc>)
   b5a58:	681b      	ldr	r3, [r3, #0]
   b5a5a:	68db      	ldr	r3, [r3, #12]
   b5a5c:	9301      	str	r3, [sp, #4]
   b5a5e:	bd08      	pop	{r3, pc}
   b5a60:	0003022c 	.word	0x0003022c

000b5a64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5a64:	b508      	push	{r3, lr}
   b5a66:	4b02      	ldr	r3, [pc, #8]	; (b5a70 <HAL_GPIO_Write+0xc>)
   b5a68:	681b      	ldr	r3, [r3, #0]
   b5a6a:	691b      	ldr	r3, [r3, #16]
   b5a6c:	9301      	str	r3, [sp, #4]
   b5a6e:	bd08      	pop	{r3, pc}
   b5a70:	0003022c 	.word	0x0003022c

000b5a74 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5a74:	b508      	push	{r3, lr}
   b5a76:	4b02      	ldr	r3, [pc, #8]	; (b5a80 <HAL_RNG_GetRandomNumber+0xc>)
   b5a78:	681b      	ldr	r3, [r3, #0]
   b5a7a:	685b      	ldr	r3, [r3, #4]
   b5a7c:	9301      	str	r3, [sp, #4]
   b5a7e:	bd08      	pop	{r3, pc}
   b5a80:	00030218 	.word	0x00030218

000b5a84 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5a84:	b508      	push	{r3, lr}
   b5a86:	4b02      	ldr	r3, [pc, #8]	; (b5a90 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5a88:	681b      	ldr	r3, [r3, #0]
   b5a8a:	691b      	ldr	r3, [r3, #16]
   b5a8c:	9301      	str	r3, [sp, #4]
   b5a8e:	bd08      	pop	{r3, pc}
   b5a90:	00030218 	.word	0x00030218

000b5a94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5a94:	b508      	push	{r3, lr}
   b5a96:	4b02      	ldr	r3, [pc, #8]	; (b5aa0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5a98:	681b      	ldr	r3, [r3, #0]
   b5a9a:	695b      	ldr	r3, [r3, #20]
   b5a9c:	9301      	str	r3, [sp, #4]
   b5a9e:	bd08      	pop	{r3, pc}
   b5aa0:	00030218 	.word	0x00030218

000b5aa4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5aa4:	b508      	push	{r3, lr}
   b5aa6:	4b02      	ldr	r3, [pc, #8]	; (b5ab0 <os_mutex_recursive_create+0xc>)
   b5aa8:	681b      	ldr	r3, [r3, #0]
   b5aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5aac:	9301      	str	r3, [sp, #4]
   b5aae:	bd08      	pop	{r3, pc}
   b5ab0:	00030248 	.word	0x00030248

000b5ab4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ab4:	b508      	push	{r3, lr}
   b5ab6:	4b02      	ldr	r3, [pc, #8]	; (b5ac0 <inet_inet_ntop+0xc>)
   b5ab8:	681b      	ldr	r3, [r3, #0]
   b5aba:	695b      	ldr	r3, [r3, #20]
   b5abc:	9301      	str	r3, [sp, #4]
   b5abe:	bd08      	pop	{r3, pc}
   b5ac0:	00030264 	.word	0x00030264

000b5ac4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ac4:	b508      	push	{r3, lr}
   b5ac6:	4b02      	ldr	r3, [pc, #8]	; (b5ad0 <hal_usart_write+0xc>)
   b5ac8:	681b      	ldr	r3, [r3, #0]
   b5aca:	68db      	ldr	r3, [r3, #12]
   b5acc:	9301      	str	r3, [sp, #4]
   b5ace:	bd08      	pop	{r3, pc}
   b5ad0:	0003023c 	.word	0x0003023c

000b5ad4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5ad4:	b508      	push	{r3, lr}
   b5ad6:	4b02      	ldr	r3, [pc, #8]	; (b5ae0 <hal_usart_available+0xc>)
   b5ad8:	681b      	ldr	r3, [r3, #0]
   b5ada:	691b      	ldr	r3, [r3, #16]
   b5adc:	9301      	str	r3, [sp, #4]
   b5ade:	bd08      	pop	{r3, pc}
   b5ae0:	0003023c 	.word	0x0003023c

000b5ae4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ae4:	b508      	push	{r3, lr}
   b5ae6:	4b02      	ldr	r3, [pc, #8]	; (b5af0 <hal_usart_read+0xc>)
   b5ae8:	681b      	ldr	r3, [r3, #0]
   b5aea:	695b      	ldr	r3, [r3, #20]
   b5aec:	9301      	str	r3, [sp, #4]
   b5aee:	bd08      	pop	{r3, pc}
   b5af0:	0003023c 	.word	0x0003023c

000b5af4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5af4:	b508      	push	{r3, lr}
   b5af6:	4b02      	ldr	r3, [pc, #8]	; (b5b00 <hal_usart_peek+0xc>)
   b5af8:	681b      	ldr	r3, [r3, #0]
   b5afa:	699b      	ldr	r3, [r3, #24]
   b5afc:	9301      	str	r3, [sp, #4]
   b5afe:	bd08      	pop	{r3, pc}
   b5b00:	0003023c 	.word	0x0003023c

000b5b04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5b04:	b508      	push	{r3, lr}
   b5b06:	4b02      	ldr	r3, [pc, #8]	; (b5b10 <hal_usart_flush+0xc>)
   b5b08:	681b      	ldr	r3, [r3, #0]
   b5b0a:	69db      	ldr	r3, [r3, #28]
   b5b0c:	9301      	str	r3, [sp, #4]
   b5b0e:	bd08      	pop	{r3, pc}
   b5b10:	0003023c 	.word	0x0003023c

000b5b14 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5b14:	b508      	push	{r3, lr}
   b5b16:	4b02      	ldr	r3, [pc, #8]	; (b5b20 <hal_usart_is_enabled+0xc>)
   b5b18:	681b      	ldr	r3, [r3, #0]
   b5b1a:	6a1b      	ldr	r3, [r3, #32]
   b5b1c:	9301      	str	r3, [sp, #4]
   b5b1e:	bd08      	pop	{r3, pc}
   b5b20:	0003023c 	.word	0x0003023c

000b5b24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5b24:	b508      	push	{r3, lr}
   b5b26:	4b02      	ldr	r3, [pc, #8]	; (b5b30 <hal_usart_available_data_for_write+0xc>)
   b5b28:	681b      	ldr	r3, [r3, #0]
   b5b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b2c:	9301      	str	r3, [sp, #4]
   b5b2e:	bd08      	pop	{r3, pc}
   b5b30:	0003023c 	.word	0x0003023c

000b5b34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5b34:	b508      	push	{r3, lr}
   b5b36:	4b02      	ldr	r3, [pc, #8]	; (b5b40 <hal_usart_init_ex+0xc>)
   b5b38:	681b      	ldr	r3, [r3, #0]
   b5b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b3c:	9301      	str	r3, [sp, #4]
   b5b3e:	bd08      	pop	{r3, pc}
   b5b40:	0003023c 	.word	0x0003023c

000b5b44 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5b44:	b508      	push	{r3, lr}
   b5b46:	4b02      	ldr	r3, [pc, #8]	; (b5b50 <hal_i2c_write+0xc>)
   b5b48:	681b      	ldr	r3, [r3, #0]
   b5b4a:	6a1b      	ldr	r3, [r3, #32]
   b5b4c:	9301      	str	r3, [sp, #4]
   b5b4e:	bd08      	pop	{r3, pc}
   b5b50:	00030228 	.word	0x00030228

000b5b54 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5b54:	b508      	push	{r3, lr}
   b5b56:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <hal_i2c_available+0xc>)
   b5b58:	681b      	ldr	r3, [r3, #0]
   b5b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b5c:	9301      	str	r3, [sp, #4]
   b5b5e:	bd08      	pop	{r3, pc}
   b5b60:	00030228 	.word	0x00030228

000b5b64 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5b64:	b508      	push	{r3, lr}
   b5b66:	4b02      	ldr	r3, [pc, #8]	; (b5b70 <hal_i2c_read+0xc>)
   b5b68:	681b      	ldr	r3, [r3, #0]
   b5b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b6c:	9301      	str	r3, [sp, #4]
   b5b6e:	bd08      	pop	{r3, pc}
   b5b70:	00030228 	.word	0x00030228

000b5b74 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5b74:	b508      	push	{r3, lr}
   b5b76:	4b02      	ldr	r3, [pc, #8]	; (b5b80 <hal_i2c_peek+0xc>)
   b5b78:	681b      	ldr	r3, [r3, #0]
   b5b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b7c:	9301      	str	r3, [sp, #4]
   b5b7e:	bd08      	pop	{r3, pc}
   b5b80:	00030228 	.word	0x00030228

000b5b84 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5b84:	b508      	push	{r3, lr}
   b5b86:	4b02      	ldr	r3, [pc, #8]	; (b5b90 <hal_i2c_flush+0xc>)
   b5b88:	681b      	ldr	r3, [r3, #0]
   b5b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b8c:	9301      	str	r3, [sp, #4]
   b5b8e:	bd08      	pop	{r3, pc}
   b5b90:	00030228 	.word	0x00030228

000b5b94 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5b94:	b508      	push	{r3, lr}
   b5b96:	4b02      	ldr	r3, [pc, #8]	; (b5ba0 <hal_i2c_is_enabled+0xc>)
   b5b98:	681b      	ldr	r3, [r3, #0]
   b5b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5b9c:	9301      	str	r3, [sp, #4]
   b5b9e:	bd08      	pop	{r3, pc}
   b5ba0:	00030228 	.word	0x00030228

000b5ba4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5ba4:	b508      	push	{r3, lr}
   b5ba6:	4b02      	ldr	r3, [pc, #8]	; (b5bb0 <hal_i2c_init+0xc>)
   b5ba8:	681b      	ldr	r3, [r3, #0]
   b5baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bac:	9301      	str	r3, [sp, #4]
   b5bae:	bd08      	pop	{r3, pc}
   b5bb0:	00030228 	.word	0x00030228

000b5bb4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5bb4:	b508      	push	{r3, lr}
   b5bb6:	4b02      	ldr	r3, [pc, #8]	; (b5bc0 <hal_spi_begin+0xc>)
   b5bb8:	681b      	ldr	r3, [r3, #0]
   b5bba:	681b      	ldr	r3, [r3, #0]
   b5bbc:	9301      	str	r3, [sp, #4]
   b5bbe:	bd08      	pop	{r3, pc}
   b5bc0:	00030230 	.word	0x00030230

000b5bc4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5bc4:	b508      	push	{r3, lr}
   b5bc6:	4b02      	ldr	r3, [pc, #8]	; (b5bd0 <hal_spi_transfer+0xc>)
   b5bc8:	681b      	ldr	r3, [r3, #0]
   b5bca:	695b      	ldr	r3, [r3, #20]
   b5bcc:	9301      	str	r3, [sp, #4]
   b5bce:	bd08      	pop	{r3, pc}
   b5bd0:	00030230 	.word	0x00030230

000b5bd4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5bd4:	b508      	push	{r3, lr}
   b5bd6:	4b02      	ldr	r3, [pc, #8]	; (b5be0 <hal_spi_init+0xc>)
   b5bd8:	681b      	ldr	r3, [r3, #0]
   b5bda:	69db      	ldr	r3, [r3, #28]
   b5bdc:	9301      	str	r3, [sp, #4]
   b5bde:	bd08      	pop	{r3, pc}
   b5be0:	00030230 	.word	0x00030230

000b5be4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5be4:	b508      	push	{r3, lr}
   b5be6:	4b02      	ldr	r3, [pc, #8]	; (b5bf0 <hal_spi_is_enabled+0xc>)
   b5be8:	681b      	ldr	r3, [r3, #0]
   b5bea:	6a1b      	ldr	r3, [r3, #32]
   b5bec:	9301      	str	r3, [sp, #4]
   b5bee:	bd08      	pop	{r3, pc}
   b5bf0:	00030230 	.word	0x00030230

000b5bf4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5bf4:	b508      	push	{r3, lr}
   b5bf6:	4b02      	ldr	r3, [pc, #8]	; (b5c00 <hal_spi_info+0xc>)
   b5bf8:	681b      	ldr	r3, [r3, #0]
   b5bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5bfc:	9301      	str	r3, [sp, #4]
   b5bfe:	bd08      	pop	{r3, pc}
   b5c00:	00030230 	.word	0x00030230

000b5c04 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b5c04:	b508      	push	{r3, lr}
   b5c06:	4b02      	ldr	r3, [pc, #8]	; (b5c10 <hal_spi_transfer_dma+0xc>)
   b5c08:	681b      	ldr	r3, [r3, #0]
   b5c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c0c:	9301      	str	r3, [sp, #4]
   b5c0e:	bd08      	pop	{r3, pc}
   b5c10:	00030230 	.word	0x00030230

000b5c14 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b5c14:	b508      	push	{r3, lr}
   b5c16:	4b02      	ldr	r3, [pc, #8]	; (b5c20 <hal_spi_transfer_dma_status+0xc>)
   b5c18:	681b      	ldr	r3, [r3, #0]
   b5c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5c1c:	9301      	str	r3, [sp, #4]
   b5c1e:	bd08      	pop	{r3, pc}
   b5c20:	00030230 	.word	0x00030230

000b5c24 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5c24:	b508      	push	{r3, lr}
   b5c26:	4b02      	ldr	r3, [pc, #8]	; (b5c30 <hal_spi_set_settings+0xc>)
   b5c28:	681b      	ldr	r3, [r3, #0]
   b5c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c2c:	9301      	str	r3, [sp, #4]
   b5c2e:	bd08      	pop	{r3, pc}
   b5c30:	00030230 	.word	0x00030230

000b5c34 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5c34:	b508      	push	{r3, lr}
   b5c36:	4b02      	ldr	r3, [pc, #8]	; (b5c40 <hal_spi_acquire+0xc>)
   b5c38:	681b      	ldr	r3, [r3, #0]
   b5c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c3c:	9301      	str	r3, [sp, #4]
   b5c3e:	bd08      	pop	{r3, pc}
   b5c40:	00030230 	.word	0x00030230

000b5c44 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5c44:	b508      	push	{r3, lr}
   b5c46:	4b02      	ldr	r3, [pc, #8]	; (b5c50 <hal_spi_release+0xc>)
   b5c48:	681b      	ldr	r3, [r3, #0]
   b5c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c4c:	9301      	str	r3, [sp, #4]
   b5c4e:	bd08      	pop	{r3, pc}
   b5c50:	00030230 	.word	0x00030230

000b5c54 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5c54:	b508      	push	{r3, lr}
   b5c56:	4b02      	ldr	r3, [pc, #8]	; (b5c60 <HAL_USB_USART_Init+0xc>)
   b5c58:	681b      	ldr	r3, [r3, #0]
   b5c5a:	681b      	ldr	r3, [r3, #0]
   b5c5c:	9301      	str	r3, [sp, #4]
   b5c5e:	bd08      	pop	{r3, pc}
   b5c60:	0003024c 	.word	0x0003024c

000b5c64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5c64:	b508      	push	{r3, lr}
   b5c66:	4b02      	ldr	r3, [pc, #8]	; (b5c70 <HAL_USB_USART_Begin+0xc>)
   b5c68:	681b      	ldr	r3, [r3, #0]
   b5c6a:	685b      	ldr	r3, [r3, #4]
   b5c6c:	9301      	str	r3, [sp, #4]
   b5c6e:	bd08      	pop	{r3, pc}
   b5c70:	0003024c 	.word	0x0003024c

000b5c74 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5c74:	b508      	push	{r3, lr}
   b5c76:	4b02      	ldr	r3, [pc, #8]	; (b5c80 <HAL_USB_USART_Available_Data+0xc>)
   b5c78:	681b      	ldr	r3, [r3, #0]
   b5c7a:	691b      	ldr	r3, [r3, #16]
   b5c7c:	9301      	str	r3, [sp, #4]
   b5c7e:	bd08      	pop	{r3, pc}
   b5c80:	0003024c 	.word	0x0003024c

000b5c84 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5c84:	b508      	push	{r3, lr}
   b5c86:	4b02      	ldr	r3, [pc, #8]	; (b5c90 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5c88:	681b      	ldr	r3, [r3, #0]
   b5c8a:	695b      	ldr	r3, [r3, #20]
   b5c8c:	9301      	str	r3, [sp, #4]
   b5c8e:	bd08      	pop	{r3, pc}
   b5c90:	0003024c 	.word	0x0003024c

000b5c94 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5c94:	b508      	push	{r3, lr}
   b5c96:	4b02      	ldr	r3, [pc, #8]	; (b5ca0 <HAL_USB_USART_Receive_Data+0xc>)
   b5c98:	681b      	ldr	r3, [r3, #0]
   b5c9a:	699b      	ldr	r3, [r3, #24]
   b5c9c:	9301      	str	r3, [sp, #4]
   b5c9e:	bd08      	pop	{r3, pc}
   b5ca0:	0003024c 	.word	0x0003024c

000b5ca4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5ca4:	b508      	push	{r3, lr}
   b5ca6:	4b02      	ldr	r3, [pc, #8]	; (b5cb0 <HAL_USB_USART_Send_Data+0xc>)
   b5ca8:	681b      	ldr	r3, [r3, #0]
   b5caa:	69db      	ldr	r3, [r3, #28]
   b5cac:	9301      	str	r3, [sp, #4]
   b5cae:	bd08      	pop	{r3, pc}
   b5cb0:	0003024c 	.word	0x0003024c

000b5cb4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5cb4:	b508      	push	{r3, lr}
   b5cb6:	4b02      	ldr	r3, [pc, #8]	; (b5cc0 <HAL_USB_USART_Flush_Data+0xc>)
   b5cb8:	681b      	ldr	r3, [r3, #0]
   b5cba:	6a1b      	ldr	r3, [r3, #32]
   b5cbc:	9301      	str	r3, [sp, #4]
   b5cbe:	bd08      	pop	{r3, pc}
   b5cc0:	0003024c 	.word	0x0003024c

000b5cc4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b5cc4:	b508      	push	{r3, lr}
   b5cc6:	4b02      	ldr	r3, [pc, #8]	; (b5cd0 <HAL_USB_USART_Is_Enabled+0xc>)
   b5cc8:	681b      	ldr	r3, [r3, #0]
   b5cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ccc:	9301      	str	r3, [sp, #4]
   b5cce:	bd08      	pop	{r3, pc}
   b5cd0:	0003024c 	.word	0x0003024c

000b5cd4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5cd4:	b508      	push	{r3, lr}
   b5cd6:	4b02      	ldr	r3, [pc, #8]	; (b5ce0 <set_system_mode+0xc>)
   b5cd8:	681b      	ldr	r3, [r3, #0]
   b5cda:	685b      	ldr	r3, [r3, #4]
   b5cdc:	9301      	str	r3, [sp, #4]
   b5cde:	bd08      	pop	{r3, pc}
   b5ce0:	00030220 	.word	0x00030220

000b5ce4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5ce4:	b508      	push	{r3, lr}
   b5ce6:	4b02      	ldr	r3, [pc, #8]	; (b5cf0 <system_delay_ms+0xc>)
   b5ce8:	681b      	ldr	r3, [r3, #0]
   b5cea:	695b      	ldr	r3, [r3, #20]
   b5cec:	9301      	str	r3, [sp, #4]
   b5cee:	bd08      	pop	{r3, pc}
   b5cf0:	00030220 	.word	0x00030220

000b5cf4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5cf4:	b508      	push	{r3, lr}
   b5cf6:	4b03      	ldr	r3, [pc, #12]	; (b5d04 <system_ctrl_set_app_request_handler+0x10>)
   b5cf8:	681b      	ldr	r3, [r3, #0]
   b5cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5cfe:	9301      	str	r3, [sp, #4]
   b5d00:	bd08      	pop	{r3, pc}
   b5d02:	0000      	.short	0x0000
   b5d04:	00030220 	.word	0x00030220

000b5d08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5d08:	b508      	push	{r3, lr}
   b5d0a:	4b03      	ldr	r3, [pc, #12]	; (b5d18 <system_ctrl_set_result+0x10>)
   b5d0c:	681b      	ldr	r3, [r3, #0]
   b5d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5d12:	9301      	str	r3, [sp, #4]
   b5d14:	bd08      	pop	{r3, pc}
   b5d16:	0000      	.short	0x0000
   b5d18:	00030220 	.word	0x00030220

000b5d1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <network_connect+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	685b      	ldr	r3, [r3, #4]
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	00030240 	.word	0x00030240

000b5d2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <network_connecting+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	689b      	ldr	r3, [r3, #8]
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030240 	.word	0x00030240

000b5d3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <network_disconnect+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	68db      	ldr	r3, [r3, #12]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030240 	.word	0x00030240

000b5d4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <network_ready+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	691b      	ldr	r3, [r3, #16]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030240 	.word	0x00030240

000b5d5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <network_on+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	695b      	ldr	r3, [r3, #20]
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030240 	.word	0x00030240

000b5d6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <network_off+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	699b      	ldr	r3, [r3, #24]
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030240 	.word	0x00030240

000b5d7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <network_listen+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	69db      	ldr	r3, [r3, #28]
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030240 	.word	0x00030240

000b5d8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <network_listening+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	6a1b      	ldr	r3, [r3, #32]
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030240 	.word	0x00030240

000b5d9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <network_set_listen_timeout+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030240 	.word	0x00030240

000b5dac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <network_get_listen_timeout+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030240 	.word	0x00030240

000b5dbc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <network_is_on+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030240 	.word	0x00030240

000b5dcc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <network_is_off+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030240 	.word	0x00030240

000b5ddc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <spark_process+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	689b      	ldr	r3, [r3, #8]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030244 	.word	0x00030244

000b5dec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030244 	.word	0x00030244

000b5dfc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <malloc+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	681b      	ldr	r3, [r3, #0]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	0003021c 	.word	0x0003021c

000b5e0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <free+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	685b      	ldr	r3, [r3, #4]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	0003021c 	.word	0x0003021c

000b5e1c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <vsnprintf+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	0003021c 	.word	0x0003021c

000b5e2c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <__assert_func+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	0003021c 	.word	0x0003021c

000b5e3c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <newlib_impure_ptr_callback+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	0003021c 	.word	0x0003021c

000b5e4c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5e4c:	2200      	movs	r2, #0
   b5e4e:	6840      	ldr	r0, [r0, #4]
   b5e50:	4611      	mov	r1, r2
   b5e52:	f7ff bf9b 	b.w	b5d8c <network_listening>

000b5e56 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5e56:	2200      	movs	r2, #0
   b5e58:	6840      	ldr	r0, [r0, #4]
   b5e5a:	4611      	mov	r1, r2
   b5e5c:	f7ff bfa6 	b.w	b5dac <network_get_listen_timeout>

000b5e60 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5e60:	6840      	ldr	r0, [r0, #4]
   b5e62:	2200      	movs	r2, #0
   b5e64:	f7ff bf9a 	b.w	b5d9c <network_set_listen_timeout>

000b5e68 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5e68:	6840      	ldr	r0, [r0, #4]
   b5e6a:	2200      	movs	r2, #0
   b5e6c:	f081 0101 	eor.w	r1, r1, #1
   b5e70:	f7ff bf84 	b.w	b5d7c <network_listen>

000b5e74 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5e74:	2300      	movs	r3, #0
   b5e76:	6840      	ldr	r0, [r0, #4]
   b5e78:	461a      	mov	r2, r3
   b5e7a:	4619      	mov	r1, r3
   b5e7c:	f7ff bf76 	b.w	b5d6c <network_off>

000b5e80 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5e80:	2300      	movs	r3, #0
   b5e82:	6840      	ldr	r0, [r0, #4]
   b5e84:	461a      	mov	r2, r3
   b5e86:	4619      	mov	r1, r3
   b5e88:	f7ff bf68 	b.w	b5d5c <network_on>

000b5e8c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5e8c:	2200      	movs	r2, #0
   b5e8e:	6840      	ldr	r0, [r0, #4]
   b5e90:	4611      	mov	r1, r2
   b5e92:	f7ff bf5b 	b.w	b5d4c <network_ready>

000b5e96 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5e96:	2200      	movs	r2, #0
   b5e98:	6840      	ldr	r0, [r0, #4]
   b5e9a:	4611      	mov	r1, r2
   b5e9c:	f7ff bf46 	b.w	b5d2c <network_connecting>

000b5ea0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ea0:	6840      	ldr	r0, [r0, #4]
   b5ea2:	2200      	movs	r2, #0
   b5ea4:	2102      	movs	r1, #2
   b5ea6:	f7ff bf49 	b.w	b5d3c <network_disconnect>

000b5eaa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5eaa:	2300      	movs	r3, #0
   b5eac:	6840      	ldr	r0, [r0, #4]
   b5eae:	461a      	mov	r2, r3
   b5eb0:	f7ff bf34 	b.w	b5d1c <network_connect>

000b5eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5eb4:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5eb6:	2203      	movs	r2, #3
   b5eb8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5eba:	4a02      	ldr	r2, [pc, #8]	; (b5ec4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5ebc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5ebe:	4770      	bx	lr
   b5ec0:	2003e69c 	.word	0x2003e69c
   b5ec4:	000b6cc4 	.word	0x000b6cc4

000b5ec8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5ec8:	2100      	movs	r1, #0
   b5eca:	f7ff bebb 	b.w	b5c44 <hal_spi_release>

000b5ece <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5ece:	2100      	movs	r1, #0
   b5ed0:	f7ff beb0 	b.w	b5c34 <hal_spi_acquire>

000b5ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5ed4:	b510      	push	{r4, lr}
   b5ed6:	4604      	mov	r4, r0
   b5ed8:	4608      	mov	r0, r1
{
    _spi = spi;
   b5eda:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5edc:	f7ff fe7a 	bl	b5bd4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ee0:	2300      	movs	r3, #0
   b5ee2:	6063      	str	r3, [r4, #4]
}
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	bd10      	pop	{r4, pc}

000b5ee8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5ee8:	b513      	push	{r0, r1, r4, lr}
   b5eea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5eec:	7800      	ldrb	r0, [r0, #0]
   b5eee:	f7ff ffee 	bl	b5ece <_ZN8SPIClass4lockEv.isra.0>
   b5ef2:	b958      	cbnz	r0, b5f0c <_ZN8SPIClass5beginEv+0x24>
   b5ef4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5ef6:	9001      	str	r0, [sp, #4]
   b5ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5efc:	f7ff fe5a 	bl	b5bb4 <hal_spi_begin>
        unlock();
   b5f00:	9801      	ldr	r0, [sp, #4]
    }
}
   b5f02:	b002      	add	sp, #8
   b5f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f08:	f7ff bfde 	b.w	b5ec8 <_ZN8SPIClass6unlockEv.isra.0>
   b5f0c:	b002      	add	sp, #8
   b5f0e:	bd10      	pop	{r4, pc}

000b5f10 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5f10:	7800      	ldrb	r0, [r0, #0]
   b5f12:	f7ff bfd9 	b.w	b5ec8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5f18 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5f18:	0840      	lsrs	r0, r0, #1
{
   b5f1a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5f1c:	6018      	str	r0, [r3, #0]
   b5f1e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5f20:	6818      	ldr	r0, [r3, #0]
   b5f22:	4288      	cmp	r0, r1
   b5f24:	b2e5      	uxtb	r5, r4
   b5f26:	d906      	bls.n	b5f36 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5f28:	3401      	adds	r4, #1
   b5f2a:	2c08      	cmp	r4, #8
   b5f2c:	d002      	beq.n	b5f34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5f2e:	0840      	lsrs	r0, r0, #1
   b5f30:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5f32:	e7f5      	b.n	b5f20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5f34:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5f38:	5d5b      	ldrb	r3, [r3, r5]
   b5f3a:	7013      	strb	r3, [r2, #0]
}
   b5f3c:	bd30      	pop	{r4, r5, pc}
   b5f3e:	bf00      	nop
   b5f40:	000b6cf8 	.word	0x000b6cf8

000b5f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f48:	4606      	mov	r6, r0
   b5f4a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5f4c:	7800      	ldrb	r0, [r0, #0]
{
   b5f4e:	460c      	mov	r4, r1
    CHECK(lock());
   b5f50:	f7ff ffbd 	bl	b5ece <_ZN8SPIClass4lockEv.isra.0>
   b5f54:	2800      	cmp	r0, #0
   b5f56:	db1b      	blt.n	b5f90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5f58:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5f5a:	2214      	movs	r2, #20
   b5f5c:	2100      	movs	r1, #0
   b5f5e:	a809      	add	r0, sp, #36	; 0x24
   b5f60:	f000 fd76 	bl	b6a50 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5f64:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5f66:	2200      	movs	r2, #0
   b5f68:	a909      	add	r1, sp, #36	; 0x24
   b5f6a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5f6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5f70:	f7ff fe40 	bl	b5bf4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5f74:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5f78:	b113      	cbz	r3, b5f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5f7a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5f7e:	b155      	cbz	r5, b5f96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5f80:	2700      	movs	r7, #0
   b5f82:	46b9      	mov	r9, r7
   b5f84:	46b8      	mov	r8, r7
   b5f86:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5f88:	7923      	ldrb	r3, [r4, #4]
   b5f8a:	b15d      	cbz	r5, b5fa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5f8c:	b1c3      	cbz	r3, b5fc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5f8e:	2000      	movs	r0, #0
}
   b5f90:	b00f      	add	sp, #60	; 0x3c
   b5f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5f96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5f9a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5f9e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5fa2:	e7f1      	b.n	b5f88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5fa4:	2b00      	cmp	r3, #0
   b5fa6:	d135      	bne.n	b6014 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5fa8:	68a3      	ldr	r3, [r4, #8]
   b5faa:	4543      	cmp	r3, r8
   b5fac:	d108      	bne.n	b5fc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5fae:	f88d 9020 	strb.w	r9, [sp, #32]
   b5fb2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5fb6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5fba:	89a3      	ldrh	r3, [r4, #12]
   b5fbc:	429a      	cmp	r2, r3
   b5fbe:	d0e6      	beq.n	b5f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5fc0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5fc2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5fc4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5fca:	ab04      	add	r3, sp, #16
   b5fcc:	f10d 020f 	add.w	r2, sp, #15
   b5fd0:	f7ff ffa2 	bl	b5f18 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5fd4:	7921      	ldrb	r1, [r4, #4]
   b5fd6:	b985      	cbnz	r5, b5ffa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5fd8:	b989      	cbnz	r1, b5ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5fda:	68a3      	ldr	r3, [r4, #8]
   b5fdc:	4543      	cmp	r3, r8
   b5fde:	d30e      	bcc.n	b5ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5fe0:	f88d 9020 	strb.w	r9, [sp, #32]
   b5fe4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5fe8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5fec:	89a3      	ldrh	r3, [r4, #12]
   b5fee:	429a      	cmp	r2, r3
   b5ff0:	d105      	bne.n	b5ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5ff2:	9b04      	ldr	r3, [sp, #16]
   b5ff4:	4543      	cmp	r3, r8
   b5ff6:	d102      	bne.n	b5ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5ff8:	e7c9      	b.n	b5f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5ffa:	2900      	cmp	r1, #0
   b5ffc:	d1f9      	bne.n	b5ff2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5ffe:	2300      	movs	r3, #0
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	7b63      	ldrb	r3, [r4, #13]
   b6004:	9300      	str	r3, [sp, #0]
   b6006:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b600a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b600c:	7830      	ldrb	r0, [r6, #0]
   b600e:	f7ff fe09 	bl	b5c24 <hal_spi_set_settings>
   b6012:	e7bc      	b.n	b5f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6014:	e9cd 5500 	strd	r5, r5, [sp]
   b6018:	462b      	mov	r3, r5
   b601a:	462a      	mov	r2, r5
   b601c:	2101      	movs	r1, #1
   b601e:	e7f5      	b.n	b600c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6020 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6020:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6022:	7800      	ldrb	r0, [r0, #0]
   b6024:	f7ff fdce 	bl	b5bc4 <hal_spi_transfer>
}
   b6028:	b2c0      	uxtb	r0, r0
   b602a:	bd08      	pop	{r3, pc}

000b602c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b602c:	b530      	push	{r4, r5, lr}
   b602e:	b087      	sub	sp, #28
   b6030:	4604      	mov	r4, r0
   b6032:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b6034:	9500      	str	r5, [sp, #0]
   b6036:	7800      	ldrb	r0, [r0, #0]
   b6038:	f7ff fde4 	bl	b5c04 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b603c:	b93d      	cbnz	r5, b604e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b603e:	7820      	ldrb	r0, [r4, #0]
   b6040:	a902      	add	r1, sp, #8
   b6042:	f7ff fde7 	bl	b5c14 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b6046:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b604a:	07db      	lsls	r3, r3, #31
   b604c:	d4f7      	bmi.n	b603e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b604e:	b007      	add	sp, #28
   b6050:	bd30      	pop	{r4, r5, pc}
	...

000b6054 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6054:	4b05      	ldr	r3, [pc, #20]	; (b606c <_GLOBAL__sub_I_System+0x18>)
   b6056:	2202      	movs	r2, #2
   b6058:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b605a:	4b05      	ldr	r3, [pc, #20]	; (b6070 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b605c:	4a05      	ldr	r2, [pc, #20]	; (b6074 <_GLOBAL__sub_I_System+0x20>)
   b605e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6060:	2000      	movs	r0, #0
   b6062:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6066:	f7ff be35 	b.w	b5cd4 <set_system_mode>
   b606a:	bf00      	nop
   b606c:	2003e6b0 	.word	0x2003e6b0
   b6070:	2003e6a4 	.word	0x2003e6a4
   b6074:	ffff0000 	.word	0xffff0000

000b6078 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6078:	4802      	ldr	r0, [pc, #8]	; (b6084 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b607a:	2300      	movs	r3, #0
   b607c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b607e:	f7ff bd11 	b.w	b5aa4 <os_mutex_recursive_create>
   b6082:	bf00      	nop
   b6084:	2003e6b4 	.word	0x2003e6b4

000b6088 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b608a:	4606      	mov	r6, r0
   b608c:	460d      	mov	r5, r1
  size_t n = 0;
   b608e:	188f      	adds	r7, r1, r2
   b6090:	2400      	movs	r4, #0
  while (size--) {
   b6092:	42bd      	cmp	r5, r7
   b6094:	d00c      	beq.n	b60b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6096:	6833      	ldr	r3, [r6, #0]
   b6098:	f815 1b01 	ldrb.w	r1, [r5], #1
   b609c:	689b      	ldr	r3, [r3, #8]
   b609e:	4630      	mov	r0, r6
   b60a0:	4798      	blx	r3
     if (chunk>=0)
   b60a2:	1e03      	subs	r3, r0, #0
   b60a4:	db01      	blt.n	b60aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b60a6:	441c      	add	r4, r3
  while (size--) {
   b60a8:	e7f3      	b.n	b6092 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b60aa:	2c00      	cmp	r4, #0
   b60ac:	bf08      	it	eq
   b60ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b60b0:	4620      	mov	r0, r4
   b60b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b60b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b60b4:	b508      	push	{r3, lr}
  return write(str);
   b60b6:	f7ff f82d 	bl	b5114 <_ZN5Print5writeEPKc>
}
   b60ba:	bd08      	pop	{r3, pc}

000b60bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b60bc:	6803      	ldr	r3, [r0, #0]
   b60be:	689b      	ldr	r3, [r3, #8]
   b60c0:	4718      	bx	r3

000b60c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b60c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b60c4:	210d      	movs	r1, #13
{
   b60c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b60c8:	f7ff fff8 	bl	b60bc <_ZN5Print5printEc>
  n += print('\n');
   b60cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b60ce:	4604      	mov	r4, r0
  n += print('\n');
   b60d0:	4628      	mov	r0, r5
   b60d2:	f7ff fff3 	bl	b60bc <_ZN5Print5printEc>
  return n;
}
   b60d6:	4420      	add	r0, r4
   b60d8:	bd38      	pop	{r3, r4, r5, pc}

000b60da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b60da:	b538      	push	{r3, r4, r5, lr}
   b60dc:	4605      	mov	r5, r0
  return write(str);
   b60de:	f7ff f819 	bl	b5114 <_ZN5Print5writeEPKc>
   b60e2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b60e4:	4628      	mov	r0, r5
   b60e6:	f7ff ffec 	bl	b60c2 <_ZN5Print7printlnEv>
  return n;
}
   b60ea:	4420      	add	r0, r4
   b60ec:	bd38      	pop	{r3, r4, r5, pc}

000b60ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b60ee:	b530      	push	{r4, r5, lr}
   b60f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b60f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b60f4:	2a01      	cmp	r2, #1
  *str = '\0';
   b60f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b60fa:	bf98      	it	ls
   b60fc:	220a      	movls	r2, #10
   b60fe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6100:	460d      	mov	r5, r1
   b6102:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6106:	fb01 5312 	mls	r3, r1, r2, r5
   b610a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b610e:	2b09      	cmp	r3, #9
   b6110:	bf94      	ite	ls
   b6112:	3330      	addls	r3, #48	; 0x30
   b6114:	3337      	addhi	r3, #55	; 0x37
   b6116:	b2db      	uxtb	r3, r3
  } while(n);
   b6118:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b611a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b611e:	d9ef      	bls.n	b6100 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6120:	4621      	mov	r1, r4
   b6122:	f7fe fff7 	bl	b5114 <_ZN5Print5writeEPKc>
}
   b6126:	b00b      	add	sp, #44	; 0x2c
   b6128:	bd30      	pop	{r4, r5, pc}

000b612a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b612e:	b086      	sub	sp, #24
   b6130:	af00      	add	r7, sp, #0
   b6132:	4605      	mov	r5, r0
   b6134:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6136:	1d38      	adds	r0, r7, #4
   b6138:	2114      	movs	r1, #20
{
   b613a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b613c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b613e:	f7ff fe6d 	bl	b5e1c <vsnprintf>

    if (n<bufsize)
   b6142:	2813      	cmp	r0, #19
   b6144:	d80e      	bhi.n	b6164 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6146:	1d39      	adds	r1, r7, #4
   b6148:	4628      	mov	r0, r5
   b614a:	f7fe ffe3 	bl	b5114 <_ZN5Print5writeEPKc>
   b614e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6150:	b11e      	cbz	r6, b615a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6152:	4628      	mov	r0, r5
   b6154:	f7ff ffb5 	bl	b60c2 <_ZN5Print7printlnEv>
   b6158:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b615a:	4620      	mov	r0, r4
   b615c:	3718      	adds	r7, #24
   b615e:	46bd      	mov	sp, r7
   b6160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6164:	f100 0308 	add.w	r3, r0, #8
   b6168:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b616c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b616e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6172:	4622      	mov	r2, r4
   b6174:	1c41      	adds	r1, r0, #1
   b6176:	683b      	ldr	r3, [r7, #0]
   b6178:	4668      	mov	r0, sp
   b617a:	f7ff fe4f 	bl	b5e1c <vsnprintf>
  return write(str);
   b617e:	4669      	mov	r1, sp
   b6180:	4628      	mov	r0, r5
   b6182:	f7fe ffc7 	bl	b5114 <_ZN5Print5writeEPKc>
   b6186:	4604      	mov	r4, r0
   b6188:	46c5      	mov	sp, r8
   b618a:	e7e1      	b.n	b6150 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b618c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b618c:	4b01      	ldr	r3, [pc, #4]	; (b6194 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b618e:	4a02      	ldr	r2, [pc, #8]	; (b6198 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6190:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6192:	4770      	bx	lr
   b6194:	2003e6b8 	.word	0x2003e6b8
   b6198:	000b6d00 	.word	0x000b6d00

000b619c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b619c:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b619e:	681a      	ldr	r2, [r3, #0]
   b61a0:	4b02      	ldr	r3, [pc, #8]	; (b61ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b61a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b61a4:	4770      	bx	lr
   b61a6:	bf00      	nop
   b61a8:	2003e150 	.word	0x2003e150
   b61ac:	2003e6bc 	.word	0x2003e6bc

000b61b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b61b0:	2100      	movs	r1, #0
   b61b2:	f7ff bd97 	b.w	b5ce4 <system_delay_ms>
	...

000b61b8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b61b8:	4b01      	ldr	r3, [pc, #4]	; (b61c0 <_GLOBAL__sub_I_RGB+0x8>)
   b61ba:	2200      	movs	r2, #0
   b61bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b61be:	4770      	bx	lr
   b61c0:	2003e6c0 	.word	0x2003e6c0

000b61c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b61c4:	4b01      	ldr	r3, [pc, #4]	; (b61cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b61c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b61c8:	4770      	bx	lr
   b61ca:	bf00      	nop
   b61cc:	2003e154 	.word	0x2003e154

000b61d0 <serialEventRun>:
{
   b61d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b61d2:	4b0b      	ldr	r3, [pc, #44]	; (b6200 <serialEventRun+0x30>)
   b61d4:	b143      	cbz	r3, b61e8 <serialEventRun+0x18>
   b61d6:	f000 f96d 	bl	b64b4 <_Z16_fetch_usbserialv>
   b61da:	6803      	ldr	r3, [r0, #0]
   b61dc:	691b      	ldr	r3, [r3, #16]
   b61de:	4798      	blx	r3
   b61e0:	2800      	cmp	r0, #0
   b61e2:	dd01      	ble.n	b61e8 <serialEventRun+0x18>
        serialEvent();
   b61e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b61e8:	4b06      	ldr	r3, [pc, #24]	; (b6204 <serialEventRun+0x34>)
   b61ea:	b143      	cbz	r3, b61fe <serialEventRun+0x2e>
   b61ec:	f000 fba6 	bl	b693c <_Z22__fetch_global_Serial1v>
   b61f0:	6803      	ldr	r3, [r0, #0]
   b61f2:	691b      	ldr	r3, [r3, #16]
   b61f4:	4798      	blx	r3
   b61f6:	2800      	cmp	r0, #0
   b61f8:	dd01      	ble.n	b61fe <serialEventRun+0x2e>
        serialEvent1();
   b61fa:	f3af 8000 	nop.w
}
   b61fe:	bd08      	pop	{r3, pc}
	...

000b6208 <_post_loop>:
{
   b6208:	b508      	push	{r3, lr}
	serialEventRun();
   b620a:	f7ff ffe1 	bl	b61d0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b620e:	f7ff fc41 	bl	b5a94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6212:	4b01      	ldr	r3, [pc, #4]	; (b6218 <_post_loop+0x10>)
   b6214:	6018      	str	r0, [r3, #0]
}
   b6216:	bd08      	pop	{r3, pc}
   b6218:	2003e740 	.word	0x2003e740

000b621c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b621c:	4805      	ldr	r0, [pc, #20]	; (b6234 <_Z33system_initialize_user_backup_ramv+0x18>)
   b621e:	4a06      	ldr	r2, [pc, #24]	; (b6238 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6220:	4906      	ldr	r1, [pc, #24]	; (b623c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6222:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6224:	1a12      	subs	r2, r2, r0
   b6226:	f000 fc05 	bl	b6a34 <memcpy>
    __backup_sram_signature = signature;
   b622a:	4b05      	ldr	r3, [pc, #20]	; (b6240 <_Z33system_initialize_user_backup_ramv+0x24>)
   b622c:	4a05      	ldr	r2, [pc, #20]	; (b6244 <_Z33system_initialize_user_backup_ramv+0x28>)
   b622e:	601a      	str	r2, [r3, #0]
}
   b6230:	bd08      	pop	{r3, pc}
   b6232:	bf00      	nop
   b6234:	2003f400 	.word	0x2003f400
   b6238:	2003f404 	.word	0x2003f404
   b623c:	000b6f14 	.word	0x000b6f14
   b6240:	2003f400 	.word	0x2003f400
   b6244:	9a271c1e 	.word	0x9a271c1e

000b6248 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6248:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b624a:	2300      	movs	r3, #0
   b624c:	9300      	str	r3, [sp, #0]
   b624e:	461a      	mov	r2, r3
   b6250:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6254:	f7ff fd58 	bl	b5d08 <system_ctrl_set_result>
}
   b6258:	b003      	add	sp, #12
   b625a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6260 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6260:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6262:	8843      	ldrh	r3, [r0, #2]
   b6264:	2b0a      	cmp	r3, #10
   b6266:	d008      	beq.n	b627a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6268:	2b50      	cmp	r3, #80	; 0x50
   b626a:	d10b      	bne.n	b6284 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b626c:	4b09      	ldr	r3, [pc, #36]	; (b6294 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b626e:	681b      	ldr	r3, [r3, #0]
   b6270:	b14b      	cbz	r3, b6286 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6272:	b003      	add	sp, #12
   b6274:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6278:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b627a:	f7ff ffe5 	bl	b6248 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b627e:	b003      	add	sp, #12
   b6280:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6284:	2300      	movs	r3, #0
   b6286:	9300      	str	r3, [sp, #0]
   b6288:	461a      	mov	r2, r3
   b628a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b628e:	f7ff fd3b 	bl	b5d08 <system_ctrl_set_result>
}
   b6292:	e7f4      	b.n	b627e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6294:	2003e6d4 	.word	0x2003e6d4

000b6298 <module_user_init_hook>:
{
   b6298:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b629a:	4812      	ldr	r0, [pc, #72]	; (b62e4 <module_user_init_hook+0x4c>)
   b629c:	2100      	movs	r1, #0
   b629e:	f7ff fdcd 	bl	b5e3c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b62a2:	4b11      	ldr	r3, [pc, #68]	; (b62e8 <module_user_init_hook+0x50>)
   b62a4:	681a      	ldr	r2, [r3, #0]
   b62a6:	4b11      	ldr	r3, [pc, #68]	; (b62ec <module_user_init_hook+0x54>)
   b62a8:	429a      	cmp	r2, r3
   b62aa:	4b11      	ldr	r3, [pc, #68]	; (b62f0 <module_user_init_hook+0x58>)
   b62ac:	bf0c      	ite	eq
   b62ae:	2201      	moveq	r2, #1
   b62b0:	2200      	movne	r2, #0
   b62b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b62b4:	d001      	beq.n	b62ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b62b6:	f7ff ffb1 	bl	b621c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b62ba:	f7ff fbdb 	bl	b5a74 <HAL_RNG_GetRandomNumber>
   b62be:	4604      	mov	r4, r0
    srand(seed);
   b62c0:	f000 fbce 	bl	b6a60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b62c4:	4b0b      	ldr	r3, [pc, #44]	; (b62f4 <module_user_init_hook+0x5c>)
   b62c6:	b113      	cbz	r3, b62ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b62c8:	4620      	mov	r0, r4
   b62ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b62ce:	2100      	movs	r1, #0
   b62d0:	4808      	ldr	r0, [pc, #32]	; (b62f4 <module_user_init_hook+0x5c>)
   b62d2:	f7ff fd8b 	bl	b5dec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b62d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b62da:	4807      	ldr	r0, [pc, #28]	; (b62f8 <module_user_init_hook+0x60>)
   b62dc:	2100      	movs	r1, #0
   b62de:	f7ff bd09 	b.w	b5cf4 <system_ctrl_set_app_request_handler>
   b62e2:	bf00      	nop
   b62e4:	000b61c5 	.word	0x000b61c5
   b62e8:	2003f400 	.word	0x2003f400
   b62ec:	9a271c1e 	.word	0x9a271c1e
   b62f0:	2003e6d0 	.word	0x2003e6d0
   b62f4:	00000000 	.word	0x00000000
   b62f8:	000b6261 	.word	0x000b6261

000b62fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62fc:	4770      	bx	lr

000b62fe <_ZN9IPAddressD0Ev>:
   b62fe:	b510      	push	{r4, lr}
   b6300:	2118      	movs	r1, #24
   b6302:	4604      	mov	r4, r0
   b6304:	f7fd fec7 	bl	b4096 <_ZdlPvj>
   b6308:	4620      	mov	r0, r4
   b630a:	bd10      	pop	{r4, pc}

000b630c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b630c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b630e:	7d03      	ldrb	r3, [r0, #20]
   b6310:	2b06      	cmp	r3, #6
{
   b6312:	b08d      	sub	sp, #52	; 0x34
   b6314:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6316:	f100 0704 	add.w	r7, r0, #4
   b631a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b631e:	d012      	beq.n	b6346 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6320:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6328:	220a      	movs	r2, #10
   b632a:	4630      	mov	r0, r6
   b632c:	f7ff fedf 	bl	b60ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6330:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6332:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6334:	d019      	beq.n	b636a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6336:	2c00      	cmp	r4, #0
   b6338:	d0f4      	beq.n	b6324 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b633a:	212e      	movs	r1, #46	; 0x2e
   b633c:	4630      	mov	r0, r6
   b633e:	f7ff febd 	bl	b60bc <_ZN5Print5printEc>
   b6342:	4404      	add	r4, r0
   b6344:	e7ee      	b.n	b6324 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6346:	232f      	movs	r3, #47	; 0x2f
   b6348:	466a      	mov	r2, sp
   b634a:	4639      	mov	r1, r7
   b634c:	200a      	movs	r0, #10
		buf[0] = 0;
   b634e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6352:	f7ff fbaf 	bl	b5ab4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6356:	4668      	mov	r0, sp
   b6358:	f000 fbb0 	bl	b6abc <strlen>
   b635c:	6833      	ldr	r3, [r6, #0]
   b635e:	4602      	mov	r2, r0
   b6360:	68db      	ldr	r3, [r3, #12]
   b6362:	4669      	mov	r1, sp
   b6364:	4630      	mov	r0, r6
   b6366:	4798      	blx	r3
   b6368:	4604      	mov	r4, r0
    }
    return n;
}
   b636a:	4620      	mov	r0, r4
   b636c:	b00d      	add	sp, #52	; 0x34
   b636e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6370 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6370:	b510      	push	{r4, lr}
   b6372:	4b05      	ldr	r3, [pc, #20]	; (b6388 <_ZN9IPAddressC1Ev+0x18>)
   b6374:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6376:	2211      	movs	r2, #17
   b6378:	f840 3b04 	str.w	r3, [r0], #4
   b637c:	2100      	movs	r1, #0
   b637e:	f000 fb67 	bl	b6a50 <memset>
}
   b6382:	4620      	mov	r0, r4
   b6384:	bd10      	pop	{r4, pc}
   b6386:	bf00      	nop
   b6388:	000b6d28 	.word	0x000b6d28

000b638c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b638c:	4603      	mov	r3, r0
   b638e:	4a07      	ldr	r2, [pc, #28]	; (b63ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6390:	b510      	push	{r4, lr}
   b6392:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6396:	f101 0210 	add.w	r2, r1, #16
   b639a:	f851 4b04 	ldr.w	r4, [r1], #4
   b639e:	f843 4b04 	str.w	r4, [r3], #4
   b63a2:	4291      	cmp	r1, r2
   b63a4:	d1f9      	bne.n	b639a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b63a6:	780a      	ldrb	r2, [r1, #0]
   b63a8:	701a      	strb	r2, [r3, #0]
}
   b63aa:	bd10      	pop	{r4, pc}
   b63ac:	000b6d28 	.word	0x000b6d28

000b63b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b63b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b63b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b63b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b63ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b63be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b63c2:	2304      	movs	r3, #4
   b63c4:	6041      	str	r1, [r0, #4]
   b63c6:	7503      	strb	r3, [r0, #20]
}
   b63c8:	bd10      	pop	{r4, pc}
	...

000b63cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63cc:	b507      	push	{r0, r1, r2, lr}
   b63ce:	4b06      	ldr	r3, [pc, #24]	; (b63e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b63d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63d2:	78cb      	ldrb	r3, [r1, #3]
   b63d4:	9300      	str	r3, [sp, #0]
   b63d6:	788b      	ldrb	r3, [r1, #2]
   b63d8:	784a      	ldrb	r2, [r1, #1]
   b63da:	7809      	ldrb	r1, [r1, #0]
   b63dc:	f7ff ffe8 	bl	b63b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63e0:	b003      	add	sp, #12
   b63e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b63e6:	bf00      	nop
   b63e8:	000b6d28 	.word	0x000b6d28

000b63ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63ec:	7441      	strb	r1, [r0, #17]
}
   b63ee:	4770      	bx	lr

000b63f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63f0:	4770      	bx	lr

000b63f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63f2:	4770      	bx	lr

000b63f4 <_ZN9USBSerial4readEv>:
{
   b63f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63f6:	2100      	movs	r1, #0
   b63f8:	7c00      	ldrb	r0, [r0, #16]
   b63fa:	f7ff fc4b 	bl	b5c94 <HAL_USB_USART_Receive_Data>
}
   b63fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6402:	bd08      	pop	{r3, pc}

000b6404 <_ZN9USBSerial4peekEv>:
{
   b6404:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6406:	2101      	movs	r1, #1
   b6408:	7c00      	ldrb	r0, [r0, #16]
   b640a:	f7ff fc43 	bl	b5c94 <HAL_USB_USART_Receive_Data>
}
   b640e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6412:	bd08      	pop	{r3, pc}

000b6414 <_ZN9USBSerial17availableForWriteEv>:
{
   b6414:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6416:	7c00      	ldrb	r0, [r0, #16]
   b6418:	f7ff fc34 	bl	b5c84 <HAL_USB_USART_Available_Data_For_Write>
}
   b641c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6420:	bd08      	pop	{r3, pc}

000b6422 <_ZN9USBSerial9availableEv>:
{
   b6422:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6424:	7c00      	ldrb	r0, [r0, #16]
   b6426:	f7ff fc25 	bl	b5c74 <HAL_USB_USART_Available_Data>
}
   b642a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b642e:	bd08      	pop	{r3, pc}

000b6430 <_ZN9USBSerial5writeEh>:
{
   b6430:	b513      	push	{r0, r1, r4, lr}
   b6432:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6434:	7c00      	ldrb	r0, [r0, #16]
{
   b6436:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6438:	f7ff fc24 	bl	b5c84 <HAL_USB_USART_Available_Data_For_Write>
   b643c:	2800      	cmp	r0, #0
   b643e:	9901      	ldr	r1, [sp, #4]
   b6440:	dc01      	bgt.n	b6446 <_ZN9USBSerial5writeEh+0x16>
   b6442:	7c60      	ldrb	r0, [r4, #17]
   b6444:	b120      	cbz	r0, b6450 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6446:	7c20      	ldrb	r0, [r4, #16]
   b6448:	f7ff fc2c 	bl	b5ca4 <HAL_USB_USART_Send_Data>
   b644c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6450:	b002      	add	sp, #8
   b6452:	bd10      	pop	{r4, pc}

000b6454 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6454:	7c00      	ldrb	r0, [r0, #16]
   b6456:	f7ff bc2d 	b.w	b5cb4 <HAL_USB_USART_Flush_Data>

000b645a <_ZN9USBSerialD0Ev>:
   b645a:	b510      	push	{r4, lr}
   b645c:	2114      	movs	r1, #20
   b645e:	4604      	mov	r4, r0
   b6460:	f7fd fe19 	bl	b4096 <_ZdlPvj>
   b6464:	4620      	mov	r0, r4
   b6466:	bd10      	pop	{r4, pc}

000b6468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6468:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b646a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b646e:	4604      	mov	r4, r0
   b6470:	4608      	mov	r0, r1
   b6472:	2100      	movs	r1, #0
   b6474:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6478:	4b04      	ldr	r3, [pc, #16]	; (b648c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b647a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b647c:	2301      	movs	r3, #1
  _serial = serial;
   b647e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6480:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6482:	4611      	mov	r1, r2
   b6484:	f7ff fbe6 	bl	b5c54 <HAL_USB_USART_Init>
}
   b6488:	4620      	mov	r0, r4
   b648a:	bd10      	pop	{r4, pc}
   b648c:	000b6d3c 	.word	0x000b6d3c

000b6490 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6490:	7c00      	ldrb	r0, [r0, #16]
   b6492:	2200      	movs	r2, #0
   b6494:	f7ff bbe6 	b.w	b5c64 <HAL_USB_USART_Begin>

000b6498 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b6498:	7c00      	ldrb	r0, [r0, #16]
   b649a:	f7ff bc13 	b.w	b5cc4 <HAL_USB_USART_Is_Enabled>

000b649e <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b649e:	f7ff bffb 	b.w	b6498 <_ZN9USBSerial9isEnabledEv>

000b64a2 <_Z19acquireSerialBufferv>:
{
   b64a2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b64a4:	2214      	movs	r2, #20
{
   b64a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b64a8:	2100      	movs	r1, #0
   b64aa:	f000 fad1 	bl	b6a50 <memset>
}
   b64ae:	4620      	mov	r0, r4
   b64b0:	bd10      	pop	{r4, pc}
	...

000b64b4 <_Z16_fetch_usbserialv>:
{
   b64b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64b6:	4c0f      	ldr	r4, [pc, #60]	; (b64f4 <_Z16_fetch_usbserialv+0x40>)
{
   b64b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b64ba:	a803      	add	r0, sp, #12
   b64bc:	f7ff fff1 	bl	b64a2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64c0:	7821      	ldrb	r1, [r4, #0]
   b64c2:	f3bf 8f5b 	dmb	ish
   b64c6:	f011 0101 	ands.w	r1, r1, #1
   b64ca:	d10f      	bne.n	b64ec <_Z16_fetch_usbserialv+0x38>
   b64cc:	4620      	mov	r0, r4
   b64ce:	9101      	str	r1, [sp, #4]
   b64d0:	f7fd fde3 	bl	b409a <__cxa_guard_acquire>
   b64d4:	9901      	ldr	r1, [sp, #4]
   b64d6:	b148      	cbz	r0, b64ec <_Z16_fetch_usbserialv+0x38>
   b64d8:	aa03      	add	r2, sp, #12
   b64da:	4807      	ldr	r0, [pc, #28]	; (b64f8 <_Z16_fetch_usbserialv+0x44>)
   b64dc:	f7ff ffc4 	bl	b6468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64e0:	4620      	mov	r0, r4
   b64e2:	f7fd fddf 	bl	b40a4 <__cxa_guard_release>
   b64e6:	4805      	ldr	r0, [pc, #20]	; (b64fc <_Z16_fetch_usbserialv+0x48>)
   b64e8:	f000 fa8e 	bl	b6a08 <atexit>
	return _usbserial;
}
   b64ec:	4802      	ldr	r0, [pc, #8]	; (b64f8 <_Z16_fetch_usbserialv+0x44>)
   b64ee:	b008      	add	sp, #32
   b64f0:	bd10      	pop	{r4, pc}
   b64f2:	bf00      	nop
   b64f4:	2003e6d8 	.word	0x2003e6d8
   b64f8:	2003e6dc 	.word	0x2003e6dc
   b64fc:	000b63f1 	.word	0x000b63f1

000b6500 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6500:	2200      	movs	r2, #0
   b6502:	6840      	ldr	r0, [r0, #4]
   b6504:	4611      	mov	r1, r2
   b6506:	f7ff bc21 	b.w	b5d4c <network_ready>

000b650a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b650a:	2200      	movs	r2, #0
   b650c:	6840      	ldr	r0, [r0, #4]
   b650e:	4611      	mov	r1, r2
   b6510:	f7ff bc3c 	b.w	b5d8c <network_listening>

000b6514 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6514:	2200      	movs	r2, #0
   b6516:	6840      	ldr	r0, [r0, #4]
   b6518:	4611      	mov	r1, r2
   b651a:	f7ff bc47 	b.w	b5dac <network_get_listen_timeout>

000b651e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b651e:	6840      	ldr	r0, [r0, #4]
   b6520:	2200      	movs	r2, #0
   b6522:	f7ff bc3b 	b.w	b5d9c <network_set_listen_timeout>

000b6526 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6526:	6840      	ldr	r0, [r0, #4]
   b6528:	2200      	movs	r2, #0
   b652a:	f081 0101 	eor.w	r1, r1, #1
   b652e:	f7ff bc25 	b.w	b5d7c <network_listen>

000b6532 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6532:	2300      	movs	r3, #0
   b6534:	6840      	ldr	r0, [r0, #4]
   b6536:	461a      	mov	r2, r3
   b6538:	4619      	mov	r1, r3
   b653a:	f7ff bc17 	b.w	b5d6c <network_off>

000b653e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b653e:	2300      	movs	r3, #0
   b6540:	6840      	ldr	r0, [r0, #4]
   b6542:	461a      	mov	r2, r3
   b6544:	4619      	mov	r1, r3
   b6546:	f7ff bc09 	b.w	b5d5c <network_on>

000b654a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b654a:	2200      	movs	r2, #0
   b654c:	6840      	ldr	r0, [r0, #4]
   b654e:	4611      	mov	r1, r2
   b6550:	f7ff bbec 	b.w	b5d2c <network_connecting>

000b6554 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6554:	6840      	ldr	r0, [r0, #4]
   b6556:	2200      	movs	r2, #0
   b6558:	2102      	movs	r1, #2
   b655a:	f7ff bbef 	b.w	b5d3c <network_disconnect>

000b655e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b655e:	2300      	movs	r3, #0
   b6560:	6840      	ldr	r0, [r0, #4]
   b6562:	461a      	mov	r2, r3
   b6564:	f7ff bbda 	b.w	b5d1c <network_connect>

000b6568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6568:	4b08      	ldr	r3, [pc, #32]	; (b658c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b656a:	b510      	push	{r4, lr}
   b656c:	2428      	movs	r4, #40	; 0x28
   b656e:	4622      	mov	r2, r4
   b6570:	4618      	mov	r0, r3
   b6572:	2100      	movs	r1, #0
   b6574:	f000 fa6c 	bl	b6a50 <memset>
   b6578:	4b05      	ldr	r3, [pc, #20]	; (b6590 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b657a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b657c:	f04f 32ff 	mov.w	r2, #4294967295
   b6580:	6042      	str	r2, [r0, #4]
   b6582:	2204      	movs	r2, #4
   b6584:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6586:	4a03      	ldr	r2, [pc, #12]	; (b6594 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6588:	601a      	str	r2, [r3, #0]
   b658a:	bd10      	pop	{r4, pc}
   b658c:	2003e6f8 	.word	0x2003e6f8
   b6590:	2003e6f0 	.word	0x2003e6f0
   b6594:	000b6d6c 	.word	0x000b6d6c

000b6598 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6598:	4770      	bx	lr

000b659a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b659a:	7441      	strb	r1, [r0, #17]
}
   b659c:	4770      	bx	lr

000b659e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b659e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b65a0:	7c00      	ldrb	r0, [r0, #16]
   b65a2:	f7ff fabf 	bl	b5b24 <hal_usart_available_data_for_write>
}
   b65a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65aa:	bd08      	pop	{r3, pc}

000b65ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b65ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b65ae:	7c00      	ldrb	r0, [r0, #16]
   b65b0:	f7ff fa90 	bl	b5ad4 <hal_usart_available>
}
   b65b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65b8:	bd08      	pop	{r3, pc}

000b65ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b65ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b65bc:	7c00      	ldrb	r0, [r0, #16]
   b65be:	f7ff fa99 	bl	b5af4 <hal_usart_peek>
}
   b65c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b65c6:	bd08      	pop	{r3, pc}

000b65c8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b65c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b65ca:	7c00      	ldrb	r0, [r0, #16]
   b65cc:	f7ff fa8a 	bl	b5ae4 <hal_usart_read>
}
   b65d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b65d4:	bd08      	pop	{r3, pc}

000b65d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b65d6:	7c00      	ldrb	r0, [r0, #16]
   b65d8:	f7ff ba94 	b.w	b5b04 <hal_usart_flush>

000b65dc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b65dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65de:	7c45      	ldrb	r5, [r0, #17]
{
   b65e0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65e2:	b12d      	cbz	r5, b65f0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b65e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b65e6:	b003      	add	sp, #12
   b65e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b65ec:	f7ff ba6a 	b.w	b5ac4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65f0:	7c00      	ldrb	r0, [r0, #16]
   b65f2:	9101      	str	r1, [sp, #4]
   b65f4:	f7ff fa96 	bl	b5b24 <hal_usart_available_data_for_write>
   b65f8:	2800      	cmp	r0, #0
   b65fa:	9901      	ldr	r1, [sp, #4]
   b65fc:	dcf2      	bgt.n	b65e4 <_ZN11USARTSerial5writeEh+0x8>
}
   b65fe:	4628      	mov	r0, r5
   b6600:	b003      	add	sp, #12
   b6602:	bd30      	pop	{r4, r5, pc}

000b6604 <_ZN11USARTSerialD0Ev>:
   b6604:	b510      	push	{r4, lr}
   b6606:	2114      	movs	r1, #20
   b6608:	4604      	mov	r4, r0
   b660a:	f7fd fd44 	bl	b4096 <_ZdlPvj>
   b660e:	4620      	mov	r0, r4
   b6610:	bd10      	pop	{r4, pc}
	...

000b6614 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6614:	b510      	push	{r4, lr}
   b6616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b661a:	4604      	mov	r4, r0
   b661c:	4608      	mov	r0, r1
   b661e:	4611      	mov	r1, r2
   b6620:	2200      	movs	r2, #0
   b6622:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6626:	4b04      	ldr	r3, [pc, #16]	; (b6638 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6628:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b662a:	2301      	movs	r3, #1
  _serial = serial;
   b662c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b662e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6630:	f7ff fa80 	bl	b5b34 <hal_usart_init_ex>
}
   b6634:	4620      	mov	r0, r4
   b6636:	bd10      	pop	{r4, pc}
   b6638:	000b6da8 	.word	0x000b6da8

000b663c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b663c:	4770      	bx	lr

000b663e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b663e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6640:	4606      	mov	r6, r0
   b6642:	4615      	mov	r5, r2
   b6644:	460c      	mov	r4, r1
   b6646:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6648:	42bc      	cmp	r4, r7
   b664a:	d006      	beq.n	b665a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b664c:	6833      	ldr	r3, [r6, #0]
   b664e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6652:	689b      	ldr	r3, [r3, #8]
   b6654:	4630      	mov	r0, r6
   b6656:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6658:	e7f6      	b.n	b6648 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b665a:	4628      	mov	r0, r5
   b665c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b665e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b665e:	7c00      	ldrb	r0, [r0, #16]
   b6660:	2200      	movs	r2, #0
   b6662:	f7ff ba6f 	b.w	b5b44 <hal_i2c_write>

000b6666 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6666:	7c00      	ldrb	r0, [r0, #16]
   b6668:	2100      	movs	r1, #0
   b666a:	f7ff ba73 	b.w	b5b54 <hal_i2c_available>

000b666e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b666e:	7c00      	ldrb	r0, [r0, #16]
   b6670:	2100      	movs	r1, #0
   b6672:	f7ff ba77 	b.w	b5b64 <hal_i2c_read>

000b6676 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6676:	7c00      	ldrb	r0, [r0, #16]
   b6678:	2100      	movs	r1, #0
   b667a:	f7ff ba7b 	b.w	b5b74 <hal_i2c_peek>

000b667e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b667e:	7c00      	ldrb	r0, [r0, #16]
   b6680:	2100      	movs	r1, #0
   b6682:	f7ff ba7f 	b.w	b5b84 <hal_i2c_flush>

000b6686 <_ZN7TwoWireD0Ev>:
   b6686:	b510      	push	{r4, lr}
   b6688:	2114      	movs	r1, #20
   b668a:	4604      	mov	r4, r0
   b668c:	f7fd fd03 	bl	b4096 <_ZdlPvj>
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}

000b6694 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6694:	b538      	push	{r3, r4, r5, lr}
   b6696:	4604      	mov	r4, r0
   b6698:	4615      	mov	r5, r2
   b669a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b669e:	2200      	movs	r2, #0
   b66a0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b66a4:	4b09      	ldr	r3, [pc, #36]	; (b66cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b66a6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b66a8:	4608      	mov	r0, r1
   b66aa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b66ac:	4629      	mov	r1, r5
   b66ae:	f7ff fa79 	bl	b5ba4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66b2:	30bf      	adds	r0, #191	; 0xbf
   b66b4:	d108      	bne.n	b66c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b66b6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66b8:	07db      	lsls	r3, r3, #31
   b66ba:	d505      	bpl.n	b66c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b66bc:	6868      	ldr	r0, [r5, #4]
   b66be:	f7ff fba5 	bl	b5e0c <free>
    free(conf.tx_buffer);
   b66c2:	68e8      	ldr	r0, [r5, #12]
   b66c4:	f7ff fba2 	bl	b5e0c <free>
}
   b66c8:	4620      	mov	r0, r4
   b66ca:	bd38      	pop	{r3, r4, r5, pc}
   b66cc:	000b6dd8 	.word	0x000b6dd8

000b66d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b66d0:	2300      	movs	r3, #0
   b66d2:	6840      	ldr	r0, [r0, #4]
   b66d4:	461a      	mov	r2, r3
   b66d6:	f7ff bb21 	b.w	b5d1c <network_connect>

000b66da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b66da:	6840      	ldr	r0, [r0, #4]
   b66dc:	2200      	movs	r2, #0
   b66de:	2102      	movs	r1, #2
   b66e0:	f7ff bb2c 	b.w	b5d3c <network_disconnect>

000b66e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b66e4:	2200      	movs	r2, #0
   b66e6:	6840      	ldr	r0, [r0, #4]
   b66e8:	4611      	mov	r1, r2
   b66ea:	f7ff bb1f 	b.w	b5d2c <network_connecting>

000b66ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b66ee:	2200      	movs	r2, #0
   b66f0:	6840      	ldr	r0, [r0, #4]
   b66f2:	4611      	mov	r1, r2
   b66f4:	f7ff bb2a 	b.w	b5d4c <network_ready>

000b66f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b66f8:	2300      	movs	r3, #0
   b66fa:	6840      	ldr	r0, [r0, #4]
   b66fc:	461a      	mov	r2, r3
   b66fe:	4619      	mov	r1, r3
   b6700:	f7ff bb2c 	b.w	b5d5c <network_on>

000b6704 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6704:	2300      	movs	r3, #0
   b6706:	6840      	ldr	r0, [r0, #4]
   b6708:	461a      	mov	r2, r3
   b670a:	4619      	mov	r1, r3
   b670c:	f7ff bb2e 	b.w	b5d6c <network_off>

000b6710 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6710:	6840      	ldr	r0, [r0, #4]
   b6712:	2100      	movs	r1, #0
   b6714:	f7ff bb52 	b.w	b5dbc <network_is_on>

000b6718 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6718:	6840      	ldr	r0, [r0, #4]
   b671a:	2100      	movs	r1, #0
   b671c:	f7ff bb56 	b.w	b5dcc <network_is_off>

000b6720 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6720:	6840      	ldr	r0, [r0, #4]
   b6722:	2200      	movs	r2, #0
   b6724:	f081 0101 	eor.w	r1, r1, #1
   b6728:	f7ff bb28 	b.w	b5d7c <network_listen>

000b672c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b672c:	6840      	ldr	r0, [r0, #4]
   b672e:	2200      	movs	r2, #0
   b6730:	f7ff bb34 	b.w	b5d9c <network_set_listen_timeout>

000b6734 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6734:	2200      	movs	r2, #0
   b6736:	6840      	ldr	r0, [r0, #4]
   b6738:	4611      	mov	r1, r2
   b673a:	f7ff bb37 	b.w	b5dac <network_get_listen_timeout>

000b673e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b673e:	2200      	movs	r2, #0
   b6740:	6840      	ldr	r0, [r0, #4]
   b6742:	4611      	mov	r1, r2
   b6744:	f7ff bb22 	b.w	b5d8c <network_listening>

000b6748 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b674c:	b095      	sub	sp, #84	; 0x54
   b674e:	4614      	mov	r4, r2
   b6750:	460d      	mov	r5, r1
   b6752:	4607      	mov	r7, r0
    IPAddress addr;
   b6754:	f7ff fe0c 	bl	b6370 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6758:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b675a:	221c      	movs	r2, #28
   b675c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b675e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6760:	f000 f976 	bl	b6a50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6764:	2340      	movs	r3, #64	; 0x40
   b6766:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6768:	4620      	mov	r0, r4
   b676a:	466b      	mov	r3, sp
   b676c:	aa0c      	add	r2, sp, #48	; 0x30
   b676e:	2100      	movs	r1, #0
   b6770:	f7ff f960 	bl	b5a34 <netdb_getaddrinfo>
    if (!r) {
   b6774:	4604      	mov	r4, r0
   b6776:	2800      	cmp	r0, #0
   b6778:	d14b      	bne.n	b6812 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b677a:	4602      	mov	r2, r0
   b677c:	2101      	movs	r1, #1
   b677e:	6868      	ldr	r0, [r5, #4]
   b6780:	f7ff fae4 	bl	b5d4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6784:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6786:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6788:	4622      	mov	r2, r4
   b678a:	6868      	ldr	r0, [r5, #4]
   b678c:	f7ff fade 	bl	b5d4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6790:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6792:	4681      	mov	r9, r0
        bool ok = false;
   b6794:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6796:	2e00      	cmp	r6, #0
   b6798:	d03b      	beq.n	b6812 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b679a:	2900      	cmp	r1, #0
   b679c:	d139      	bne.n	b6812 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b679e:	6873      	ldr	r3, [r6, #4]
   b67a0:	2b02      	cmp	r3, #2
   b67a2:	d003      	beq.n	b67ac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b67a4:	2b0a      	cmp	r3, #10
   b67a6:	d011      	beq.n	b67cc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67a8:	69f6      	ldr	r6, [r6, #28]
   b67aa:	e7f4      	b.n	b6796 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b67ac:	f1b8 0f00 	cmp.w	r8, #0
   b67b0:	d0fa      	beq.n	b67a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b67b2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b67b4:	a806      	add	r0, sp, #24
   b67b6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b67b8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b67ba:	f7ff fe07 	bl	b63cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67c0:	1d3c      	adds	r4, r7, #4
   b67c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67c4:	682b      	ldr	r3, [r5, #0]
   b67c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67c8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b67ca:	e7ed      	b.n	b67a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b67cc:	f1b9 0f00 	cmp.w	r9, #0
   b67d0:	d0ea      	beq.n	b67a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b67d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b67d4:	2210      	movs	r2, #16
   b67d6:	a801      	add	r0, sp, #4
   b67d8:	f000 f93a 	bl	b6a50 <memset>
                    a.v = 6;
   b67dc:	2306      	movs	r3, #6
   b67de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b67e2:	ad01      	add	r5, sp, #4
   b67e4:	f104 0308 	add.w	r3, r4, #8
   b67e8:	3418      	adds	r4, #24
   b67ea:	6818      	ldr	r0, [r3, #0]
   b67ec:	6859      	ldr	r1, [r3, #4]
   b67ee:	462a      	mov	r2, r5
   b67f0:	c203      	stmia	r2!, {r0, r1}
   b67f2:	3308      	adds	r3, #8
   b67f4:	42a3      	cmp	r3, r4
   b67f6:	4615      	mov	r5, r2
   b67f8:	d1f7      	bne.n	b67ea <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b67fa:	a901      	add	r1, sp, #4
   b67fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b67fe:	ad07      	add	r5, sp, #28
   b6800:	f7ff fdc4 	bl	b638c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6806:	1d3c      	adds	r4, r7, #4
   b6808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b680a:	682b      	ldr	r3, [r5, #0]
   b680c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b680e:	4649      	mov	r1, r9
   b6810:	e7ca      	b.n	b67a8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6812:	9800      	ldr	r0, [sp, #0]
   b6814:	f7ff f906 	bl	b5a24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6818:	4638      	mov	r0, r7
   b681a:	b015      	add	sp, #84	; 0x54
   b681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6820 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6820:	4b02      	ldr	r3, [pc, #8]	; (b682c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6822:	4a03      	ldr	r2, [pc, #12]	; (b6830 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6824:	601a      	str	r2, [r3, #0]
   b6826:	2200      	movs	r2, #0
   b6828:	605a      	str	r2, [r3, #4]

} // spark
   b682a:	4770      	bx	lr
   b682c:	2003e720 	.word	0x2003e720
   b6830:	000b6e00 	.word	0x000b6e00

000b6834 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6834:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6836:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6838:	d902      	bls.n	b6840 <pinAvailable+0xc>
    return false;
   b683a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b683c:	b002      	add	sp, #8
   b683e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6840:	f1a0 030b 	sub.w	r3, r0, #11
   b6844:	2b02      	cmp	r3, #2
   b6846:	d81a      	bhi.n	b687e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6848:	4c17      	ldr	r4, [pc, #92]	; (b68a8 <pinAvailable+0x74>)
   b684a:	7821      	ldrb	r1, [r4, #0]
   b684c:	f3bf 8f5b 	dmb	ish
   b6850:	f011 0101 	ands.w	r1, r1, #1
   b6854:	d10b      	bne.n	b686e <pinAvailable+0x3a>
   b6856:	4620      	mov	r0, r4
   b6858:	9101      	str	r1, [sp, #4]
   b685a:	f7fd fc1e 	bl	b409a <__cxa_guard_acquire>
   b685e:	9901      	ldr	r1, [sp, #4]
   b6860:	b128      	cbz	r0, b686e <pinAvailable+0x3a>
   b6862:	4812      	ldr	r0, [pc, #72]	; (b68ac <pinAvailable+0x78>)
   b6864:	f7ff fb36 	bl	b5ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6868:	4620      	mov	r0, r4
   b686a:	f7fd fc1b 	bl	b40a4 <__cxa_guard_release>
   b686e:	4b0f      	ldr	r3, [pc, #60]	; (b68ac <pinAvailable+0x78>)
   b6870:	7818      	ldrb	r0, [r3, #0]
   b6872:	f7ff f9b7 	bl	b5be4 <hal_spi_is_enabled>
   b6876:	2800      	cmp	r0, #0
   b6878:	d1df      	bne.n	b683a <pinAvailable+0x6>
  return true; // 'pin' is available
   b687a:	2001      	movs	r0, #1
   b687c:	e7de      	b.n	b683c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b687e:	2801      	cmp	r0, #1
   b6880:	d809      	bhi.n	b6896 <pinAvailable+0x62>
   b6882:	f000 f89b 	bl	b69bc <_Z19__fetch_global_Wirev>
   b6886:	2100      	movs	r1, #0
   b6888:	7c00      	ldrb	r0, [r0, #16]
   b688a:	f7ff f983 	bl	b5b94 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b688e:	f080 0001 	eor.w	r0, r0, #1
   b6892:	b2c0      	uxtb	r0, r0
   b6894:	e7d2      	b.n	b683c <pinAvailable+0x8>
   b6896:	3809      	subs	r0, #9
   b6898:	2801      	cmp	r0, #1
   b689a:	d8ee      	bhi.n	b687a <pinAvailable+0x46>
   b689c:	f000 f84e 	bl	b693c <_Z22__fetch_global_Serial1v>
   b68a0:	7c00      	ldrb	r0, [r0, #16]
   b68a2:	f7ff f937 	bl	b5b14 <hal_usart_is_enabled>
   b68a6:	e7f2      	b.n	b688e <pinAvailable+0x5a>
   b68a8:	2003e1bc 	.word	0x2003e1bc
   b68ac:	2003e1c0 	.word	0x2003e1c0

000b68b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b68b0:	2823      	cmp	r0, #35	; 0x23
{
   b68b2:	b538      	push	{r3, r4, r5, lr}
   b68b4:	4604      	mov	r4, r0
   b68b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b68b8:	d80a      	bhi.n	b68d0 <pinMode+0x20>
   b68ba:	29ff      	cmp	r1, #255	; 0xff
   b68bc:	d008      	beq.n	b68d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b68be:	f7ff ffb9 	bl	b6834 <pinAvailable>
   b68c2:	b128      	cbz	r0, b68d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b68c4:	4629      	mov	r1, r5
   b68c6:	4620      	mov	r0, r4
}
   b68c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b68cc:	f7ff b8ba 	b.w	b5a44 <HAL_Pin_Mode>
}
   b68d0:	bd38      	pop	{r3, r4, r5, pc}

000b68d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b68d2:	b538      	push	{r3, r4, r5, lr}
   b68d4:	4604      	mov	r4, r0
   b68d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b68d8:	f7ff f8bc 	bl	b5a54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b68dc:	28ff      	cmp	r0, #255	; 0xff
   b68de:	d010      	beq.n	b6902 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b68e0:	2806      	cmp	r0, #6
   b68e2:	d804      	bhi.n	b68ee <digitalWrite+0x1c>
   b68e4:	234d      	movs	r3, #77	; 0x4d
   b68e6:	fa23 f000 	lsr.w	r0, r3, r0
   b68ea:	07c3      	lsls	r3, r0, #31
   b68ec:	d409      	bmi.n	b6902 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b68ee:	4620      	mov	r0, r4
   b68f0:	f7ff ffa0 	bl	b6834 <pinAvailable>
   b68f4:	b128      	cbz	r0, b6902 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b68f6:	4629      	mov	r1, r5
   b68f8:	4620      	mov	r0, r4
}
   b68fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b68fe:	f7ff b8b1 	b.w	b5a64 <HAL_GPIO_Write>
}
   b6902:	bd38      	pop	{r3, r4, r5, pc}

000b6904 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6904:	4770      	bx	lr
	...

000b6908 <_Z20acquireSerial1Bufferv>:
{
   b6908:	b538      	push	{r3, r4, r5, lr}
   b690a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b690c:	2514      	movs	r5, #20
   b690e:	462a      	mov	r2, r5
   b6910:	2100      	movs	r1, #0
   b6912:	f000 f89d 	bl	b6a50 <memset>
   b6916:	8025      	strh	r5, [r4, #0]
   b6918:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b691a:	4907      	ldr	r1, [pc, #28]	; (b6938 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b691c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b691e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6920:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6922:	f000 f86f 	bl	b6a04 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6926:	4904      	ldr	r1, [pc, #16]	; (b6938 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6928:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b692a:	4628      	mov	r0, r5
   b692c:	f000 f86a 	bl	b6a04 <_ZnajRKSt9nothrow_t>
    };
   b6930:	60e0      	str	r0, [r4, #12]
}
   b6932:	4620      	mov	r0, r4
   b6934:	bd38      	pop	{r3, r4, r5, pc}
   b6936:	bf00      	nop
   b6938:	000b6e34 	.word	0x000b6e34

000b693c <_Z22__fetch_global_Serial1v>:
{
   b693c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b693e:	4d0e      	ldr	r5, [pc, #56]	; (b6978 <_Z22__fetch_global_Serial1v+0x3c>)
   b6940:	7829      	ldrb	r1, [r5, #0]
   b6942:	f3bf 8f5b 	dmb	ish
   b6946:	f011 0401 	ands.w	r4, r1, #1
{
   b694a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b694c:	d111      	bne.n	b6972 <_Z22__fetch_global_Serial1v+0x36>
   b694e:	4628      	mov	r0, r5
   b6950:	f7fd fba3 	bl	b409a <__cxa_guard_acquire>
   b6954:	b168      	cbz	r0, b6972 <_Z22__fetch_global_Serial1v+0x36>
   b6956:	a801      	add	r0, sp, #4
   b6958:	f7ff ffd6 	bl	b6908 <_Z20acquireSerial1Bufferv>
   b695c:	aa01      	add	r2, sp, #4
   b695e:	4621      	mov	r1, r4
   b6960:	4806      	ldr	r0, [pc, #24]	; (b697c <_Z22__fetch_global_Serial1v+0x40>)
   b6962:	f7ff fe57 	bl	b6614 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6966:	4628      	mov	r0, r5
   b6968:	f7fd fb9c 	bl	b40a4 <__cxa_guard_release>
   b696c:	4804      	ldr	r0, [pc, #16]	; (b6980 <_Z22__fetch_global_Serial1v+0x44>)
   b696e:	f000 f84b 	bl	b6a08 <atexit>
    return serial1;
}
   b6972:	4802      	ldr	r0, [pc, #8]	; (b697c <_Z22__fetch_global_Serial1v+0x40>)
   b6974:	b007      	add	sp, #28
   b6976:	bd30      	pop	{r4, r5, pc}
   b6978:	2003e728 	.word	0x2003e728
   b697c:	2003e72c 	.word	0x2003e72c
   b6980:	000b6905 	.word	0x000b6905

000b6984 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6984:	4770      	bx	lr
	...

000b6988 <_Z17acquireWireBufferv>:
{
   b6988:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b698a:	4b0a      	ldr	r3, [pc, #40]	; (b69b4 <_Z17acquireWireBufferv+0x2c>)
   b698c:	6003      	str	r3, [r0, #0]
   b698e:	2301      	movs	r3, #1
{
   b6990:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6992:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6994:	4908      	ldr	r1, [pc, #32]	; (b69b8 <_Z17acquireWireBufferv+0x30>)
   b6996:	2020      	movs	r0, #32
   b6998:	f000 f834 	bl	b6a04 <_ZnajRKSt9nothrow_t>
	};
   b699c:	2520      	movs	r5, #32
   b699e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69a0:	4905      	ldr	r1, [pc, #20]	; (b69b8 <_Z17acquireWireBufferv+0x30>)
	};
   b69a2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69a4:	4628      	mov	r0, r5
   b69a6:	f000 f82d 	bl	b6a04 <_ZnajRKSt9nothrow_t>
	};
   b69aa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b69ae:	4620      	mov	r0, r4
   b69b0:	bd38      	pop	{r3, r4, r5, pc}
   b69b2:	bf00      	nop
   b69b4:	00010018 	.word	0x00010018
   b69b8:	000b6e34 	.word	0x000b6e34

000b69bc <_Z19__fetch_global_Wirev>:
{
   b69bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69be:	4d0e      	ldr	r5, [pc, #56]	; (b69f8 <_Z19__fetch_global_Wirev+0x3c>)
   b69c0:	7829      	ldrb	r1, [r5, #0]
   b69c2:	f3bf 8f5b 	dmb	ish
   b69c6:	f011 0401 	ands.w	r4, r1, #1
{
   b69ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69cc:	d111      	bne.n	b69f2 <_Z19__fetch_global_Wirev+0x36>
   b69ce:	4628      	mov	r0, r5
   b69d0:	f7fd fb63 	bl	b409a <__cxa_guard_acquire>
   b69d4:	b168      	cbz	r0, b69f2 <_Z19__fetch_global_Wirev+0x36>
   b69d6:	4668      	mov	r0, sp
   b69d8:	f7ff ffd6 	bl	b6988 <_Z17acquireWireBufferv>
   b69dc:	466a      	mov	r2, sp
   b69de:	4621      	mov	r1, r4
   b69e0:	4806      	ldr	r0, [pc, #24]	; (b69fc <_Z19__fetch_global_Wirev+0x40>)
   b69e2:	f7ff fe57 	bl	b6694 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b69e6:	4628      	mov	r0, r5
   b69e8:	f7fd fb5c 	bl	b40a4 <__cxa_guard_release>
   b69ec:	4804      	ldr	r0, [pc, #16]	; (b6a00 <_Z19__fetch_global_Wirev+0x44>)
   b69ee:	f000 f80b 	bl	b6a08 <atexit>
	return wire;
}
   b69f2:	4802      	ldr	r0, [pc, #8]	; (b69fc <_Z19__fetch_global_Wirev+0x40>)
   b69f4:	b007      	add	sp, #28
   b69f6:	bd30      	pop	{r4, r5, pc}
   b69f8:	2003e744 	.word	0x2003e744
   b69fc:	2003e748 	.word	0x2003e748
   b6a00:	000b6985 	.word	0x000b6985

000b6a04 <_ZnajRKSt9nothrow_t>:
   b6a04:	f7fd bb45 	b.w	b4092 <_Znaj>

000b6a08 <atexit>:
   b6a08:	2300      	movs	r3, #0
   b6a0a:	4601      	mov	r1, r0
   b6a0c:	461a      	mov	r2, r3
   b6a0e:	4618      	mov	r0, r3
   b6a10:	f000 b85c 	b.w	b6acc <__register_exitproc>

000b6a14 <memcmp>:
   b6a14:	b510      	push	{r4, lr}
   b6a16:	3901      	subs	r1, #1
   b6a18:	4402      	add	r2, r0
   b6a1a:	4290      	cmp	r0, r2
   b6a1c:	d101      	bne.n	b6a22 <memcmp+0xe>
   b6a1e:	2000      	movs	r0, #0
   b6a20:	e005      	b.n	b6a2e <memcmp+0x1a>
   b6a22:	7803      	ldrb	r3, [r0, #0]
   b6a24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6a28:	42a3      	cmp	r3, r4
   b6a2a:	d001      	beq.n	b6a30 <memcmp+0x1c>
   b6a2c:	1b18      	subs	r0, r3, r4
   b6a2e:	bd10      	pop	{r4, pc}
   b6a30:	3001      	adds	r0, #1
   b6a32:	e7f2      	b.n	b6a1a <memcmp+0x6>

000b6a34 <memcpy>:
   b6a34:	440a      	add	r2, r1
   b6a36:	4291      	cmp	r1, r2
   b6a38:	f100 33ff 	add.w	r3, r0, #4294967295
   b6a3c:	d100      	bne.n	b6a40 <memcpy+0xc>
   b6a3e:	4770      	bx	lr
   b6a40:	b510      	push	{r4, lr}
   b6a42:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6a46:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6a4a:	4291      	cmp	r1, r2
   b6a4c:	d1f9      	bne.n	b6a42 <memcpy+0xe>
   b6a4e:	bd10      	pop	{r4, pc}

000b6a50 <memset>:
   b6a50:	4402      	add	r2, r0
   b6a52:	4603      	mov	r3, r0
   b6a54:	4293      	cmp	r3, r2
   b6a56:	d100      	bne.n	b6a5a <memset+0xa>
   b6a58:	4770      	bx	lr
   b6a5a:	f803 1b01 	strb.w	r1, [r3], #1
   b6a5e:	e7f9      	b.n	b6a54 <memset+0x4>

000b6a60 <srand>:
   b6a60:	b538      	push	{r3, r4, r5, lr}
   b6a62:	4b10      	ldr	r3, [pc, #64]	; (b6aa4 <srand+0x44>)
   b6a64:	681d      	ldr	r5, [r3, #0]
   b6a66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a68:	4604      	mov	r4, r0
   b6a6a:	b9b3      	cbnz	r3, b6a9a <srand+0x3a>
   b6a6c:	2018      	movs	r0, #24
   b6a6e:	f7ff f9c5 	bl	b5dfc <malloc>
   b6a72:	4602      	mov	r2, r0
   b6a74:	63a8      	str	r0, [r5, #56]	; 0x38
   b6a76:	b920      	cbnz	r0, b6a82 <srand+0x22>
   b6a78:	4b0b      	ldr	r3, [pc, #44]	; (b6aa8 <srand+0x48>)
   b6a7a:	480c      	ldr	r0, [pc, #48]	; (b6aac <srand+0x4c>)
   b6a7c:	2142      	movs	r1, #66	; 0x42
   b6a7e:	f7ff f9d5 	bl	b5e2c <__assert_func>
   b6a82:	490b      	ldr	r1, [pc, #44]	; (b6ab0 <srand+0x50>)
   b6a84:	4b0b      	ldr	r3, [pc, #44]	; (b6ab4 <srand+0x54>)
   b6a86:	e9c0 1300 	strd	r1, r3, [r0]
   b6a8a:	4b0b      	ldr	r3, [pc, #44]	; (b6ab8 <srand+0x58>)
   b6a8c:	6083      	str	r3, [r0, #8]
   b6a8e:	230b      	movs	r3, #11
   b6a90:	8183      	strh	r3, [r0, #12]
   b6a92:	2100      	movs	r1, #0
   b6a94:	2001      	movs	r0, #1
   b6a96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6a9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a9c:	2200      	movs	r2, #0
   b6a9e:	611c      	str	r4, [r3, #16]
   b6aa0:	615a      	str	r2, [r3, #20]
   b6aa2:	bd38      	pop	{r3, r4, r5, pc}
   b6aa4:	2003e154 	.word	0x2003e154
   b6aa8:	000b6e35 	.word	0x000b6e35
   b6aac:	000b6e4c 	.word	0x000b6e4c
   b6ab0:	abcd330e 	.word	0xabcd330e
   b6ab4:	e66d1234 	.word	0xe66d1234
   b6ab8:	0005deec 	.word	0x0005deec

000b6abc <strlen>:
   b6abc:	4603      	mov	r3, r0
   b6abe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6ac2:	2a00      	cmp	r2, #0
   b6ac4:	d1fb      	bne.n	b6abe <strlen+0x2>
   b6ac6:	1a18      	subs	r0, r3, r0
   b6ac8:	3801      	subs	r0, #1
   b6aca:	4770      	bx	lr

000b6acc <__register_exitproc>:
   b6acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6ad0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6b8c <__register_exitproc+0xc0>
   b6ad4:	4606      	mov	r6, r0
   b6ad6:	f8d8 0000 	ldr.w	r0, [r8]
   b6ada:	461f      	mov	r7, r3
   b6adc:	460d      	mov	r5, r1
   b6ade:	4691      	mov	r9, r2
   b6ae0:	f000 f856 	bl	b6b90 <__retarget_lock_acquire_recursive>
   b6ae4:	4b25      	ldr	r3, [pc, #148]	; (b6b7c <__register_exitproc+0xb0>)
   b6ae6:	681c      	ldr	r4, [r3, #0]
   b6ae8:	b934      	cbnz	r4, b6af8 <__register_exitproc+0x2c>
   b6aea:	4c25      	ldr	r4, [pc, #148]	; (b6b80 <__register_exitproc+0xb4>)
   b6aec:	601c      	str	r4, [r3, #0]
   b6aee:	4b25      	ldr	r3, [pc, #148]	; (b6b84 <__register_exitproc+0xb8>)
   b6af0:	b113      	cbz	r3, b6af8 <__register_exitproc+0x2c>
   b6af2:	681b      	ldr	r3, [r3, #0]
   b6af4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6af8:	6863      	ldr	r3, [r4, #4]
   b6afa:	2b1f      	cmp	r3, #31
   b6afc:	dd07      	ble.n	b6b0e <__register_exitproc+0x42>
   b6afe:	f8d8 0000 	ldr.w	r0, [r8]
   b6b02:	f000 f847 	bl	b6b94 <__retarget_lock_release_recursive>
   b6b06:	f04f 30ff 	mov.w	r0, #4294967295
   b6b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6b0e:	b34e      	cbz	r6, b6b64 <__register_exitproc+0x98>
   b6b10:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6b14:	b988      	cbnz	r0, b6b3a <__register_exitproc+0x6e>
   b6b16:	4b1c      	ldr	r3, [pc, #112]	; (b6b88 <__register_exitproc+0xbc>)
   b6b18:	b923      	cbnz	r3, b6b24 <__register_exitproc+0x58>
   b6b1a:	f8d8 0000 	ldr.w	r0, [r8]
   b6b1e:	f000 f838 	bl	b6b92 <__retarget_lock_release>
   b6b22:	e7f0      	b.n	b6b06 <__register_exitproc+0x3a>
   b6b24:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6b28:	f7ff f968 	bl	b5dfc <malloc>
   b6b2c:	2800      	cmp	r0, #0
   b6b2e:	d0f4      	beq.n	b6b1a <__register_exitproc+0x4e>
   b6b30:	2300      	movs	r3, #0
   b6b32:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6b36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6b3a:	6863      	ldr	r3, [r4, #4]
   b6b3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6b40:	2201      	movs	r2, #1
   b6b42:	409a      	lsls	r2, r3
   b6b44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6b48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6b4c:	4313      	orrs	r3, r2
   b6b4e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6b52:	2e02      	cmp	r6, #2
   b6b54:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6b58:	bf02      	ittt	eq
   b6b5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6b5e:	4313      	orreq	r3, r2
   b6b60:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6b64:	6863      	ldr	r3, [r4, #4]
   b6b66:	f8d8 0000 	ldr.w	r0, [r8]
   b6b6a:	1c5a      	adds	r2, r3, #1
   b6b6c:	3302      	adds	r3, #2
   b6b6e:	6062      	str	r2, [r4, #4]
   b6b70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6b74:	f000 f80e 	bl	b6b94 <__retarget_lock_release_recursive>
   b6b78:	2000      	movs	r0, #0
   b6b7a:	e7c6      	b.n	b6b0a <__register_exitproc+0x3e>
   b6b7c:	2003e7e8 	.word	0x2003e7e8
   b6b80:	2003e75c 	.word	0x2003e75c
   b6b84:	00000000 	.word	0x00000000
   b6b88:	000b5dfd 	.word	0x000b5dfd
   b6b8c:	2003e1b8 	.word	0x2003e1b8

000b6b90 <__retarget_lock_acquire_recursive>:
   b6b90:	4770      	bx	lr

000b6b92 <__retarget_lock_release>:
   b6b92:	4770      	bx	lr

000b6b94 <__retarget_lock_release_recursive>:
   b6b94:	4770      	bx	lr

000b6b96 <link_code_end>:
	...

000b6b98 <dynalib_user>:
   b6b98:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6ba8:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b6bb8:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b6bc8:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b6bd8:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b6be8:	4f4d 4544 7525 003e 6e49 7469 6169 696c     MODE%u>.Initiali
   b6bf8:	697a 676e 5320 2044 6163 6472 2e2e 002e     zing SD card....
   b6c08:	6e69 7469 6169 696c 617a 6974 6e6f 6420     initialization d
   b6c18:	6e6f 2e65 6900 696e 6974 6c61 7a69 7461     one..initializat
   b6c28:	6f69 206e 6166 6c69 6465 0021 7257 7469     ion failed!.Writ
   b6c38:	6e69 2067 6f74 7420 7365 2e74 7874 2e74     ing to test.txt.
   b6c48:	2e2e 7400 7365 6974 676e 3120 202c 2c32     ...testing 1, 2,
   b6c58:	3320 002e 7265 6f72 2072 706f 6e65 6e69      3..error openin
   b6c68:	2067 6574 7473 742e 7478 7400 7365 2e74     g test.txt.test.
   b6c78:	7874 3a74 0000 0000                         txt:....

000b6c80 <_ZTVN8particle11SPISettingsE>:
	...
   b6c88:	412d 000b 40ab 000b 40c9 000b               -A...@...@..

000b6c94 <_ZTV4File>:
	...
   b6c9c:	40c7 000b 40d7 000b 40f7 000b 40f1 000b     .@...@...@...@..
   b6cac:	40ad 000b 419f 000b 40eb 000b 40e5 000b     .@...A...@...@..

000b6cbc <_ZTVN5spark13EthernetClassE>:
	...
   b6cc4:	5eab 000b 5ea1 000b 5e97 000b 5e8d 000b     .^...^...^...^..
   b6cd4:	5e81 000b 5e75 000b 6711 000b 6719 000b     .^..u^...g...g..
   b6ce4:	5e69 000b 5e61 000b 5e57 000b 5e4d 000b     i^..a^..W^..M^..
   b6cf4:	6749 000b                                   Ig..

000b6cf8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b6cf8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b6d08:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b6d18:	7361 7463 6d69 0065                         asctime.

000b6d20 <_ZTV9IPAddress>:
	...
   b6d28:	630d 000b 62fd 000b 62ff 000b               .c...b...b..

000b6d34 <_ZTV9USBSerial>:
	...
   b6d3c:	63f3 000b 645b 000b 6431 000b 6089 000b     .c..[d..1d...`..
   b6d4c:	6423 000b 63f5 000b 6405 000b 6455 000b     #d...c...d..Ud..
   b6d5c:	6415 000b 63ed 000b                         .d...c..

000b6d64 <_ZTVN5spark13CellularClassE>:
	...
   b6d6c:	655f 000b 6555 000b 654b 000b 6501 000b     _e..Ue..Ke...e..
   b6d7c:	653f 000b 6533 000b 6711 000b 6719 000b     ?e..3e...g...g..
   b6d8c:	6527 000b 651f 000b 6515 000b 650b 000b     'e...e...e...e..
   b6d9c:	6749 000b                                   Ig..

000b6da0 <_ZTV11USARTSerial>:
	...
   b6da8:	6599 000b 6605 000b 65dd 000b 6089 000b     .e...f...e...`..
   b6db8:	65ad 000b 65c9 000b 65bb 000b 65d7 000b     .e...e...e...e..
   b6dc8:	659b 000b 659f 000b                         .e...e..

000b6dd0 <_ZTV7TwoWire>:
	...
   b6dd8:	663d 000b 6687 000b 665f 000b 663f 000b     =f...f.._f..?f..
   b6de8:	6667 000b 666f 000b 6677 000b 667f 000b     gf..of..wf...f..

000b6df8 <_ZTVN5spark12NetworkClassE>:
	...
   b6e00:	66d1 000b 66db 000b 66e5 000b 66ef 000b     .f...f...f...f..
   b6e10:	66f9 000b 6705 000b 6711 000b 6719 000b     .f...g...g...g..
   b6e20:	6721 000b 672d 000b 6735 000b 673f 000b     !g..-g..5g..?g..
   b6e30:	6749 000b                                   Ig..

000b6e34 <_ZSt7nothrow>:
   b6e34:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6e44:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6e54:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6e64:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6e74:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6e84:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6e94:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6ea4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6eb4:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6ec4:	646e 632e                                    nd.c.

000b6ec9 <link_const_variable_data_end>:
   b6ec9:	00          	.byte	0x00
	...

000b6ecc <link_constructors_location>:
   b6ecc:	000b43a5 	.word	0x000b43a5
   b6ed0:	000b5eb5 	.word	0x000b5eb5
   b6ed4:	000b6055 	.word	0x000b6055
   b6ed8:	000b6079 	.word	0x000b6079
   b6edc:	000b618d 	.word	0x000b618d
   b6ee0:	000b619d 	.word	0x000b619d
   b6ee4:	000b61b9 	.word	0x000b61b9
   b6ee8:	000b6569 	.word	0x000b6569
   b6eec:	000b6821 	.word	0x000b6821
