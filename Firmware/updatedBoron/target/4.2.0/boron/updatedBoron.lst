
c:/Users/ppita/Documents/Particle/updatedBoron/target/4.2.0/boron/updatedBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001344  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5360  000b5360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5384  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e624  000b5388  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  2003e690  2003e690  0002e690  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b53f4  000b53f4  000253f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b541c  000b541c  0002541c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f1174  00000000  00000000  00025420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f28f  00000000  00000000  00116594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00034d5d  00000000  00000000  00125823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002600  00000000  00000000  0015a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000096f0  00000000  00000000  0015cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033e62  00000000  00000000  00166270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000348f1  00000000  00000000  0019a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001354e9  00000000  00000000  001ce9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006bec  00000000  00000000  00303eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f000 ffb3 	bl	b4f98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f000 ffbb 	bl	b4fb4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e624 	.word	0x2003e624
   b4048:	000b5388 	.word	0x000b5388
   b404c:	2003e690 	.word	0x2003e690
   b4050:	2003e690 	.word	0x2003e690
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fccb 	bl	b49f8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5334 	.word	0x000b5334
   b407c:	000b5358 	.word	0x000b5358

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b815 	b.w	b40ae <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f821 	bl	b40cc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bc6b 	b.w	b4968 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 ba1d 	b.w	b44d0 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 ba1b 	b.w	b44d0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 ba21 	b.w	b44e0 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <setup>:
// const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 59; // What should sampling period be?
const unsigned long EARLYBIRD_SECONDS = 0; // how long before desired time should I wake up? Sample currenly takes 10 s, so wake up 10 s early


void setup() {
   b40ae:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b40b0:	f000 fdaa 	bl	b4c08 <_Z16_fetch_usbserialv>
   b40b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40b8:	f000 fd9a 	bl	b4bf0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600); // Initialize serial communication
   b40bc:	f000 ff3e 	bl	b4f3c <_Z22__fetch_global_Serial1v>
}
   b40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial1.begin(9600); // Initialize serial communication
   b40c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40c8:	f000 be66 	b.w	b4d98 <_ZN11USARTSerial5beginEm>

000b40cc <loop>:

void loop() {
   b40cc:	b530      	push	{r4, r5, lr}
   b40ce:	b085      	sub	sp, #20

        Serial1.print("R");
   b40d0:	f000 ff34 	bl	b4f3c <_Z22__fetch_global_Serial1v>
   b40d4:	4939      	ldr	r1, [pc, #228]	; (b41bc <loop+0xf0>)
   b40d6:	f000 fba5 	bl	b4824 <_ZN5Print5printEPKc>
    
         delay(1000);
   b40da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b40de:	f000 fc17 	bl	b4910 <delay>

        Serial.println(Serial1.readString());
   b40e2:	f000 fd91 	bl	b4c08 <_Z16_fetch_usbserialv>
   b40e6:	4604      	mov	r4, r0
   b40e8:	f000 ff28 	bl	b4f3c <_Z22__fetch_global_Serial1v>
   b40ec:	4601      	mov	r1, r0
   b40ee:	4668      	mov	r0, sp
   b40f0:	f000 fbe8 	bl	b48c4 <_ZN6Stream10readStringEv>
   b40f4:	9900      	ldr	r1, [sp, #0]
   b40f6:	4620      	mov	r0, r4
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b40f8:	4c31      	ldr	r4, [pc, #196]	; (b41c0 <loop+0xf4>)
   b40fa:	f000 fba6 	bl	b484a <_ZN5Print7printlnEPKc>
   b40fe:	4668      	mov	r0, sp
   b4100:	f000 faee 	bl	b46e0 <_ZN6StringD1Ev>
   b4104:	7d23      	ldrb	r3, [r4, #20]
   b4106:	2b00      	cmp	r3, #0
   b4108:	d047      	beq.n	b419a <loop+0xce>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b410a:	2302      	movs	r3, #2
   b410c:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b410e:	6823      	ldr	r3, [r4, #0]
   b4110:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4112:	b1c3      	cbz	r3, b4146 <loop+0x7a>
            if (start->type == type) {
   b4114:	889a      	ldrh	r2, [r3, #4]
   b4116:	2a01      	cmp	r2, #1
   b4118:	d006      	beq.n	b4128 <loop+0x5c>
            start = start->next;
   b411a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b411c:	e7f9      	b.n	b4112 <loop+0x46>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b411e:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4120:	b18b      	cbz	r3, b4146 <loop+0x7a>
            if (start->type == type) {
   b4122:	889a      	ldrh	r2, [r3, #4]
   b4124:	2a01      	cmp	r2, #1
   b4126:	d1fa      	bne.n	b411e <loop+0x52>
                if (gpioWakeup->pin == pin) {
   b4128:	899a      	ldrh	r2, [r3, #12]
   b412a:	2a02      	cmp	r2, #2
   b412c:	d1f7      	bne.n	b411e <loop+0x52>
                    gpioWakeup->mode = mode;
   b412e:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4130:	7d23      	ldrb	r3, [r4, #20]
   b4132:	2b00      	cmp	r3, #0
   b4134:	d031      	beq.n	b419a <loop+0xce>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4136:	6823      	ldr	r3, [r4, #0]
   b4138:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b413a:	b1d3      	cbz	r3, b4172 <loop+0xa6>
            if (start->type == type) {
   b413c:	889a      	ldrh	r2, [r3, #4]
   b413e:	2a04      	cmp	r2, #4
   b4140:	d035      	beq.n	b41ae <loop+0xe2>
            start = start->next;
   b4142:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4144:	e7f9      	b.n	b413a <loop+0x6e>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4146:	491f      	ldr	r1, [pc, #124]	; (b41c4 <loop+0xf8>)
   b4148:	2010      	movs	r0, #16
   b414a:	f000 ff1b 	bl	b4f84 <_ZnwjRKSt9nothrow_t>
   b414e:	4605      	mov	r5, r0
   b4150:	2800      	cmp	r0, #0
   b4152:	d030      	beq.n	b41b6 <loop+0xea>
   b4154:	2210      	movs	r2, #16
   b4156:	2100      	movs	r1, #0
   b4158:	f000 ff2c 	bl	b4fb4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b415c:	4b1a      	ldr	r3, [pc, #104]	; (b41c8 <loop+0xfc>)
   b415e:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4160:	2301      	movs	r3, #1
   b4162:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4164:	6923      	ldr	r3, [r4, #16]
   b4166:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b4168:	2302      	movs	r3, #2
   b416a:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b416c:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b416e:	6125      	str	r5, [r4, #16]
   b4170:	e7de      	b.n	b4130 <loop+0x64>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4172:	4914      	ldr	r1, [pc, #80]	; (b41c4 <loop+0xf8>)
   b4174:	2010      	movs	r0, #16
   b4176:	f000 ff05 	bl	b4f84 <_ZnwjRKSt9nothrow_t>
   b417a:	4605      	mov	r5, r0
   b417c:	b1d8      	cbz	r0, b41b6 <loop+0xea>
   b417e:	2210      	movs	r2, #16
   b4180:	2100      	movs	r1, #0
   b4182:	f000 ff17 	bl	b4fb4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4186:	4b10      	ldr	r3, [pc, #64]	; (b41c8 <loop+0xfc>)
   b4188:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b418a:	2304      	movs	r3, #4
   b418c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b418e:	6923      	ldr	r3, [r4, #16]
   b4190:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   b4192:	f64e 2360 	movw	r3, #60000	; 0xea60
   b4196:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4198:	6125      	str	r5, [r4, #16]
         config.mode(SystemSleepMode::ULTRA_LOW_POWER)
         .gpio(D2, FALLING)
         .duration(60* 1000L); // Set seconds until wake

//Ready to sleep
        SystemSleepResult result = System.sleep(config); // Device sleeps here
   b419a:	4668      	mov	r0, sp
   b419c:	4908      	ldr	r1, [pc, #32]	; (b41c0 <loop+0xf4>)
   b419e:	f000 fa2d 	bl	b45fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b41a2:	9800      	ldr	r0, [sp, #0]
   b41a4:	b108      	cbz	r0, b41aa <loop+0xde>
            free(wakeupSource_);
   b41a6:	f000 f99b 	bl	b44e0 <free>
     }
   b41aa:	b005      	add	sp, #20
   b41ac:	bd30      	pop	{r4, r5, pc}
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b41ae:	f64e 2260 	movw	r2, #60000	; 0xea60
   b41b2:	60da      	str	r2, [r3, #12]
                return *this;
   b41b4:	e7f1      	b.n	b419a <loop+0xce>
                valid_ = false;
   b41b6:	7525      	strb	r5, [r4, #20]
                return *this;
   b41b8:	e7ef      	b.n	b419a <loop+0xce>
   b41ba:	bf00      	nop
   b41bc:	000b5120 	.word	0x000b5120
   b41c0:	2003e69c 	.word	0x2003e69c
   b41c4:	000b529c 	.word	0x000b529c
   b41c8:	00030010 	.word	0x00030010

000b41cc <_GLOBAL__sub_I_SystemMode>:

         Serial.print("Sleeping for ");
         Serial.println(seconds_to_sleep);

         return seconds_to_sleep;
   b41cc:	b510      	push	{r4, lr}
SYSTEM_THREAD(ENABLED);
   b41ce:	2100      	movs	r1, #0
   b41d0:	2001      	movs	r0, #1
   b41d2:	f000 f8ef 	bl	b43b4 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b41d6:	4b0a      	ldr	r3, [pc, #40]	; (b4200 <_GLOBAL__sub_I_SystemMode+0x34>)
    SleepResult() {}
   b41d8:	4a0a      	ldr	r2, [pc, #40]	; (b4204 <_GLOBAL__sub_I_SystemMode+0x38>)
   b41da:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b41dc:	2400      	movs	r4, #0
   b41de:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b41e2:	2002      	movs	r0, #2
   b41e4:	f000 f8d6 	bl	b4394 <set_system_mode>
        : config_(config) {
   b41e8:	4b07      	ldr	r3, [pc, #28]	; (b4208 <_GLOBAL__sub_I_SystemMode+0x3c>)
   b41ea:	1d1a      	adds	r2, r3, #4
   b41ec:	601a      	str	r2, [r3, #0]
              valid_(true) {
   b41ee:	e9c3 4402 	strd	r4, r4, [r3, #8]
        config_.size = sizeof(hal_sleep_config_t);
   b41f2:	4a06      	ldr	r2, [pc, #24]	; (b420c <_GLOBAL__sub_I_SystemMode+0x40>)
   b41f4:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b41f6:	2201      	movs	r2, #1
   b41f8:	611c      	str	r4, [r3, #16]
   b41fa:	751a      	strb	r2, [r3, #20]
   b41fc:	bd10      	pop	{r4, pc}
   b41fe:	bf00      	nop
   b4200:	2003e690 	.word	0x2003e690
   b4204:	ffff0000 	.word	0xffff0000
   b4208:	2003e69c 	.word	0x2003e69c
   b420c:	00030010 	.word	0x00030010

000b4210 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4210:	b513      	push	{r0, r1, r4, lr}
   b4212:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4214:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4216:	b159      	cbz	r1, b4230 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4218:	9101      	str	r1, [sp, #4]
   b421a:	f000 ff09 	bl	b5030 <strlen>
   b421e:	6823      	ldr	r3, [r4, #0]
   b4220:	9901      	ldr	r1, [sp, #4]
   b4222:	68db      	ldr	r3, [r3, #12]
   b4224:	4602      	mov	r2, r0
   b4226:	4620      	mov	r0, r4
    }
   b4228:	b002      	add	sp, #8
   b422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b422e:	4718      	bx	r3
    }
   b4230:	b002      	add	sp, #8
   b4232:	bd10      	pop	{r4, pc}

000b4234 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4234:	b508      	push	{r3, lr}
   b4236:	4b02      	ldr	r3, [pc, #8]	; (b4240 <netdb_freeaddrinfo+0xc>)
   b4238:	681b      	ldr	r3, [r3, #0]
   b423a:	689b      	ldr	r3, [r3, #8]
   b423c:	9301      	str	r3, [sp, #4]
   b423e:	bd08      	pop	{r3, pc}
   b4240:	00030268 	.word	0x00030268

000b4244 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4244:	b508      	push	{r3, lr}
   b4246:	4b02      	ldr	r3, [pc, #8]	; (b4250 <netdb_getaddrinfo+0xc>)
   b4248:	681b      	ldr	r3, [r3, #0]
   b424a:	68db      	ldr	r3, [r3, #12]
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	bd08      	pop	{r3, pc}
   b4250:	00030268 	.word	0x00030268

000b4254 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4254:	b508      	push	{r3, lr}
   b4256:	4b02      	ldr	r3, [pc, #8]	; (b4260 <HAL_RNG_GetRandomNumber+0xc>)
   b4258:	681b      	ldr	r3, [r3, #0]
   b425a:	685b      	ldr	r3, [r3, #4]
   b425c:	9301      	str	r3, [sp, #4]
   b425e:	bd08      	pop	{r3, pc}
   b4260:	00030218 	.word	0x00030218

000b4264 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	695b      	ldr	r3, [r3, #20]
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	00030218 	.word	0x00030218

000b4274 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <os_mutex_recursive_create+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	00030248 	.word	0x00030248

000b4284 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <inet_inet_ntop+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	695b      	ldr	r3, [r3, #20]
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	00030264 	.word	0x00030264

000b4294 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <hal_usart_write+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	68db      	ldr	r3, [r3, #12]
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	0003023c 	.word	0x0003023c

000b42a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <hal_usart_available+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	691b      	ldr	r3, [r3, #16]
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	0003023c 	.word	0x0003023c

000b42b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <hal_usart_read+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	695b      	ldr	r3, [r3, #20]
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	0003023c 	.word	0x0003023c

000b42c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <hal_usart_peek+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	699b      	ldr	r3, [r3, #24]
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	0003023c 	.word	0x0003023c

000b42d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_usart_flush+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	69db      	ldr	r3, [r3, #28]
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	0003023c 	.word	0x0003023c

000b42e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_usart_available_data_for_write+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	0003023c 	.word	0x0003023c

000b42f4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <hal_usart_begin_config+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	0003023c 	.word	0x0003023c

000b4304 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <hal_usart_init_ex+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003023c 	.word	0x0003023c

000b4314 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <HAL_USB_USART_Init+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	681b      	ldr	r3, [r3, #0]
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003024c 	.word	0x0003024c

000b4324 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <HAL_USB_USART_Begin+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	685b      	ldr	r3, [r3, #4]
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003024c 	.word	0x0003024c

000b4334 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <HAL_USB_USART_Available_Data+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	691b      	ldr	r3, [r3, #16]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003024c 	.word	0x0003024c

000b4344 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	695b      	ldr	r3, [r3, #20]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003024c 	.word	0x0003024c

000b4354 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <HAL_USB_USART_Receive_Data+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	699b      	ldr	r3, [r3, #24]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	0003024c 	.word	0x0003024c

000b4364 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_USB_USART_Send_Data+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	69db      	ldr	r3, [r3, #28]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	0003024c 	.word	0x0003024c

000b4374 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <HAL_USB_USART_Flush_Data+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	6a1b      	ldr	r3, [r3, #32]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	0003024c 	.word	0x0003024c

000b4384 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <log_message+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	00030260 	.word	0x00030260

000b4394 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <set_system_mode+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	685b      	ldr	r3, [r3, #4]
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	00030220 	.word	0x00030220

000b43a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <system_delay_ms+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	695b      	ldr	r3, [r3, #20]
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	00030220 	.word	0x00030220

000b43b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <system_thread_set_state+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	00030220 	.word	0x00030220

000b43c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b03      	ldr	r3, [pc, #12]	; (b43d4 <system_ctrl_set_app_request_handler+0x10>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b43ce:	9301      	str	r3, [sp, #4]
   b43d0:	bd08      	pop	{r3, pc}
   b43d2:	0000      	.short	0x0000
   b43d4:	00030220 	.word	0x00030220

000b43d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b03      	ldr	r3, [pc, #12]	; (b43e8 <system_ctrl_set_result+0x10>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b43e2:	9301      	str	r3, [sp, #4]
   b43e4:	bd08      	pop	{r3, pc}
   b43e6:	0000      	.short	0x0000
   b43e8:	00030220 	.word	0x00030220

000b43ec <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b03      	ldr	r3, [pc, #12]	; (b43fc <system_sleep_ext+0x10>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b43f6:	9301      	str	r3, [sp, #4]
   b43f8:	bd08      	pop	{r3, pc}
   b43fa:	0000      	.short	0x0000
   b43fc:	00030220 	.word	0x00030220

000b4400 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <network_connect+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	685b      	ldr	r3, [r3, #4]
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	00030240 	.word	0x00030240

000b4410 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <network_connecting+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	689b      	ldr	r3, [r3, #8]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	00030240 	.word	0x00030240

000b4420 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <network_disconnect+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	68db      	ldr	r3, [r3, #12]
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	00030240 	.word	0x00030240

000b4430 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <network_ready+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	691b      	ldr	r3, [r3, #16]
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	00030240 	.word	0x00030240

000b4440 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <network_on+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	695b      	ldr	r3, [r3, #20]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	00030240 	.word	0x00030240

000b4450 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <network_off+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	699b      	ldr	r3, [r3, #24]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	00030240 	.word	0x00030240

000b4460 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <network_listen+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	69db      	ldr	r3, [r3, #28]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	00030240 	.word	0x00030240

000b4470 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <network_listening+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	6a1b      	ldr	r3, [r3, #32]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	00030240 	.word	0x00030240

000b4480 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <network_set_listen_timeout+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	00030240 	.word	0x00030240

000b4490 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <network_get_listen_timeout+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	00030240 	.word	0x00030240

000b44a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <network_is_on+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	00030240 	.word	0x00030240

000b44b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <network_is_off+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	00030240 	.word	0x00030240

000b44c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <spark_set_random_seed_from_cloud_handler+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	00030244 	.word	0x00030244

000b44d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <malloc+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	681b      	ldr	r3, [r3, #0]
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	0003021c 	.word	0x0003021c

000b44e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b02      	ldr	r3, [pc, #8]	; (b44ec <free+0xc>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	685b      	ldr	r3, [r3, #4]
   b44e8:	9301      	str	r3, [sp, #4]
   b44ea:	bd08      	pop	{r3, pc}
   b44ec:	0003021c 	.word	0x0003021c

000b44f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b02      	ldr	r3, [pc, #8]	; (b44fc <realloc+0xc>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	689b      	ldr	r3, [r3, #8]
   b44f8:	9301      	str	r3, [sp, #4]
   b44fa:	bd08      	pop	{r3, pc}
   b44fc:	0003021c 	.word	0x0003021c

000b4500 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4500:	b508      	push	{r3, lr}
   b4502:	4b02      	ldr	r3, [pc, #8]	; (b450c <__assert_func+0xc>)
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4508:	9301      	str	r3, [sp, #4]
   b450a:	bd08      	pop	{r3, pc}
   b450c:	0003021c 	.word	0x0003021c

000b4510 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4510:	b508      	push	{r3, lr}
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <newlib_impure_ptr_callback+0xc>)
   b4514:	681b      	ldr	r3, [r3, #0]
   b4516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4518:	9301      	str	r3, [sp, #4]
   b451a:	bd08      	pop	{r3, pc}
   b451c:	0003021c 	.word	0x0003021c

000b4520 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4520:	2200      	movs	r2, #0
   b4522:	6840      	ldr	r0, [r0, #4]
   b4524:	4611      	mov	r1, r2
   b4526:	f7ff bfa3 	b.w	b4470 <network_listening>

000b452a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b452a:	2200      	movs	r2, #0
   b452c:	6840      	ldr	r0, [r0, #4]
   b452e:	4611      	mov	r1, r2
   b4530:	f7ff bfae 	b.w	b4490 <network_get_listen_timeout>

000b4534 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4534:	6840      	ldr	r0, [r0, #4]
   b4536:	2200      	movs	r2, #0
   b4538:	f7ff bfa2 	b.w	b4480 <network_set_listen_timeout>

000b453c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b453c:	6840      	ldr	r0, [r0, #4]
   b453e:	2200      	movs	r2, #0
   b4540:	f081 0101 	eor.w	r1, r1, #1
   b4544:	f7ff bf8c 	b.w	b4460 <network_listen>

000b4548 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4548:	2300      	movs	r3, #0
   b454a:	6840      	ldr	r0, [r0, #4]
   b454c:	461a      	mov	r2, r3
   b454e:	4619      	mov	r1, r3
   b4550:	f7ff bf7e 	b.w	b4450 <network_off>

000b4554 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4554:	2300      	movs	r3, #0
   b4556:	6840      	ldr	r0, [r0, #4]
   b4558:	461a      	mov	r2, r3
   b455a:	4619      	mov	r1, r3
   b455c:	f7ff bf70 	b.w	b4440 <network_on>

000b4560 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4560:	2200      	movs	r2, #0
   b4562:	6840      	ldr	r0, [r0, #4]
   b4564:	4611      	mov	r1, r2
   b4566:	f7ff bf63 	b.w	b4430 <network_ready>

000b456a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b456a:	2200      	movs	r2, #0
   b456c:	6840      	ldr	r0, [r0, #4]
   b456e:	4611      	mov	r1, r2
   b4570:	f7ff bf4e 	b.w	b4410 <network_connecting>

000b4574 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4574:	6840      	ldr	r0, [r0, #4]
   b4576:	2200      	movs	r2, #0
   b4578:	2102      	movs	r1, #2
   b457a:	f7ff bf51 	b.w	b4420 <network_disconnect>

000b457e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b457e:	2300      	movs	r3, #0
   b4580:	6840      	ldr	r0, [r0, #4]
   b4582:	461a      	mov	r2, r3
   b4584:	f7ff bf3c 	b.w	b4400 <network_connect>

000b4588 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4588:	4b02      	ldr	r3, [pc, #8]	; (b4594 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b458a:	2203      	movs	r2, #3
   b458c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b458e:	4a02      	ldr	r2, [pc, #8]	; (b4598 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4590:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4592:	4770      	bx	lr
   b4594:	2003e6b4 	.word	0x2003e6b4
   b4598:	000b512c 	.word	0x000b512c

000b459c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b459c:	b510      	push	{r4, lr}
   b459e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b45a0:	6800      	ldr	r0, [r0, #0]
   b45a2:	b118      	cbz	r0, b45ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b45a4:	f7ff ff9c 	bl	b44e0 <free>
            wakeupSource_ = nullptr;
   b45a8:	2300      	movs	r3, #0
   b45aa:	6023      	str	r3, [r4, #0]
        }
    }
   b45ac:	bd10      	pop	{r4, pc}

000b45ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b45ae:	b538      	push	{r3, r4, r5, lr}
   b45b0:	460c      	mov	r4, r1
   b45b2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b45b4:	f7ff fff2 	bl	b459c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b45b8:	b154      	cbz	r4, b45d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b45ba:	8820      	ldrh	r0, [r4, #0]
   b45bc:	f7ff ff88 	bl	b44d0 <malloc>
   b45c0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b45c2:	b128      	cbz	r0, b45d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b45c4:	8822      	ldrh	r2, [r4, #0]
   b45c6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b45c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b45cc:	f000 bce4 	b.w	b4f98 <memcpy>
    }
   b45d0:	bd38      	pop	{r3, r4, r5, pc}

000b45d2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b45d2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b45d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b45d8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b45da:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b45de:	f8c0 3006 	str.w	r3, [r0, #6]
   b45e2:	894b      	ldrh	r3, [r1, #10]
   b45e4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b45e6:	460c      	mov	r4, r1
   b45e8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b45ea:	f7ff ffd7 	bl	b459c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b45ee:	6823      	ldr	r3, [r4, #0]
   b45f0:	b113      	cbz	r3, b45f8 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b45f2:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b45f4:	2300      	movs	r3, #0
   b45f6:	6023      	str	r3, [r4, #0]
    }
   b45f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b45fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b45fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45fe:	4d2b      	ldr	r5, [pc, #172]	; (b46ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b4600:	7d0b      	ldrb	r3, [r1, #20]
   b4602:	4604      	mov	r4, r0
   b4604:	b08b      	sub	sp, #44	; 0x2c
   b4606:	4608      	mov	r0, r1
   b4608:	1daf      	adds	r7, r5, #6
   b460a:	2b00      	cmp	r3, #0
   b460c:	d036      	beq.n	b467c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b460e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b4610:	791b      	ldrb	r3, [r3, #4]
   b4612:	2b00      	cmp	r3, #0
   b4614:	d032      	beq.n	b467c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b4616:	4b26      	ldr	r3, [pc, #152]	; (b46b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b4618:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b461a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b461c:	a902      	add	r1, sp, #8
   b461e:	3004      	adds	r0, #4
   b4620:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b4624:	f7ff fee2 	bl	b43ec <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b4628:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b462c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b4630:	b200      	sxth	r0, r0
   b4632:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b4636:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b463a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b463c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b463e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b4640:	4628      	mov	r0, r5
   b4642:	f7ff ffb4 	bl	b45ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b4646:	a802      	add	r0, sp, #8
   b4648:	f7ff ffa8 	bl	b459c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b464c:	2300      	movs	r3, #0
   b464e:	6023      	str	r3, [r4, #0]
   b4650:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b4652:	71a3      	strb	r3, [r4, #6]
   b4654:	8123      	strh	r3, [r4, #8]
   b4656:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b465a:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b465c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b4660:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b4662:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b4666:	f8c4 3006 	str.w	r3, [r4, #6]
   b466a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b466c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b466e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b4670:	4620      	mov	r0, r4
   b4672:	f7ff ff9c 	bl	b45ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b4676:	4620      	mov	r0, r4
   b4678:	b00b      	add	sp, #44	; 0x2c
   b467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b467c:	2600      	movs	r6, #0
   b467e:	2320      	movs	r3, #32
   b4680:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b4684:	4b0b      	ldr	r3, [pc, #44]	; (b46b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b4686:	9300      	str	r3, [sp, #0]
   b4688:	aa02      	add	r2, sp, #8
   b468a:	4633      	mov	r3, r6
   b468c:	490a      	ldr	r1, [pc, #40]	; (b46b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b468e:	2032      	movs	r0, #50	; 0x32
   b4690:	f7ff fe78 	bl	b4384 <log_message>
            : wakeupSource_(nullptr),
   b4694:	4b06      	ldr	r3, [pc, #24]	; (b46b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b4696:	4805      	ldr	r0, [pc, #20]	; (b46ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b4698:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b469a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b469e:	a902      	add	r1, sp, #8
   b46a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b46a4:	f7ff ff95 	bl	b45d2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b46a8:	e7cd      	b.n	b4646 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b46aa:	bf00      	nop
   b46ac:	2003e6bc 	.word	0x2003e6bc
   b46b0:	ffff0000 	.word	0xffff0000
   b46b4:	000b5167 	.word	0x000b5167
   b46b8:	000b5160 	.word	0x000b5160

000b46bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b46bc:	4b05      	ldr	r3, [pc, #20]	; (b46d4 <_GLOBAL__sub_I_System+0x18>)
   b46be:	2202      	movs	r2, #2
   b46c0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b46c2:	4b05      	ldr	r3, [pc, #20]	; (b46d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b46c4:	4a05      	ldr	r2, [pc, #20]	; (b46dc <_GLOBAL__sub_I_System+0x20>)
   b46c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b46c8:	2000      	movs	r0, #0
   b46ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b46ce:	f7ff be61 	b.w	b4394 <set_system_mode>
   b46d2:	bf00      	nop
   b46d4:	2003e6c8 	.word	0x2003e6c8
   b46d8:	2003e6bc 	.word	0x2003e6bc
   b46dc:	ffff0000 	.word	0xffff0000

000b46e0 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b46e0:	b510      	push	{r4, lr}
   b46e2:	4604      	mov	r4, r0
{
    free(buffer);
   b46e4:	6800      	ldr	r0, [r0, #0]
   b46e6:	f7ff fefb 	bl	b44e0 <free>
}
   b46ea:	4620      	mov	r0, r4
   b46ec:	bd10      	pop	{r4, pc}

000b46ee <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b46ee:	b510      	push	{r4, lr}
   b46f0:	4604      	mov	r4, r0
    if (buffer) {
   b46f2:	6800      	ldr	r0, [r0, #0]
   b46f4:	b108      	cbz	r0, b46fa <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b46f6:	f7ff fef3 	bl	b44e0 <free>
    }
    buffer = nullptr;
   b46fa:	2300      	movs	r3, #0
    capacity = len = 0;
   b46fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4700:	6023      	str	r3, [r4, #0]
}
   b4702:	bd10      	pop	{r4, pc}

000b4704 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4704:	b538      	push	{r3, r4, r5, lr}
   b4706:	4604      	mov	r4, r0
   b4708:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b470a:	6800      	ldr	r0, [r0, #0]
   b470c:	3101      	adds	r1, #1
   b470e:	f7ff feef 	bl	b44f0 <realloc>
    if (newbuffer) {
   b4712:	b110      	cbz	r0, b471a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b4714:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4718:	2001      	movs	r0, #1
    }
    return 0;
}
   b471a:	bd38      	pop	{r3, r4, r5, pc}

000b471c <_ZN6String7reserveEj>:
{
   b471c:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b471e:	6803      	ldr	r3, [r0, #0]
{
   b4720:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b4722:	b123      	cbz	r3, b472e <_ZN6String7reserveEj+0x12>
   b4724:	6843      	ldr	r3, [r0, #4]
   b4726:	428b      	cmp	r3, r1
   b4728:	d301      	bcc.n	b472e <_ZN6String7reserveEj+0x12>
   b472a:	2001      	movs	r0, #1
}
   b472c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b472e:	4620      	mov	r0, r4
   b4730:	f7ff ffe8 	bl	b4704 <_ZN6String12changeBufferEj>
   b4734:	2800      	cmp	r0, #0
   b4736:	d0f9      	beq.n	b472c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4738:	68a3      	ldr	r3, [r4, #8]
   b473a:	2b00      	cmp	r3, #0
   b473c:	d1f5      	bne.n	b472a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b473e:	6822      	ldr	r2, [r4, #0]
   b4740:	7013      	strb	r3, [r2, #0]
   b4742:	e7f2      	b.n	b472a <_ZN6String7reserveEj+0xe>

000b4744 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4744:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4746:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4748:	4611      	mov	r1, r2
   b474a:	9201      	str	r2, [sp, #4]
{
   b474c:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b474e:	f7ff ffe5 	bl	b471c <_ZN6String7reserveEj>
   b4752:	9a01      	ldr	r2, [sp, #4]
   b4754:	b928      	cbnz	r0, b4762 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4756:	4620      	mov	r0, r4
   b4758:	f7ff ffc9 	bl	b46ee <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b475c:	4620      	mov	r0, r4
   b475e:	b003      	add	sp, #12
   b4760:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4762:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4764:	4629      	mov	r1, r5
   b4766:	6820      	ldr	r0, [r4, #0]
   b4768:	f000 fc16 	bl	b4f98 <memcpy>
    buffer[len] = 0;
   b476c:	6822      	ldr	r2, [r4, #0]
   b476e:	68a3      	ldr	r3, [r4, #8]
   b4770:	2100      	movs	r1, #0
   b4772:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4774:	e7f2      	b.n	b475c <_ZN6String4copyEPKcj+0x18>

000b4776 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b4776:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4778:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b477a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b477e:	4604      	mov	r4, r0
    len = 0;
   b4780:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4782:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b4784:	b141      	cbz	r1, b4798 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b4786:	4608      	mov	r0, r1
   b4788:	9101      	str	r1, [sp, #4]
   b478a:	f000 fc51 	bl	b5030 <strlen>
   b478e:	9901      	ldr	r1, [sp, #4]
   b4790:	4602      	mov	r2, r0
   b4792:	4620      	mov	r0, r4
   b4794:	f7ff ffd6 	bl	b4744 <_ZN6String4copyEPKcj>
}
   b4798:	4620      	mov	r0, r4
   b479a:	b002      	add	sp, #8
   b479c:	bd10      	pop	{r4, pc}

000b479e <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b479e:	b570      	push	{r4, r5, r6, lr}
   b47a0:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b47a2:	460e      	mov	r6, r1
   b47a4:	b909      	cbnz	r1, b47aa <_ZN6String6concatEPKcj+0xc>
        return 0;
   b47a6:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b47a8:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b47aa:	b16a      	cbz	r2, b47c8 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b47ac:	6884      	ldr	r4, [r0, #8]
   b47ae:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b47b0:	4621      	mov	r1, r4
   b47b2:	f7ff ffb3 	bl	b471c <_ZN6String7reserveEj>
   b47b6:	2800      	cmp	r0, #0
   b47b8:	d0f5      	beq.n	b47a6 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b47ba:	6828      	ldr	r0, [r5, #0]
   b47bc:	68ab      	ldr	r3, [r5, #8]
   b47be:	4631      	mov	r1, r6
   b47c0:	4418      	add	r0, r3
   b47c2:	f000 fc2d 	bl	b5020 <strcpy>
    len = newlen;
   b47c6:	60ac      	str	r4, [r5, #8]
        return 1;
   b47c8:	2001      	movs	r0, #1
   b47ca:	e7ed      	b.n	b47a8 <_ZN6String6concatEPKcj+0xa>

000b47cc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b47cc:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b47ce:	2300      	movs	r3, #0
   b47d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b47d4:	2201      	movs	r2, #1
    buf[0] = c;
   b47d6:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b47da:	a901      	add	r1, sp, #4
   b47dc:	f7ff ffdf 	bl	b479e <_ZN6String6concatEPKcj>
}
   b47e0:	b003      	add	sp, #12
   b47e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b47e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b47e8:	4802      	ldr	r0, [pc, #8]	; (b47f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b47ea:	2300      	movs	r3, #0
   b47ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b47ee:	f7ff bd41 	b.w	b4274 <os_mutex_recursive_create>
   b47f2:	bf00      	nop
   b47f4:	2003e6cc 	.word	0x2003e6cc

000b47f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b47f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47fa:	4606      	mov	r6, r0
   b47fc:	460d      	mov	r5, r1
  size_t n = 0;
   b47fe:	188f      	adds	r7, r1, r2
   b4800:	2400      	movs	r4, #0
  while (size--) {
   b4802:	42bd      	cmp	r5, r7
   b4804:	d00c      	beq.n	b4820 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4806:	6833      	ldr	r3, [r6, #0]
   b4808:	f815 1b01 	ldrb.w	r1, [r5], #1
   b480c:	689b      	ldr	r3, [r3, #8]
   b480e:	4630      	mov	r0, r6
   b4810:	4798      	blx	r3
     if (chunk>=0)
   b4812:	1e03      	subs	r3, r0, #0
   b4814:	db01      	blt.n	b481a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4816:	441c      	add	r4, r3
  while (size--) {
   b4818:	e7f3      	b.n	b4802 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b481a:	2c00      	cmp	r4, #0
   b481c:	bf08      	it	eq
   b481e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4820:	4620      	mov	r0, r4
   b4822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4824 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4824:	b508      	push	{r3, lr}
  return write(str);
   b4826:	f7ff fcf3 	bl	b4210 <_ZN5Print5writeEPKc>
}
   b482a:	bd08      	pop	{r3, pc}

000b482c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b482c:	6803      	ldr	r3, [r0, #0]
   b482e:	689b      	ldr	r3, [r3, #8]
   b4830:	4718      	bx	r3

000b4832 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4832:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4834:	210d      	movs	r1, #13
{
   b4836:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4838:	f7ff fff8 	bl	b482c <_ZN5Print5printEc>
  n += print('\n');
   b483c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b483e:	4604      	mov	r4, r0
  n += print('\n');
   b4840:	4628      	mov	r0, r5
   b4842:	f7ff fff3 	bl	b482c <_ZN5Print5printEc>
  return n;
}
   b4846:	4420      	add	r0, r4
   b4848:	bd38      	pop	{r3, r4, r5, pc}

000b484a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b484a:	b538      	push	{r3, r4, r5, lr}
   b484c:	4605      	mov	r5, r0
  return write(str);
   b484e:	f7ff fcdf 	bl	b4210 <_ZN5Print5writeEPKc>
   b4852:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4854:	4628      	mov	r0, r5
   b4856:	f7ff ffec 	bl	b4832 <_ZN5Print7printlnEv>
  return n;
}
   b485a:	4420      	add	r0, r4
   b485c:	bd38      	pop	{r3, r4, r5, pc}

000b485e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b485e:	b530      	push	{r4, r5, lr}
   b4860:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4862:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4864:	2a01      	cmp	r2, #1
  *str = '\0';
   b4866:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b486a:	bf98      	it	ls
   b486c:	220a      	movls	r2, #10
   b486e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4870:	460d      	mov	r5, r1
   b4872:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4876:	fb01 5312 	mls	r3, r1, r2, r5
   b487a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b487e:	2b09      	cmp	r3, #9
   b4880:	bf94      	ite	ls
   b4882:	3330      	addls	r3, #48	; 0x30
   b4884:	3337      	addhi	r3, #55	; 0x37
   b4886:	b2db      	uxtb	r3, r3
  } while(n);
   b4888:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b488a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b488e:	d9ef      	bls.n	b4870 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4890:	4621      	mov	r1, r4
   b4892:	f7ff fcbd 	bl	b4210 <_ZN5Print5writeEPKc>
}
   b4896:	b00b      	add	sp, #44	; 0x2c
   b4898:	bd30      	pop	{r4, r5, pc}

000b489a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b489a:	b510      	push	{r4, lr}
   b489c:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b489e:	f7ff fce1 	bl	b4264 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b48a2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b48a4:	6823      	ldr	r3, [r4, #0]
   b48a6:	4620      	mov	r0, r4
   b48a8:	695b      	ldr	r3, [r3, #20]
   b48aa:	4798      	blx	r3
    if (c >= 0) return c;
   b48ac:	2800      	cmp	r0, #0
   b48ae:	da08      	bge.n	b48c2 <_ZN6Stream9timedReadEv+0x28>
   b48b0:	f7ff fcd8 	bl	b4264 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b48b4:	68e3      	ldr	r3, [r4, #12]
   b48b6:	1ac0      	subs	r0, r0, r3
   b48b8:	68a3      	ldr	r3, [r4, #8]
   b48ba:	4298      	cmp	r0, r3
   b48bc:	d3f2      	bcc.n	b48a4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b48be:	f04f 30ff 	mov.w	r0, #4294967295
}
   b48c2:	bd10      	pop	{r4, pc}

000b48c4 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b48c4:	b538      	push	{r3, r4, r5, lr}
   b48c6:	460d      	mov	r5, r1
  String ret;
   b48c8:	4907      	ldr	r1, [pc, #28]	; (b48e8 <_ZN6Stream10readStringEv+0x24>)
{
   b48ca:	4604      	mov	r4, r0
  String ret;
   b48cc:	f7ff ff53 	bl	b4776 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b48d0:	4628      	mov	r0, r5
   b48d2:	f7ff ffe2 	bl	b489a <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b48d6:	2800      	cmp	r0, #0
   b48d8:	db04      	blt.n	b48e4 <_ZN6Stream10readStringEv+0x20>

    // if there's not enough memory for the concatenated value, the string
    // will be left unchanged (but this isn't signalled in any way)
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
    String & operator += (char c)           {concat(c); return (*this);}
   b48da:	b2c1      	uxtb	r1, r0
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff ff75 	bl	b47cc <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b48e2:	e7f5      	b.n	b48d0 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b48e4:	4620      	mov	r0, r4
   b48e6:	bd38      	pop	{r3, r4, r5, pc}
   b48e8:	000b518d 	.word	0x000b518d

000b48ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b48ec:	4b01      	ldr	r3, [pc, #4]	; (b48f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b48ee:	4a02      	ldr	r2, [pc, #8]	; (b48f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b48f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b48f2:	4770      	bx	lr
   b48f4:	2003e6d0 	.word	0x2003e6d0
   b48f8:	000b518e 	.word	0x000b518e

000b48fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b48fc:	4b02      	ldr	r3, [pc, #8]	; (b4908 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b48fe:	681a      	ldr	r2, [r3, #0]
   b4900:	4b02      	ldr	r3, [pc, #8]	; (b490c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4902:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4904:	4770      	bx	lr
   b4906:	bf00      	nop
   b4908:	2003e624 	.word	0x2003e624
   b490c:	2003e6d4 	.word	0x2003e6d4

000b4910 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4910:	2100      	movs	r1, #0
   b4912:	f7ff bd47 	b.w	b43a4 <system_delay_ms>
	...

000b4918 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4918:	4b01      	ldr	r3, [pc, #4]	; (b4920 <_GLOBAL__sub_I_RGB+0x8>)
   b491a:	2200      	movs	r2, #0
   b491c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b491e:	4770      	bx	lr
   b4920:	2003e6d8 	.word	0x2003e6d8

000b4924 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4924:	4b01      	ldr	r3, [pc, #4]	; (b492c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4926:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4928:	4770      	bx	lr
   b492a:	bf00      	nop
   b492c:	2003e628 	.word	0x2003e628

000b4930 <serialEventRun>:
{
   b4930:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4932:	4b0b      	ldr	r3, [pc, #44]	; (b4960 <serialEventRun+0x30>)
   b4934:	b143      	cbz	r3, b4948 <serialEventRun+0x18>
   b4936:	f000 f967 	bl	b4c08 <_Z16_fetch_usbserialv>
   b493a:	6803      	ldr	r3, [r0, #0]
   b493c:	691b      	ldr	r3, [r3, #16]
   b493e:	4798      	blx	r3
   b4940:	2800      	cmp	r0, #0
   b4942:	dd01      	ble.n	b4948 <serialEventRun+0x18>
        serialEvent();
   b4944:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4948:	4b06      	ldr	r3, [pc, #24]	; (b4964 <serialEventRun+0x34>)
   b494a:	b143      	cbz	r3, b495e <serialEventRun+0x2e>
   b494c:	f000 faf6 	bl	b4f3c <_Z22__fetch_global_Serial1v>
   b4950:	6803      	ldr	r3, [r0, #0]
   b4952:	691b      	ldr	r3, [r3, #16]
   b4954:	4798      	blx	r3
   b4956:	2800      	cmp	r0, #0
   b4958:	dd01      	ble.n	b495e <serialEventRun+0x2e>
        serialEvent1();
   b495a:	f3af 8000 	nop.w
}
   b495e:	bd08      	pop	{r3, pc}
	...

000b4968 <_post_loop>:
{
   b4968:	b508      	push	{r3, lr}
	serialEventRun();
   b496a:	f7ff ffe1 	bl	b4930 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b496e:	f7ff fc79 	bl	b4264 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4972:	4b01      	ldr	r3, [pc, #4]	; (b4978 <_post_loop+0x10>)
   b4974:	6018      	str	r0, [r3, #0]
}
   b4976:	bd08      	pop	{r3, pc}
   b4978:	2003e758 	.word	0x2003e758

000b497c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b497c:	4805      	ldr	r0, [pc, #20]	; (b4994 <_Z33system_initialize_user_backup_ramv+0x18>)
   b497e:	4a06      	ldr	r2, [pc, #24]	; (b4998 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4980:	4906      	ldr	r1, [pc, #24]	; (b499c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4982:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4984:	1a12      	subs	r2, r2, r0
   b4986:	f000 fb07 	bl	b4f98 <memcpy>
    __backup_sram_signature = signature;
   b498a:	4b05      	ldr	r3, [pc, #20]	; (b49a0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b498c:	4a05      	ldr	r2, [pc, #20]	; (b49a4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b498e:	601a      	str	r2, [r3, #0]
}
   b4990:	bd08      	pop	{r3, pc}
   b4992:	bf00      	nop
   b4994:	2003f400 	.word	0x2003f400
   b4998:	2003f404 	.word	0x2003f404
   b499c:	000b5384 	.word	0x000b5384
   b49a0:	2003f400 	.word	0x2003f400
   b49a4:	9a271c1e 	.word	0x9a271c1e

000b49a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b49a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b49aa:	2300      	movs	r3, #0
   b49ac:	9300      	str	r3, [sp, #0]
   b49ae:	461a      	mov	r2, r3
   b49b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b49b4:	f7ff fd10 	bl	b43d8 <system_ctrl_set_result>
}
   b49b8:	b003      	add	sp, #12
   b49ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b49c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b49c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b49c2:	8843      	ldrh	r3, [r0, #2]
   b49c4:	2b0a      	cmp	r3, #10
   b49c6:	d008      	beq.n	b49da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b49c8:	2b50      	cmp	r3, #80	; 0x50
   b49ca:	d10b      	bne.n	b49e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b49cc:	4b09      	ldr	r3, [pc, #36]	; (b49f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b49ce:	681b      	ldr	r3, [r3, #0]
   b49d0:	b14b      	cbz	r3, b49e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b49d2:	b003      	add	sp, #12
   b49d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b49d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b49da:	f7ff ffe5 	bl	b49a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b49de:	b003      	add	sp, #12
   b49e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b49e4:	2300      	movs	r3, #0
   b49e6:	9300      	str	r3, [sp, #0]
   b49e8:	461a      	mov	r2, r3
   b49ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b49ee:	f7ff fcf3 	bl	b43d8 <system_ctrl_set_result>
}
   b49f2:	e7f4      	b.n	b49de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b49f4:	2003e6ec 	.word	0x2003e6ec

000b49f8 <module_user_init_hook>:
{
   b49f8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b49fa:	4812      	ldr	r0, [pc, #72]	; (b4a44 <module_user_init_hook+0x4c>)
   b49fc:	2100      	movs	r1, #0
   b49fe:	f7ff fd87 	bl	b4510 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4a02:	4b11      	ldr	r3, [pc, #68]	; (b4a48 <module_user_init_hook+0x50>)
   b4a04:	681a      	ldr	r2, [r3, #0]
   b4a06:	4b11      	ldr	r3, [pc, #68]	; (b4a4c <module_user_init_hook+0x54>)
   b4a08:	429a      	cmp	r2, r3
   b4a0a:	4b11      	ldr	r3, [pc, #68]	; (b4a50 <module_user_init_hook+0x58>)
   b4a0c:	bf0c      	ite	eq
   b4a0e:	2201      	moveq	r2, #1
   b4a10:	2200      	movne	r2, #0
   b4a12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4a14:	d001      	beq.n	b4a1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4a16:	f7ff ffb1 	bl	b497c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4a1a:	f7ff fc1b 	bl	b4254 <HAL_RNG_GetRandomNumber>
   b4a1e:	4604      	mov	r4, r0
    srand(seed);
   b4a20:	f000 fad0 	bl	b4fc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4a24:	4b0b      	ldr	r3, [pc, #44]	; (b4a54 <module_user_init_hook+0x5c>)
   b4a26:	b113      	cbz	r3, b4a2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4a2e:	2100      	movs	r1, #0
   b4a30:	4808      	ldr	r0, [pc, #32]	; (b4a54 <module_user_init_hook+0x5c>)
   b4a32:	f7ff fd45 	bl	b44c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4a3a:	4807      	ldr	r0, [pc, #28]	; (b4a58 <module_user_init_hook+0x60>)
   b4a3c:	2100      	movs	r1, #0
   b4a3e:	f7ff bcc1 	b.w	b43c4 <system_ctrl_set_app_request_handler>
   b4a42:	bf00      	nop
   b4a44:	000b4925 	.word	0x000b4925
   b4a48:	2003f400 	.word	0x2003f400
   b4a4c:	9a271c1e 	.word	0x9a271c1e
   b4a50:	2003e6e8 	.word	0x2003e6e8
   b4a54:	00000000 	.word	0x00000000
   b4a58:	000b49c1 	.word	0x000b49c1

000b4a5c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4a5c:	4770      	bx	lr

000b4a5e <_ZN9IPAddressD0Ev>:
   b4a5e:	b510      	push	{r4, lr}
   b4a60:	2118      	movs	r1, #24
   b4a62:	4604      	mov	r4, r0
   b4a64:	f7ff fb19 	bl	b409a <_ZdlPvj>
   b4a68:	4620      	mov	r0, r4
   b4a6a:	bd10      	pop	{r4, pc}

000b4a6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4a6e:	7d03      	ldrb	r3, [r0, #20]
   b4a70:	2b06      	cmp	r3, #6
{
   b4a72:	b08d      	sub	sp, #52	; 0x34
   b4a74:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a76:	f100 0704 	add.w	r7, r0, #4
   b4a7a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4a7e:	d012      	beq.n	b4aa6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4a80:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4a84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4a88:	220a      	movs	r2, #10
   b4a8a:	4630      	mov	r0, r6
   b4a8c:	f7ff fee7 	bl	b485e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4a90:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4a92:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4a94:	d019      	beq.n	b4aca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4a96:	2c00      	cmp	r4, #0
   b4a98:	d0f4      	beq.n	b4a84 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4a9a:	212e      	movs	r1, #46	; 0x2e
   b4a9c:	4630      	mov	r0, r6
   b4a9e:	f7ff fec5 	bl	b482c <_ZN5Print5printEc>
   b4aa2:	4404      	add	r4, r0
   b4aa4:	e7ee      	b.n	b4a84 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4aa6:	232f      	movs	r3, #47	; 0x2f
   b4aa8:	466a      	mov	r2, sp
   b4aaa:	4639      	mov	r1, r7
   b4aac:	200a      	movs	r0, #10
		buf[0] = 0;
   b4aae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ab2:	f7ff fbe7 	bl	b4284 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ab6:	4668      	mov	r0, sp
   b4ab8:	f000 faba 	bl	b5030 <strlen>
   b4abc:	6833      	ldr	r3, [r6, #0]
   b4abe:	4602      	mov	r2, r0
   b4ac0:	68db      	ldr	r3, [r3, #12]
   b4ac2:	4669      	mov	r1, sp
   b4ac4:	4630      	mov	r0, r6
   b4ac6:	4798      	blx	r3
   b4ac8:	4604      	mov	r4, r0
    }
    return n;
}
   b4aca:	4620      	mov	r0, r4
   b4acc:	b00d      	add	sp, #52	; 0x34
   b4ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ad0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ad0:	b510      	push	{r4, lr}
   b4ad2:	4b05      	ldr	r3, [pc, #20]	; (b4ae8 <_ZN9IPAddressC1Ev+0x18>)
   b4ad4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4ad6:	2211      	movs	r2, #17
   b4ad8:	f840 3b04 	str.w	r3, [r0], #4
   b4adc:	2100      	movs	r1, #0
   b4ade:	f000 fa69 	bl	b4fb4 <memset>
}
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	bd10      	pop	{r4, pc}
   b4ae6:	bf00      	nop
   b4ae8:	000b51b8 	.word	0x000b51b8

000b4aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4aec:	4603      	mov	r3, r0
   b4aee:	4a07      	ldr	r2, [pc, #28]	; (b4b0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4af0:	b510      	push	{r4, lr}
   b4af2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4af6:	f101 0210 	add.w	r2, r1, #16
   b4afa:	f851 4b04 	ldr.w	r4, [r1], #4
   b4afe:	f843 4b04 	str.w	r4, [r3], #4
   b4b02:	4291      	cmp	r1, r2
   b4b04:	d1f9      	bne.n	b4afa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4b06:	780a      	ldrb	r2, [r1, #0]
   b4b08:	701a      	strb	r2, [r3, #0]
}
   b4b0a:	bd10      	pop	{r4, pc}
   b4b0c:	000b51b8 	.word	0x000b51b8

000b4b10 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4b10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4b12:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4b16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4b1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4b1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4b22:	2304      	movs	r3, #4
   b4b24:	6041      	str	r1, [r0, #4]
   b4b26:	7503      	strb	r3, [r0, #20]
}
   b4b28:	bd10      	pop	{r4, pc}
	...

000b4b2c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4b2c:	b507      	push	{r0, r1, r2, lr}
   b4b2e:	4b06      	ldr	r3, [pc, #24]	; (b4b48 <_ZN9IPAddressC1EPKh+0x1c>)
   b4b30:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4b32:	78cb      	ldrb	r3, [r1, #3]
   b4b34:	9300      	str	r3, [sp, #0]
   b4b36:	788b      	ldrb	r3, [r1, #2]
   b4b38:	784a      	ldrb	r2, [r1, #1]
   b4b3a:	7809      	ldrb	r1, [r1, #0]
   b4b3c:	f7ff ffe8 	bl	b4b10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4b40:	b003      	add	sp, #12
   b4b42:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b46:	bf00      	nop
   b4b48:	000b51b8 	.word	0x000b51b8

000b4b4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b4c:	7441      	strb	r1, [r0, #17]
}
   b4b4e:	4770      	bx	lr

000b4b50 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b50:	4770      	bx	lr

000b4b52 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b52:	4770      	bx	lr

000b4b54 <_ZN9USBSerial4readEv>:
{
   b4b54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4b56:	2100      	movs	r1, #0
   b4b58:	7c00      	ldrb	r0, [r0, #16]
   b4b5a:	f7ff fbfb 	bl	b4354 <HAL_USB_USART_Receive_Data>
}
   b4b5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b62:	bd08      	pop	{r3, pc}

000b4b64 <_ZN9USBSerial4peekEv>:
{
   b4b64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4b66:	2101      	movs	r1, #1
   b4b68:	7c00      	ldrb	r0, [r0, #16]
   b4b6a:	f7ff fbf3 	bl	b4354 <HAL_USB_USART_Receive_Data>
}
   b4b6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b72:	bd08      	pop	{r3, pc}

000b4b74 <_ZN9USBSerial17availableForWriteEv>:
{
   b4b74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4b76:	7c00      	ldrb	r0, [r0, #16]
   b4b78:	f7ff fbe4 	bl	b4344 <HAL_USB_USART_Available_Data_For_Write>
}
   b4b7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b80:	bd08      	pop	{r3, pc}

000b4b82 <_ZN9USBSerial9availableEv>:
{
   b4b82:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4b84:	7c00      	ldrb	r0, [r0, #16]
   b4b86:	f7ff fbd5 	bl	b4334 <HAL_USB_USART_Available_Data>
}
   b4b8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b8e:	bd08      	pop	{r3, pc}

000b4b90 <_ZN9USBSerial5writeEh>:
{
   b4b90:	b513      	push	{r0, r1, r4, lr}
   b4b92:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b94:	7c00      	ldrb	r0, [r0, #16]
{
   b4b96:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b98:	f7ff fbd4 	bl	b4344 <HAL_USB_USART_Available_Data_For_Write>
   b4b9c:	2800      	cmp	r0, #0
   b4b9e:	9901      	ldr	r1, [sp, #4]
   b4ba0:	dc01      	bgt.n	b4ba6 <_ZN9USBSerial5writeEh+0x16>
   b4ba2:	7c60      	ldrb	r0, [r4, #17]
   b4ba4:	b120      	cbz	r0, b4bb0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4ba6:	7c20      	ldrb	r0, [r4, #16]
   b4ba8:	f7ff fbdc 	bl	b4364 <HAL_USB_USART_Send_Data>
   b4bac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4bb0:	b002      	add	sp, #8
   b4bb2:	bd10      	pop	{r4, pc}

000b4bb4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4bb4:	7c00      	ldrb	r0, [r0, #16]
   b4bb6:	f7ff bbdd 	b.w	b4374 <HAL_USB_USART_Flush_Data>

000b4bba <_ZN9USBSerialD0Ev>:
   b4bba:	b510      	push	{r4, lr}
   b4bbc:	2114      	movs	r1, #20
   b4bbe:	4604      	mov	r4, r0
   b4bc0:	f7ff fa6b 	bl	b409a <_ZdlPvj>
   b4bc4:	4620      	mov	r0, r4
   b4bc6:	bd10      	pop	{r4, pc}

000b4bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4bc8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4bce:	4604      	mov	r4, r0
   b4bd0:	4608      	mov	r0, r1
   b4bd2:	2100      	movs	r1, #0
   b4bd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4bd8:	4b04      	ldr	r3, [pc, #16]	; (b4bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4bda:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4bdc:	2301      	movs	r3, #1
  _serial = serial;
   b4bde:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4be0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4be2:	4611      	mov	r1, r2
   b4be4:	f7ff fb96 	bl	b4314 <HAL_USB_USART_Init>
}
   b4be8:	4620      	mov	r0, r4
   b4bea:	bd10      	pop	{r4, pc}
   b4bec:	000b51cc 	.word	0x000b51cc

000b4bf0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4bf0:	7c00      	ldrb	r0, [r0, #16]
   b4bf2:	2200      	movs	r2, #0
   b4bf4:	f7ff bb96 	b.w	b4324 <HAL_USB_USART_Begin>

000b4bf8 <_Z19acquireSerialBufferv>:
{
   b4bf8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4bfa:	2214      	movs	r2, #20
{
   b4bfc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4bfe:	2100      	movs	r1, #0
   b4c00:	f000 f9d8 	bl	b4fb4 <memset>
}
   b4c04:	4620      	mov	r0, r4
   b4c06:	bd10      	pop	{r4, pc}

000b4c08 <_Z16_fetch_usbserialv>:
{
   b4c08:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c0a:	4c0f      	ldr	r4, [pc, #60]	; (b4c48 <_Z16_fetch_usbserialv+0x40>)
{
   b4c0c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4c0e:	a803      	add	r0, sp, #12
   b4c10:	f7ff fff2 	bl	b4bf8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c14:	7821      	ldrb	r1, [r4, #0]
   b4c16:	f3bf 8f5b 	dmb	ish
   b4c1a:	f011 0101 	ands.w	r1, r1, #1
   b4c1e:	d10f      	bne.n	b4c40 <_Z16_fetch_usbserialv+0x38>
   b4c20:	4620      	mov	r0, r4
   b4c22:	9101      	str	r1, [sp, #4]
   b4c24:	f7ff fa3b 	bl	b409e <__cxa_guard_acquire>
   b4c28:	9901      	ldr	r1, [sp, #4]
   b4c2a:	b148      	cbz	r0, b4c40 <_Z16_fetch_usbserialv+0x38>
   b4c2c:	aa03      	add	r2, sp, #12
   b4c2e:	4807      	ldr	r0, [pc, #28]	; (b4c4c <_Z16_fetch_usbserialv+0x44>)
   b4c30:	f7ff ffca 	bl	b4bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4c34:	4620      	mov	r0, r4
   b4c36:	f7ff fa37 	bl	b40a8 <__cxa_guard_release>
   b4c3a:	4805      	ldr	r0, [pc, #20]	; (b4c50 <_Z16_fetch_usbserialv+0x48>)
   b4c3c:	f000 f9a6 	bl	b4f8c <atexit>
	return _usbserial;
}
   b4c40:	4802      	ldr	r0, [pc, #8]	; (b4c4c <_Z16_fetch_usbserialv+0x44>)
   b4c42:	b008      	add	sp, #32
   b4c44:	bd10      	pop	{r4, pc}
   b4c46:	bf00      	nop
   b4c48:	2003e6f0 	.word	0x2003e6f0
   b4c4c:	2003e6f4 	.word	0x2003e6f4
   b4c50:	000b4b51 	.word	0x000b4b51

000b4c54 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4c54:	2200      	movs	r2, #0
   b4c56:	6840      	ldr	r0, [r0, #4]
   b4c58:	4611      	mov	r1, r2
   b4c5a:	f7ff bbe9 	b.w	b4430 <network_ready>

000b4c5e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4c5e:	2200      	movs	r2, #0
   b4c60:	6840      	ldr	r0, [r0, #4]
   b4c62:	4611      	mov	r1, r2
   b4c64:	f7ff bc04 	b.w	b4470 <network_listening>

000b4c68 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c68:	2200      	movs	r2, #0
   b4c6a:	6840      	ldr	r0, [r0, #4]
   b4c6c:	4611      	mov	r1, r2
   b4c6e:	f7ff bc0f 	b.w	b4490 <network_get_listen_timeout>

000b4c72 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c72:	6840      	ldr	r0, [r0, #4]
   b4c74:	2200      	movs	r2, #0
   b4c76:	f7ff bc03 	b.w	b4480 <network_set_listen_timeout>

000b4c7a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c7a:	6840      	ldr	r0, [r0, #4]
   b4c7c:	2200      	movs	r2, #0
   b4c7e:	f081 0101 	eor.w	r1, r1, #1
   b4c82:	f7ff bbed 	b.w	b4460 <network_listen>

000b4c86 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c86:	2300      	movs	r3, #0
   b4c88:	6840      	ldr	r0, [r0, #4]
   b4c8a:	461a      	mov	r2, r3
   b4c8c:	4619      	mov	r1, r3
   b4c8e:	f7ff bbdf 	b.w	b4450 <network_off>

000b4c92 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c92:	2300      	movs	r3, #0
   b4c94:	6840      	ldr	r0, [r0, #4]
   b4c96:	461a      	mov	r2, r3
   b4c98:	4619      	mov	r1, r3
   b4c9a:	f7ff bbd1 	b.w	b4440 <network_on>

000b4c9e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4c9e:	2200      	movs	r2, #0
   b4ca0:	6840      	ldr	r0, [r0, #4]
   b4ca2:	4611      	mov	r1, r2
   b4ca4:	f7ff bbb4 	b.w	b4410 <network_connecting>

000b4ca8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ca8:	6840      	ldr	r0, [r0, #4]
   b4caa:	2200      	movs	r2, #0
   b4cac:	2102      	movs	r1, #2
   b4cae:	f7ff bbb7 	b.w	b4420 <network_disconnect>

000b4cb2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cb2:	2300      	movs	r3, #0
   b4cb4:	6840      	ldr	r0, [r0, #4]
   b4cb6:	461a      	mov	r2, r3
   b4cb8:	f7ff bba2 	b.w	b4400 <network_connect>

000b4cbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4cbc:	4b08      	ldr	r3, [pc, #32]	; (b4ce0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4cbe:	b510      	push	{r4, lr}
   b4cc0:	2428      	movs	r4, #40	; 0x28
   b4cc2:	4622      	mov	r2, r4
   b4cc4:	4618      	mov	r0, r3
   b4cc6:	2100      	movs	r1, #0
   b4cc8:	f000 f974 	bl	b4fb4 <memset>
   b4ccc:	4b05      	ldr	r3, [pc, #20]	; (b4ce4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4cce:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4cd0:	f04f 32ff 	mov.w	r2, #4294967295
   b4cd4:	6042      	str	r2, [r0, #4]
   b4cd6:	2204      	movs	r2, #4
   b4cd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4cda:	4a03      	ldr	r2, [pc, #12]	; (b4ce8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4cdc:	601a      	str	r2, [r3, #0]
   b4cde:	bd10      	pop	{r4, pc}
   b4ce0:	2003e710 	.word	0x2003e710
   b4ce4:	2003e708 	.word	0x2003e708
   b4ce8:	000b51fc 	.word	0x000b51fc

000b4cec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4cec:	4770      	bx	lr

000b4cee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4cee:	7441      	strb	r1, [r0, #17]
}
   b4cf0:	4770      	bx	lr

000b4cf2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4cf2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4cf4:	7c00      	ldrb	r0, [r0, #16]
   b4cf6:	f7ff faf5 	bl	b42e4 <hal_usart_available_data_for_write>
}
   b4cfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cfe:	bd08      	pop	{r3, pc}

000b4d00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4d00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4d02:	7c00      	ldrb	r0, [r0, #16]
   b4d04:	f7ff face 	bl	b42a4 <hal_usart_available>
}
   b4d08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d0c:	bd08      	pop	{r3, pc}

000b4d0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4d0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4d10:	7c00      	ldrb	r0, [r0, #16]
   b4d12:	f7ff fad7 	bl	b42c4 <hal_usart_peek>
}
   b4d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d1a:	bd08      	pop	{r3, pc}

000b4d1c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4d1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4d1e:	7c00      	ldrb	r0, [r0, #16]
   b4d20:	f7ff fac8 	bl	b42b4 <hal_usart_read>
}
   b4d24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d28:	bd08      	pop	{r3, pc}

000b4d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4d2a:	7c00      	ldrb	r0, [r0, #16]
   b4d2c:	f7ff bad2 	b.w	b42d4 <hal_usart_flush>

000b4d30 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d32:	7c45      	ldrb	r5, [r0, #17]
{
   b4d34:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d36:	b12d      	cbz	r5, b4d44 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4d38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4d3a:	b003      	add	sp, #12
   b4d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4d40:	f7ff baa8 	b.w	b4294 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d44:	7c00      	ldrb	r0, [r0, #16]
   b4d46:	9101      	str	r1, [sp, #4]
   b4d48:	f7ff facc 	bl	b42e4 <hal_usart_available_data_for_write>
   b4d4c:	2800      	cmp	r0, #0
   b4d4e:	9901      	ldr	r1, [sp, #4]
   b4d50:	dcf2      	bgt.n	b4d38 <_ZN11USARTSerial5writeEh+0x8>
}
   b4d52:	4628      	mov	r0, r5
   b4d54:	b003      	add	sp, #12
   b4d56:	bd30      	pop	{r4, r5, pc}

000b4d58 <_ZN11USARTSerialD0Ev>:
   b4d58:	b510      	push	{r4, lr}
   b4d5a:	2114      	movs	r1, #20
   b4d5c:	4604      	mov	r4, r0
   b4d5e:	f7ff f99c 	bl	b409a <_ZdlPvj>
   b4d62:	4620      	mov	r0, r4
   b4d64:	bd10      	pop	{r4, pc}
	...

000b4d68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4d68:	b510      	push	{r4, lr}
   b4d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d6e:	4604      	mov	r4, r0
   b4d70:	4608      	mov	r0, r1
   b4d72:	4611      	mov	r1, r2
   b4d74:	2200      	movs	r2, #0
   b4d76:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d7a:	4b04      	ldr	r3, [pc, #16]	; (b4d8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4d7c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d7e:	2301      	movs	r3, #1
  _serial = serial;
   b4d80:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d82:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4d84:	f7ff fabe 	bl	b4304 <hal_usart_init_ex>
}
   b4d88:	4620      	mov	r0, r4
   b4d8a:	bd10      	pop	{r4, pc}
   b4d8c:	000b5238 	.word	0x000b5238

000b4d90 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b4d90:	7c00      	ldrb	r0, [r0, #16]
   b4d92:	2300      	movs	r3, #0
   b4d94:	f7ff baae 	b.w	b42f4 <hal_usart_begin_config>

000b4d98 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b4d98:	2200      	movs	r2, #0
   b4d9a:	f7ff bff9 	b.w	b4d90 <_ZN11USARTSerial5beginEmm>

000b4d9e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4d9e:	2300      	movs	r3, #0
   b4da0:	6840      	ldr	r0, [r0, #4]
   b4da2:	461a      	mov	r2, r3
   b4da4:	f7ff bb2c 	b.w	b4400 <network_connect>

000b4da8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4da8:	6840      	ldr	r0, [r0, #4]
   b4daa:	2200      	movs	r2, #0
   b4dac:	2102      	movs	r1, #2
   b4dae:	f7ff bb37 	b.w	b4420 <network_disconnect>

000b4db2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4db2:	2200      	movs	r2, #0
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	4611      	mov	r1, r2
   b4db8:	f7ff bb2a 	b.w	b4410 <network_connecting>

000b4dbc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4dbc:	2200      	movs	r2, #0
   b4dbe:	6840      	ldr	r0, [r0, #4]
   b4dc0:	4611      	mov	r1, r2
   b4dc2:	f7ff bb35 	b.w	b4430 <network_ready>

000b4dc6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4dc6:	2300      	movs	r3, #0
   b4dc8:	6840      	ldr	r0, [r0, #4]
   b4dca:	461a      	mov	r2, r3
   b4dcc:	4619      	mov	r1, r3
   b4dce:	f7ff bb37 	b.w	b4440 <network_on>

000b4dd2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4dd2:	2300      	movs	r3, #0
   b4dd4:	6840      	ldr	r0, [r0, #4]
   b4dd6:	461a      	mov	r2, r3
   b4dd8:	4619      	mov	r1, r3
   b4dda:	f7ff bb39 	b.w	b4450 <network_off>

000b4dde <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4dde:	6840      	ldr	r0, [r0, #4]
   b4de0:	2100      	movs	r1, #0
   b4de2:	f7ff bb5d 	b.w	b44a0 <network_is_on>

000b4de6 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4de6:	6840      	ldr	r0, [r0, #4]
   b4de8:	2100      	movs	r1, #0
   b4dea:	f7ff bb61 	b.w	b44b0 <network_is_off>

000b4dee <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4dee:	6840      	ldr	r0, [r0, #4]
   b4df0:	2200      	movs	r2, #0
   b4df2:	f081 0101 	eor.w	r1, r1, #1
   b4df6:	f7ff bb33 	b.w	b4460 <network_listen>

000b4dfa <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4dfa:	6840      	ldr	r0, [r0, #4]
   b4dfc:	2200      	movs	r2, #0
   b4dfe:	f7ff bb3f 	b.w	b4480 <network_set_listen_timeout>

000b4e02 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4e02:	2200      	movs	r2, #0
   b4e04:	6840      	ldr	r0, [r0, #4]
   b4e06:	4611      	mov	r1, r2
   b4e08:	f7ff bb42 	b.w	b4490 <network_get_listen_timeout>

000b4e0c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	6840      	ldr	r0, [r0, #4]
   b4e10:	4611      	mov	r1, r2
   b4e12:	f7ff bb2d 	b.w	b4470 <network_listening>

000b4e16 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e1a:	b095      	sub	sp, #84	; 0x54
   b4e1c:	4614      	mov	r4, r2
   b4e1e:	460d      	mov	r5, r1
   b4e20:	4607      	mov	r7, r0
    IPAddress addr;
   b4e22:	f7ff fe55 	bl	b4ad0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4e26:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4e28:	221c      	movs	r2, #28
   b4e2a:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4e2c:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4e2e:	f000 f8c1 	bl	b4fb4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4e32:	2340      	movs	r3, #64	; 0x40
   b4e34:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4e36:	4620      	mov	r0, r4
   b4e38:	466b      	mov	r3, sp
   b4e3a:	aa0c      	add	r2, sp, #48	; 0x30
   b4e3c:	2100      	movs	r1, #0
   b4e3e:	f7ff fa01 	bl	b4244 <netdb_getaddrinfo>
    if (!r) {
   b4e42:	4604      	mov	r4, r0
   b4e44:	2800      	cmp	r0, #0
   b4e46:	d14b      	bne.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e48:	4602      	mov	r2, r0
   b4e4a:	2101      	movs	r1, #1
   b4e4c:	6868      	ldr	r0, [r5, #4]
   b4e4e:	f7ff faef 	bl	b4430 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e52:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e54:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e56:	4622      	mov	r2, r4
   b4e58:	6868      	ldr	r0, [r5, #4]
   b4e5a:	f7ff fae9 	bl	b4430 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e5e:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e60:	4681      	mov	r9, r0
        bool ok = false;
   b4e62:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e64:	2e00      	cmp	r6, #0
   b4e66:	d03b      	beq.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4e68:	2900      	cmp	r1, #0
   b4e6a:	d139      	bne.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4e6c:	6873      	ldr	r3, [r6, #4]
   b4e6e:	2b02      	cmp	r3, #2
   b4e70:	d003      	beq.n	b4e7a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4e72:	2b0a      	cmp	r3, #10
   b4e74:	d011      	beq.n	b4e9a <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e76:	69f6      	ldr	r6, [r6, #28]
   b4e78:	e7f4      	b.n	b4e64 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4e7a:	f1b8 0f00 	cmp.w	r8, #0
   b4e7e:	d0fa      	beq.n	b4e76 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4e80:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4e82:	a806      	add	r0, sp, #24
   b4e84:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4e86:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4e88:	f7ff fe50 	bl	b4b2c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e8e:	1d3c      	adds	r4, r7, #4
   b4e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e92:	682b      	ldr	r3, [r5, #0]
   b4e94:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e96:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4e98:	e7ed      	b.n	b4e76 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4e9a:	f1b9 0f00 	cmp.w	r9, #0
   b4e9e:	d0ea      	beq.n	b4e76 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4ea0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4ea2:	2210      	movs	r2, #16
   b4ea4:	a801      	add	r0, sp, #4
   b4ea6:	f000 f885 	bl	b4fb4 <memset>
                    a.v = 6;
   b4eaa:	2306      	movs	r3, #6
   b4eac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4eb0:	ad01      	add	r5, sp, #4
   b4eb2:	f104 0308 	add.w	r3, r4, #8
   b4eb6:	3418      	adds	r4, #24
   b4eb8:	6818      	ldr	r0, [r3, #0]
   b4eba:	6859      	ldr	r1, [r3, #4]
   b4ebc:	462a      	mov	r2, r5
   b4ebe:	c203      	stmia	r2!, {r0, r1}
   b4ec0:	3308      	adds	r3, #8
   b4ec2:	42a3      	cmp	r3, r4
   b4ec4:	4615      	mov	r5, r2
   b4ec6:	d1f7      	bne.n	b4eb8 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4ec8:	a901      	add	r1, sp, #4
   b4eca:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ecc:	ad07      	add	r5, sp, #28
   b4ece:	f7ff fe0d 	bl	b4aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ed4:	1d3c      	adds	r4, r7, #4
   b4ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ed8:	682b      	ldr	r3, [r5, #0]
   b4eda:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4edc:	4649      	mov	r1, r9
   b4ede:	e7ca      	b.n	b4e76 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4ee0:	9800      	ldr	r0, [sp, #0]
   b4ee2:	f7ff f9a7 	bl	b4234 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4ee6:	4638      	mov	r0, r7
   b4ee8:	b015      	add	sp, #84	; 0x54
   b4eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b4ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4ef0:	4b02      	ldr	r3, [pc, #8]	; (b4efc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4ef2:	4a03      	ldr	r2, [pc, #12]	; (b4f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4ef4:	601a      	str	r2, [r3, #0]
   b4ef6:	2200      	movs	r2, #0
   b4ef8:	605a      	str	r2, [r3, #4]

} // spark
   b4efa:	4770      	bx	lr
   b4efc:	2003e738 	.word	0x2003e738
   b4f00:	000b5268 	.word	0x000b5268

000b4f04 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4f04:	4770      	bx	lr
	...

000b4f08 <_Z20acquireSerial1Bufferv>:
{
   b4f08:	b538      	push	{r3, r4, r5, lr}
   b4f0a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4f0c:	2514      	movs	r5, #20
   b4f0e:	462a      	mov	r2, r5
   b4f10:	2100      	movs	r1, #0
   b4f12:	f000 f84f 	bl	b4fb4 <memset>
   b4f16:	8025      	strh	r5, [r4, #0]
   b4f18:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f1a:	4907      	ldr	r1, [pc, #28]	; (b4f38 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4f1c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f1e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4f20:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f22:	f000 f831 	bl	b4f88 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f26:	4904      	ldr	r1, [pc, #16]	; (b4f38 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4f28:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f2a:	4628      	mov	r0, r5
   b4f2c:	f000 f82c 	bl	b4f88 <_ZnajRKSt9nothrow_t>
    };
   b4f30:	60e0      	str	r0, [r4, #12]
}
   b4f32:	4620      	mov	r0, r4
   b4f34:	bd38      	pop	{r3, r4, r5, pc}
   b4f36:	bf00      	nop
   b4f38:	000b529c 	.word	0x000b529c

000b4f3c <_Z22__fetch_global_Serial1v>:
{
   b4f3c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4f3e:	4d0e      	ldr	r5, [pc, #56]	; (b4f78 <_Z22__fetch_global_Serial1v+0x3c>)
   b4f40:	7829      	ldrb	r1, [r5, #0]
   b4f42:	f3bf 8f5b 	dmb	ish
   b4f46:	f011 0401 	ands.w	r4, r1, #1
{
   b4f4a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4f4c:	d111      	bne.n	b4f72 <_Z22__fetch_global_Serial1v+0x36>
   b4f4e:	4628      	mov	r0, r5
   b4f50:	f7ff f8a5 	bl	b409e <__cxa_guard_acquire>
   b4f54:	b168      	cbz	r0, b4f72 <_Z22__fetch_global_Serial1v+0x36>
   b4f56:	a801      	add	r0, sp, #4
   b4f58:	f7ff ffd6 	bl	b4f08 <_Z20acquireSerial1Bufferv>
   b4f5c:	aa01      	add	r2, sp, #4
   b4f5e:	4621      	mov	r1, r4
   b4f60:	4806      	ldr	r0, [pc, #24]	; (b4f7c <_Z22__fetch_global_Serial1v+0x40>)
   b4f62:	f7ff ff01 	bl	b4d68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4f66:	4628      	mov	r0, r5
   b4f68:	f7ff f89e 	bl	b40a8 <__cxa_guard_release>
   b4f6c:	4804      	ldr	r0, [pc, #16]	; (b4f80 <_Z22__fetch_global_Serial1v+0x44>)
   b4f6e:	f000 f80d 	bl	b4f8c <atexit>
    return serial1;
}
   b4f72:	4802      	ldr	r0, [pc, #8]	; (b4f7c <_Z22__fetch_global_Serial1v+0x40>)
   b4f74:	b007      	add	sp, #28
   b4f76:	bd30      	pop	{r4, r5, pc}
   b4f78:	2003e740 	.word	0x2003e740
   b4f7c:	2003e744 	.word	0x2003e744
   b4f80:	000b4f05 	.word	0x000b4f05

000b4f84 <_ZnwjRKSt9nothrow_t>:
   b4f84:	f7ff b885 	b.w	b4092 <_Znwj>

000b4f88 <_ZnajRKSt9nothrow_t>:
   b4f88:	f7ff b885 	b.w	b4096 <_Znaj>

000b4f8c <atexit>:
   b4f8c:	2300      	movs	r3, #0
   b4f8e:	4601      	mov	r1, r0
   b4f90:	461a      	mov	r2, r3
   b4f92:	4618      	mov	r0, r3
   b4f94:	f000 b854 	b.w	b5040 <__register_exitproc>

000b4f98 <memcpy>:
   b4f98:	440a      	add	r2, r1
   b4f9a:	4291      	cmp	r1, r2
   b4f9c:	f100 33ff 	add.w	r3, r0, #4294967295
   b4fa0:	d100      	bne.n	b4fa4 <memcpy+0xc>
   b4fa2:	4770      	bx	lr
   b4fa4:	b510      	push	{r4, lr}
   b4fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4faa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4fae:	4291      	cmp	r1, r2
   b4fb0:	d1f9      	bne.n	b4fa6 <memcpy+0xe>
   b4fb2:	bd10      	pop	{r4, pc}

000b4fb4 <memset>:
   b4fb4:	4402      	add	r2, r0
   b4fb6:	4603      	mov	r3, r0
   b4fb8:	4293      	cmp	r3, r2
   b4fba:	d100      	bne.n	b4fbe <memset+0xa>
   b4fbc:	4770      	bx	lr
   b4fbe:	f803 1b01 	strb.w	r1, [r3], #1
   b4fc2:	e7f9      	b.n	b4fb8 <memset+0x4>

000b4fc4 <srand>:
   b4fc4:	b538      	push	{r3, r4, r5, lr}
   b4fc6:	4b10      	ldr	r3, [pc, #64]	; (b5008 <srand+0x44>)
   b4fc8:	681d      	ldr	r5, [r3, #0]
   b4fca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4fcc:	4604      	mov	r4, r0
   b4fce:	b9b3      	cbnz	r3, b4ffe <srand+0x3a>
   b4fd0:	2018      	movs	r0, #24
   b4fd2:	f7ff fa7d 	bl	b44d0 <malloc>
   b4fd6:	4602      	mov	r2, r0
   b4fd8:	63a8      	str	r0, [r5, #56]	; 0x38
   b4fda:	b920      	cbnz	r0, b4fe6 <srand+0x22>
   b4fdc:	4b0b      	ldr	r3, [pc, #44]	; (b500c <srand+0x48>)
   b4fde:	480c      	ldr	r0, [pc, #48]	; (b5010 <srand+0x4c>)
   b4fe0:	2142      	movs	r1, #66	; 0x42
   b4fe2:	f7ff fa8d 	bl	b4500 <__assert_func>
   b4fe6:	490b      	ldr	r1, [pc, #44]	; (b5014 <srand+0x50>)
   b4fe8:	4b0b      	ldr	r3, [pc, #44]	; (b5018 <srand+0x54>)
   b4fea:	e9c0 1300 	strd	r1, r3, [r0]
   b4fee:	4b0b      	ldr	r3, [pc, #44]	; (b501c <srand+0x58>)
   b4ff0:	6083      	str	r3, [r0, #8]
   b4ff2:	230b      	movs	r3, #11
   b4ff4:	8183      	strh	r3, [r0, #12]
   b4ff6:	2100      	movs	r1, #0
   b4ff8:	2001      	movs	r0, #1
   b4ffa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4ffe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5000:	2200      	movs	r2, #0
   b5002:	611c      	str	r4, [r3, #16]
   b5004:	615a      	str	r2, [r3, #20]
   b5006:	bd38      	pop	{r3, r4, r5, pc}
   b5008:	2003e628 	.word	0x2003e628
   b500c:	000b529d 	.word	0x000b529d
   b5010:	000b52b4 	.word	0x000b52b4
   b5014:	abcd330e 	.word	0xabcd330e
   b5018:	e66d1234 	.word	0xe66d1234
   b501c:	0005deec 	.word	0x0005deec

000b5020 <strcpy>:
   b5020:	4603      	mov	r3, r0
   b5022:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5026:	f803 2b01 	strb.w	r2, [r3], #1
   b502a:	2a00      	cmp	r2, #0
   b502c:	d1f9      	bne.n	b5022 <strcpy+0x2>
   b502e:	4770      	bx	lr

000b5030 <strlen>:
   b5030:	4603      	mov	r3, r0
   b5032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5036:	2a00      	cmp	r2, #0
   b5038:	d1fb      	bne.n	b5032 <strlen+0x2>
   b503a:	1a18      	subs	r0, r3, r0
   b503c:	3801      	subs	r0, #1
   b503e:	4770      	bx	lr

000b5040 <__register_exitproc>:
   b5040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5044:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5100 <__register_exitproc+0xc0>
   b5048:	4606      	mov	r6, r0
   b504a:	f8d8 0000 	ldr.w	r0, [r8]
   b504e:	461f      	mov	r7, r3
   b5050:	460d      	mov	r5, r1
   b5052:	4691      	mov	r9, r2
   b5054:	f000 f856 	bl	b5104 <__retarget_lock_acquire_recursive>
   b5058:	4b25      	ldr	r3, [pc, #148]	; (b50f0 <__register_exitproc+0xb0>)
   b505a:	681c      	ldr	r4, [r3, #0]
   b505c:	b934      	cbnz	r4, b506c <__register_exitproc+0x2c>
   b505e:	4c25      	ldr	r4, [pc, #148]	; (b50f4 <__register_exitproc+0xb4>)
   b5060:	601c      	str	r4, [r3, #0]
   b5062:	4b25      	ldr	r3, [pc, #148]	; (b50f8 <__register_exitproc+0xb8>)
   b5064:	b113      	cbz	r3, b506c <__register_exitproc+0x2c>
   b5066:	681b      	ldr	r3, [r3, #0]
   b5068:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b506c:	6863      	ldr	r3, [r4, #4]
   b506e:	2b1f      	cmp	r3, #31
   b5070:	dd07      	ble.n	b5082 <__register_exitproc+0x42>
   b5072:	f8d8 0000 	ldr.w	r0, [r8]
   b5076:	f000 f847 	bl	b5108 <__retarget_lock_release_recursive>
   b507a:	f04f 30ff 	mov.w	r0, #4294967295
   b507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5082:	b34e      	cbz	r6, b50d8 <__register_exitproc+0x98>
   b5084:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5088:	b988      	cbnz	r0, b50ae <__register_exitproc+0x6e>
   b508a:	4b1c      	ldr	r3, [pc, #112]	; (b50fc <__register_exitproc+0xbc>)
   b508c:	b923      	cbnz	r3, b5098 <__register_exitproc+0x58>
   b508e:	f8d8 0000 	ldr.w	r0, [r8]
   b5092:	f000 f838 	bl	b5106 <__retarget_lock_release>
   b5096:	e7f0      	b.n	b507a <__register_exitproc+0x3a>
   b5098:	f44f 7084 	mov.w	r0, #264	; 0x108
   b509c:	f7ff fa18 	bl	b44d0 <malloc>
   b50a0:	2800      	cmp	r0, #0
   b50a2:	d0f4      	beq.n	b508e <__register_exitproc+0x4e>
   b50a4:	2300      	movs	r3, #0
   b50a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b50aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b50ae:	6863      	ldr	r3, [r4, #4]
   b50b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b50b4:	2201      	movs	r2, #1
   b50b6:	409a      	lsls	r2, r3
   b50b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b50bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b50c0:	4313      	orrs	r3, r2
   b50c2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b50c6:	2e02      	cmp	r6, #2
   b50c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b50cc:	bf02      	ittt	eq
   b50ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b50d2:	4313      	orreq	r3, r2
   b50d4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b50d8:	6863      	ldr	r3, [r4, #4]
   b50da:	f8d8 0000 	ldr.w	r0, [r8]
   b50de:	1c5a      	adds	r2, r3, #1
   b50e0:	3302      	adds	r3, #2
   b50e2:	6062      	str	r2, [r4, #4]
   b50e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b50e8:	f000 f80e 	bl	b5108 <__retarget_lock_release_recursive>
   b50ec:	2000      	movs	r0, #0
   b50ee:	e7c6      	b.n	b507e <__register_exitproc+0x3e>
   b50f0:	2003e7e8 	.word	0x2003e7e8
   b50f4:	2003e75c 	.word	0x2003e75c
   b50f8:	00000000 	.word	0x00000000
   b50fc:	000b44d1 	.word	0x000b44d1
   b5100:	2003e68c 	.word	0x2003e68c

000b5104 <__retarget_lock_acquire_recursive>:
   b5104:	4770      	bx	lr

000b5106 <__retarget_lock_release>:
   b5106:	4770      	bx	lr

000b5108 <__retarget_lock_release_recursive>:
   b5108:	4770      	bx	lr

000b510a <link_code_end>:
	...

000b510c <dynalib_user>:
   b510c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b511c:	0000 0000 0052 0000                         ....R...

000b5124 <_ZTVN5spark13EthernetClassE>:
	...
   b512c:	457f 000b 4575 000b 456b 000b 4561 000b     .E..uE..kE..aE..
   b513c:	4555 000b 4549 000b 4ddf 000b 4de7 000b     UE..IE...M...M..
   b514c:	453d 000b 4535 000b 452b 000b 4521 000b     =E..5E..+E..!E..
   b515c:	4e17 000b 6977 6972 676e 5300 7379 6574     .N..wiring.Syste
   b516c:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b517c:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b518c:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b519c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b51ac:	0065 0000                                   e...

000b51b0 <_ZTV9IPAddress>:
	...
   b51b8:	4a6d 000b 4a5d 000b 4a5f 000b               mJ..]J.._J..

000b51c4 <_ZTV9USBSerial>:
	...
   b51cc:	4b53 000b 4bbb 000b 4b91 000b 47f9 000b     SK...K...K...G..
   b51dc:	4b83 000b 4b55 000b 4b65 000b 4bb5 000b     .K..UK..eK...K..
   b51ec:	4b75 000b 4b4d 000b                         uK..MK..

000b51f4 <_ZTVN5spark13CellularClassE>:
	...
   b51fc:	4cb3 000b 4ca9 000b 4c9f 000b 4c55 000b     .L...L...L..UL..
   b520c:	4c93 000b 4c87 000b 4ddf 000b 4de7 000b     .L...L...M...M..
   b521c:	4c7b 000b 4c73 000b 4c69 000b 4c5f 000b     {L..sL..iL.._L..
   b522c:	4e17 000b                                   .N..

000b5230 <_ZTV11USARTSerial>:
	...
   b5238:	4ced 000b 4d59 000b 4d31 000b 47f9 000b     .L..YM..1M...G..
   b5248:	4d01 000b 4d1d 000b 4d0f 000b 4d2b 000b     .M...M...M..+M..
   b5258:	4cef 000b 4cf3 000b                         .L...L..

000b5260 <_ZTVN5spark12NetworkClassE>:
	...
   b5268:	4d9f 000b 4da9 000b 4db3 000b 4dbd 000b     .M...M...M...M..
   b5278:	4dc7 000b 4dd3 000b 4ddf 000b 4de7 000b     .M...M...M...M..
   b5288:	4def 000b 4dfb 000b 4e03 000b 4e0d 000b     .M...M...N...N..
   b5298:	4e17 000b                                   .N..

000b529c <_ZSt7nothrow>:
   b529c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b52ac:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b52bc:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b52cc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b52dc:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b52ec:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b52fc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b530c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b531c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b532c:	646e 632e                                    nd.c.

000b5331 <link_const_variable_data_end>:
   b5331:	00          	.byte	0x00
	...

000b5334 <link_constructors_location>:
   b5334:	000b41cd 	.word	0x000b41cd
   b5338:	000b4589 	.word	0x000b4589
   b533c:	000b46bd 	.word	0x000b46bd
   b5340:	000b47e9 	.word	0x000b47e9
   b5344:	000b48ed 	.word	0x000b48ed
   b5348:	000b48fd 	.word	0x000b48fd
   b534c:	000b4919 	.word	0x000b4919
   b5350:	000b4cbd 	.word	0x000b4cbd
   b5354:	000b4ef1 	.word	0x000b4ef1

000b5358 <link_constructors_end>:
	...
